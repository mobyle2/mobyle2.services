_type: Program
name: msa
version: '2.1'
title: MSA
description: Multiple sequence alignment
authors: S. F. Altschul
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        comment: This  is  a  file  containing  the  sequences to be aligned.
        prompt: Sequences File
        name: seqs
        simple: true
        argpos: '2'
        format: {perl: '" $value"', python: '" "+str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2044
    -   _type: InputParagraph
        prompt: Control parameters
        name: control
        children:
        -   _type: InputProgramParameter
            comment: Turns  off  the optimal multiple alignment segment of the program.This
                allows the user to see the heuristic alignment and other data produced
                by the program before the it attempts to produce an optimal multiple
                alignment.
            prompt: Turns off the optimal multiple alignment (-m)
            name: optimal
            format: {perl: '($value)? " -m":""', python: '("" , " -m")[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Allows the user to force the alignment of certain  residues.
                The file referred to must have one or more lines of the following
                format:seqs.| "S" precedes block start | "L" precedes block lengthThe
                example would force positions 22 to 31 of sequence 2 to  be  aligned  with
                positions  21  to  30  of  sequence  3  and  positions 25 to 34 of
                sequence 5; it would else force position 35 of sequence  2  to  be
                aligned with position 36 of sequence 3 and position 41 of sequence
                5.  Needless to say, all positions forced into alignment  must  be
                mutually consistent.
            prompt: User file to force the alignment of certain  residues (-f)
            name: forcedres
            format: {perl: '(defined $value)? " -f $value" : ""', python: '( ""  ,
                    " -f " + str(value) )[ value is not None ]'}
    -   _type: InputParagraph
        prompt: Cost parameters
        name: Cost
        children:
        -   _type: InputProgramParameter
            comment: As a default, no charge is made for the existence of a terminal
                gap.
            prompt: Charges terminal gaps the same as internal gaps (-g)
            name: endgap
            format: {perl: '($value)? " -g":""', python: '("" , " -g")[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: The cost of a multiple alignment is taken to be the unweighted
                sum of all the pairwise alignments.  In the absence of this flag,
                the program estimates an evolutionary tree and uses it to  assign
                weights  to  each  pairwise  alignment using either rationale-1 or
                rational-2 as described in Altschul et al., J.  Molec.  Biol.  208
                (1989).
            prompt: Cost of a multiple alignment (-b)
            name: unweight
            format: {perl: '($value)? " -b":""', python: '("" , " -b")[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Specifies  the  maximum  score  of  an optimal multiple alignment.
                Default is calculated from the  scores  of  the  optimal  pairwise
                alignments, the weights, and the epsilons.
            prompt: Maximum score of an optimal multiple alignment (-d)
            name: maxscore
            format: {perl: '(defined $value)? " -d$value" : ""', python: '( "" , "
                    -d" + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: As  a default, the program calculates an  heuristic  multiple  alignment
                and  uses  it  to  set epsilons for each pairwise alignment.  Frequently
                the "optimal multiple alignment" will  be  found  to  have observed  epsilons  exceeding  those
                supplied or calculated.  When this is the case, it is advisable to
                rerun the program using suitably augmented epsilons.  The file named
                here should have integers separated by spaces or newlines or both,
                with one integer for each pair  of  sequences  in  the order 1-2,
                1-3, ... , 1-N, 2-3, ... , (N-1)-N.
            prompt: User  specified  epsilons  for  each  pairwise  alignment (-e)
            name: epsilons
            format: {perl: '(defined $value)? " -e $value" : ""', python: '( ""  ,
                    " -e " + str(value) )[ value is not None ]'}
        -   _type: InputProgramParameter
            comment: Allows the user to specify the cost for a gap, as well as the
                cost for  aligning  any  pair  of  letters or a letter with a null.
                The default is PAM-250 costs for protein sequences, using the one-letter  code.  The
                format of this file is an integer, followed by all possible pairs
                of aligned symbols followed by  their  cost.   For example, the file
                might begin as follows:This  would  specify  a  cost of 0 for aligning
                a null symbol with another null symbol, a cost of 1 for aligning an  A  with  a  null
                symbol,  etc.,  and an additional cost of 3 for the existence of a
                gap.  The program assumes the costs are symmetric, so  that  there
                is  no  need to have a line for C A as well as for A C.  All costs
                must be non-negative integers.
            prompt: User costs file (-c)
            name: costs
            format: {perl: '(defined $value)? " -c $value" : ""', python: '( ""  ,
                    " -c " + str(value) )[ value is not None ]'}
    -   _type: InputParagraph
        prompt: Output parameters
        name: output
        children:
        -   _type: InputProgramParameter
            prompt: Suppress verbose output (-o)
            name: quiet
            format: {perl: '($value)? " -o":""', python: '("" , " -o")[ value ]'}
            type: {_type: BooleanType, default: false}
outputs: {_type: OutputParagraph}
operations: ['EDAM_operation:0492']
topics: ['EDAM_topic:0182']
homepage_links: ['http://www.ncbi.nlm.nih.gov/CBBresearch/Schaffer/msa.html']
public_name: msa
command: {path: null, value: msa}
source_links: ['ftp://fastlink.nih.gov/pub/msa/msa.tar.Z']
