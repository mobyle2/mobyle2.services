_type: Program
name: rnaalifold
title: RNAalifold
description: Calculate secondary structures for a set of aligned RNAs
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: Aligned RNA Sequences File
        name: seq
        simple: true
        argpos: '1000'
        format: {perl: '" $value"', python: '" "+str( value )'}
        mandatory: true
    -   _type: InputParagraph
        prompt: Control options
        name: control
        children:
        -   _type: InputProgramParameter
            comment: Set  the  weight  of  the  covariance  term in the energy function
                to factor. Default is 1.
            prompt: Weight of the covariance (-cv)
            name: covariance
            format: {perl: '(defined $value and $value != $vdef)? " -cv $value" :
                    ""', python: '( "" , " -cv " + str(value) )[ value is not None
                    and value != vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            comment: Set the penalty for non-compatible sequences in the covariance  term  of  the
                energy function to factor. Default is 1.
            prompt: Penalty for non-compatible sequences in the covariance (-nc)
            name: non_compatible
            format: {perl: '(defined $value and $value != $vdef)? " -nc $value" :
                    ""', python: '( "" , " -nc " + str(value) )[ value is not None
                    and value != vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            comment: Score pairs with endgaps same as gap-gap pairs.
            prompt: Score pairs with endgaps (-E)
            name: endgaps
            format: {perl: '($value)? " -E" : ""', python: '( "" , " -E" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Calculate  the  partition function and base pairing probability
                matrix in addition to the mfe structure. Default is calculation  of  mfe  structure
                only.
            prompt: Calculate the partition function and base pairing probability
                matrix (-p)
            name: partition
            format: {perl: '($value)? " -p" : ""', python: '( "" , " -p" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Rescale energy parameters to a temperature of temp C. (-T)
            name: temperature
            format: {perl: '(defined $value and $value != $vdef)? " -T $value" : ""',
                python: '( "" , " -T " + str(value) )[ value is not None and value
                    != vdef]'}
            type: {_type: IntegerType, default: 37}
        -   _type: InputProgramParameter
            prompt: Do not include special stabilizing energies for certain tetraloops
                (-4)
            name: tetraloops
            format: {perl: '($value)? " -4" : ""', python: '( "" , " -4" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "How to treat 'dangling end' energies for bases adjacent to helices\
                \ in free ends and multiloops: Normally only unpaired bases can participate\
                \ in at most one dangling end.\n             With -d2 this check is\
                \ ignored, this is the default for partition function folding (-p).\
                \ \n             -d ignores dangling ends altogether. Note that by\
                \ default pf and mfe folding treat dangling ends differently, \n \
                \            use -d2 (or -d) in addition to -p to ensure that both\
                \ algorithms use the same energy model. \n             The -d2 options\
                \ is available for RNAfold, RNAeval, and RNAinverse only."
            prompt: How to treat dangling end energies for bases adjacent to helices
                in free ends and multiloops (-d)
            name: dangling
            format: {perl: '(defined $value and $value ne $vdef)? " $value" : ""',
                python: '( "" , " " + str(value) )[ value is not None and value !=
                    vdef]'}
            type:
                _type: StringType
                default: -d1
                options:
                - {label: Only unpaired bases can participate in at most one dangling
                        end (-d1), value: -d1}
                - {label: Ignores dangling ends altogether (-d), value: -d}
                - {label: 'The check is ignored, this is the default for partition
                        function folding (-d2)', value: -d2}
    -   _type: InputParagraph
        prompt: Input parameters
        name: input
        children:
        -   _type: InputProgramParameter
            comment: Assume circular (instead of linear) RNA molecules.
            prompt: Circular RNA molecules (-circ)?
            name: circ
            format: {perl: '($value)? " -circ" : ""', python: '( "" , " -circ" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Produce structures without lonely pairs (helices of length 1).  For  partition  function  folding  this  only
                disallows pairs that can only occur isolated. Other pairs may still
                occasionally occur as helices  of  length 1.
            prompt: Avoid structures without lonely pairs (helices of length 1) (-noLP)
            name: noLP
            format: {perl: '($value)? " -noLP" : ""', python: '( "" , " -noLP" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Do not allow GU pairs (-noGU)
            name: noGU
            format: {perl: '($value)? " -noGU" : ""', python: '( "" , " -noGU" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Do not allow GU pairs at the end of helices (-noCloseGU)
            name: noCloseGU
            format: {perl: '($value)? " -noCloseGU" : ""', python: '( "" , " -noCloseGU"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Allow other pairs in addition to the usual AU,GC,and GU pairs.
                pairs is a comma seperated list of additionally allowed pairs. If
                a the first character is a '-' then AB will imply that AB and BA are
                allowed pairs. e.g. RNAfold -nsp -GA will allow GA and AG pairs. Nonstandard
                pairs are given 0 stacking energy.
            prompt: Non standard pairs (comma seperated list) (-nsp)
            name: nsp
            format: {perl: '(defined $value)? " -nsp $value" : ""', python: '( ""  ,
                    " -nsp " + str(value) )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: Read energy parameters from paramfile, instead of using the default
                parameter set. A sample parameterfile should accompany your distribution.
                See the RNAlib documentation for details on the file format.
            prompt: Energy parameter file (-P)
            name: parameter
            format: {perl: '(defined $value)? " -P $value" : ""', python: '( "" ,
                    " -P " + str(value) )[ value is not None ]'}
        -   _type: InputProgramParameter
            comment: "use specified Ribosum Matrix instead of normal energy model.\
                \ Matrices to use\n              should be 6x6 matrices, the order\
                \ of the terms is AU, CG, GC, GU, UA, UG."
            prompt: use specified Ribosum Matrix instead of normal energy model.
            name: ribosum_matrix
            format: {perl: '(defined $value)? " -P $value" : ""', python: '( "" ,
                    " -P " + str(value) )[ value is not None ]'}
        -   _type: InputProgramParameter
            comment: "use  Ribosum  scoring  matrix. The matrix is chosen according\
                \ to the minimal\n              and maximal pairwise identities of\
                \ the sequences in the  file.   When  using\n              Ribosum\
                \  scores,  best  benchmark results were achieved with options -cv\
                \ 0.6\n              -nc 0.5 (see above)."
            prompt: use  Ribosum  scoring  matrix.
            name: use_ribosum_matrix
            format: {perl: '(defined $value)? " -r $value" : ""', python: '( "" ,
                    " -r ")[ value ]'}
            type: {_type: BooleanType}
        -   _type: InputProgramParameter
            comment: The programm reads first the sequence then the a string containg
                constraints on the structure encoded with the symbols:| (the corresponding
                base has to be paired x (the base is unpaired)< (base i is paired
                with a base j>i)> (base i is paired with a base j<i)matching brackets
                ( ) (base i pairs base j)Pf folding ignores constraints of type '|'
                '<' and '>', but disallow all pairs conflicting with a constraint
                of type 'x' or '( )'. This is usually sufficient to enforce the constraint.
            prompt: Calculate structures subject to constraints (-C)
            name: constraints
            format: {perl: '(defined $value)? " -C < $value" : ""', python: '( ""
                    , " -C <" + str( value) )[ value is not None ]'}
    -   _type: InputParagraph
        prompt: Output options
        name: output_options
        children:
        -   _type: InputProgramParameter
            prompt: Print most informative sequence instead of simple consensus (-mis)?
            name: informative
            format: {perl: '($value)? " -mis" : ""', python: '( "" , " -mis" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Produce a colored version of the consensus strcture plot "alirna.ps"
                (default black and white).
            prompt: Produce a colored version of the consensus strcture plot (-color)?
            name: color
            format: {perl: '($value)? " -color" : ""', python: '( "" , " -color" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Produce a colored and structure annotated alignment in PostScript  format  in
                the file "aln.ps".
            prompt: Produce a colored and structure annotated alignment in PostScript
                format (-aln) ?
            name: aln
            format: {perl: '($value)? " -aln" : ""', python: '( "" , " -aln" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Postscript file
        name: psfiles
        filenames: {perl: '"*.ps"', python: '"*.ps"'}
    -   _type: OutputProgramParameter
        comment: "The  file  \"alifold.out\"  will  contain a list of likely pairs\
            \ sorted by\n       credibility, suitable for viewing  with \"AliDot.pl\""
        prompt: list of likely pairs
        name: alifold_out
        filenames: {perl: '"alifold.out"', python: '"alifold.out"'}
        precond: partition
comment: "RNAalifold reads aligned RNA sequences from file and  calculates \n    \
    \    their minimum free energy (mfe) structure, partition function (pf) and base\
    \ pairing probability matrix. \n        Currently, the input alignment  has  to\
    \  be  in  CLUSTAL  format.  \n        It returns  the  mfe  structure in bracket\
    \ notation, its energy, \n        the free energy of the thermodynamic ensemble\
    \ and the frequency of the mfe structure \n        in  the  ensemble  to outfile.\
    \  It  also  produces  Postscript files with plots of the resulting \n       \
    \ secondary structure graph (\"alirna.ps\") and a \"dot plot\" of the  base  pairing\
    \  matrix  (\"alidot.ps\"). \n        The file \"alifold.out\" will contain a\
    \ list of likely pairs sorted by credibility.CAVEATS: Since gaps are not removed\
    \ for the evaluation of energies, \n        it may be of advantage to remove any\
    \ columns with more than, say, \n        75% gaps from the alignment before folding\
    \ with RNAalifold.Sequences are not weighted. If possible, do not mix very similar\
    \ and dissimilar sequences. \n\t\tDuplicate sequences, for example, can distort\
    \ the prediction."
operations: ['EDAM_operation:0278']
topics: ['EDAM_topic:0697']
references:
- {doi: null, label: 'D.H. Mathews, J. Sabina, M. Zuker and H. Turner "Expanded Sequence
        Dependence of Thermodynamic Parameters Provides Robust Prediction of RNA Secondary
        Structure" JMB, 288, pp 911-940, 1999', url: null}
- {doi: null, label: 'vo L. Hofacker, Martin Fekete, and Peter F. Stadler "Secondary
        Structure Prediction for Aligned RNA Sequences" J.Mol.Biol. 319: 1059-1066
        (2002).', url: null}
documentation_links: ['http://www.tbi.univie.ac.at/RNA/RNAalifold.html']
public_name: rnaalifold
command: {path: null, value: RNAalifold}
