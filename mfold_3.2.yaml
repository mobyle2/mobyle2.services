_type: Program
name: mfold
version: '3.2'
title: MFOLD
description: Prediction of RNA secondary structure
authors: M. Zuker
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: mfold
        argpos: '0'
        format: {perl: '"mfold"', python: '"mfold"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: "SEQ : The sequence file may contain multiple sequences.\n\t    \
            \  At present, the mfold script will fold the first sequence by default."
        prompt: Sequence File (SEQ)
        name: SEQ
        simple: true
        argpos: '1'
        format: {perl: '" SEQ=$value"', python: '" SEQ=" + str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1942', 'EDAM_format:1936', 'EDAM_format:1927']
            data_terms: EDAM_data:2977
    -   _type: InputProgramParameter
        prompt: RNA or DNA (NA)
        name: NA
        simple: true
        argpos: '2'
        format: {perl: '(defined $value and $value ne $vdef) ? " NA=$value" : ""',
            python: '("" , " NA=" + str(value))[ value is not None and value != vdef]'}
        type:
            _type: StringType
            default: RNA
            options:
            - {label: RNA, value: RNA}
            - {label: DNA, value: DNA}
    -   _type: InputProgramParameter
        comment: It indicates whether a linear or circular nucleic acid is being folded.
        prompt: Sequence type  (LC)
        name: LC
        simple: true
        argpos: '2'
        format: {perl: '(defined $value and $value ne $vdef) ? " LC=$value" : ""',
            python: '("" , " LC=" + str(value))[ value is not None and value != vdef]'}
        type:
            _type: StringType
            default: linear
            options:
            - {label: Linear, value: linear}
            - {label: Circular, value: circular}
    -   _type: InputParagraph
        prompt: Control options
        name: control
        children:
        -   _type: InputProgramParameter
            prompt: Temperature (T)
            name: T
            simple: true
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " T=$value" : ""',
                python: '("" , " T=" + str(value))[ value is not None and value !=
                    vdef]'}
            type: {_type: IntegerType, default: 37}
        -   _type: InputProgramParameter
            comment: This is the percent suboptimality for computing the energy dot
                plot and suboptimal foldings. The default value is 5%. This parameter
                controls the value of the free energy increment, delta (deltaG). Delta
                of deltaG is set to P% of deltaG, computed minimum free energy. The
                energy dot plot shows only those base pairs that are in foldings with
                free energy minus or equal to deltaG plus delta (deltaG). Similarly,
                the free energies of computed foldings are in the range from deltaG
                to deltaG plus delta (deltaG). No matter the value of P, mfold currently
                keeps delta (deltaG) in the range [1,12] (kcal/mole).
            prompt: Percent (P)
            name: P
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " P=$value" : ""',
                python: '("", " P="+str(value))[value is not None and value != vdef]'}
            type: {_type: IntegerType, default: 5}
        -   _type: InputProgramParameter
            prompt: Na+ molar concentration (NA_CONC)
            name: NA_CONC
            simple: true
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " NA_CONC=$value"
                    : ""', python: '("" , " NA_CONC=" + str(value))[ value is not
                    None and value != vdef]'}
            type: {_type: FloatType, default: 1.0}
        -   _type: InputProgramParameter
            prompt: Mg++ molar concentration (MG_CONC)
            name: MG_CONC
            simple: true
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " MG_CONC=$value"
                    : ""', python: '("" , " MG_CONC=" + str(value))[ value is not
                    None and value != vdef]'}
            type: {_type: FloatType, default: 0.0}
        -   _type: InputProgramParameter
            comment: This is the window parameter that controls the number of foldings
                that are automatically computed by mfold . `W' may be thought of as
                a distance parameter. The distance between 2 base pairs, i.j and i'.j'
                may be defined as max{|i-i'|,|j-j'|}. Then if k-1 foldings have already
                been predicted by mfold , the kth folding will have at least W base
                pairs that are at least a distance W from any of the base pairs in
                the first k-1 foldings. As W increases, the number of predicted foldings
                decreases. If W is not specified, mfold selects a value by default
                based on sequence length.
            prompt: Window parameter  (W)
            name: W
            argpos: '3'
            format: {perl: '(defined $value) ? " W=$value" : ""', python: '("" , "
                    W=" + str(value))[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: A base pair i.j will not be allowed to form (in linear RNA) if
                j-i > MAXBP. For circular RNA, a base pair i.j cannot form if min{j-i,n+i-j}
                > MAXBP . Thus small values of MAXBP ensure that only short range
                base pairs will be predicted. By default, MAXBP=+infinity, indicating
                no constraint.
            prompt: Max base pair distance (MAXBP)
            name: MAXBP
            argpos: '3'
            format: {perl: '(defined $value) ? " MAXBP=$value" : ""', python: '(""
                    , " MAXBP=" + str(value))[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Maximum bulge/interior loop size (MAX_LP)
            name: MAX_LP
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " MAX_LP=$value"
                    : ""', python: '("" , " MAX_LP=" + str(value))[ value is not None
                    and value != vdef]'}
            type: {_type: IntegerType, default: 30}
        -   _type: InputProgramParameter
            prompt: Maximum asymmetry of a bulge/interior loop (MAX_AS)
            name: MAX_AS
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " MAX_AS=$value"
                    : ""', python: '("" , " MAX_AS=" + str(value))[ value is not None
                    and value != vdef]'}
            type: {_type: IntegerType, default: 30}
        -   _type: InputProgramParameter
            comment: 'MAX : This is the maximum number of foldings that mfold will
                compute (50 by default). It is better to limit the number of foldings
                by careful selection of the P and W parameters.'
            prompt: Maximum number of foldings to be computed (MAX)
            name: MAX
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " MAX=$value" :
                    ""', python: '("" , " MAX=" + str(value))[ value is not None and
                    value != vdef]'}
            type: {_type: IntegerType, default: 50}
        -   _type: InputProgramParameter
            comment: 'This parameter currently takes on 3 values.- `none'' : secondary
                structures are drawn without any special annotation. Letters or outline
                are in black, while base pairs are red lines or dots for GC pairs
                and blue lines or dots for AU and GU pairs.- `p-num'' : Colored dots,
                colored base characters or a combination are used to display in each
                folding how well-determined each base is according to the P-num values
                in the `fold_name.ann'' file.- `ss-count'' : Colored dots, colored
                base characters or a combination are used to display in each folding
                how likely a base is to be single-stranded according to sample statistics
                stored in the `fold_name.ss-count'' file.'
            prompt: Structure annotation type (ANN)
            name: ANN
            argpos: '2'
            format: {perl: '(defined $value and $value ne $vdef) ? " ANN=$value" :
                    ""', python: '("" , " ANN=" + str(value))[ value is not None and
                    value != vdef]'}
            type:
                _type: StringType
                default: none
                options:
                - {label: No special annotation, value: none}
                - {label: p-num, value: p-num}
                - {label: ss-count, value: ss-count}
        -   _type: InputProgramParameter
            prompt: Structure display mode (MODE)
            name: MODE
            argpos: '2'
            format: {perl: '(defined $value and $value ne $vdef) ? " MODE=$value"
                    : ""', python: '("" , " MODE=" + str(value))[ value is not None
                    and value != vdef]'}
            type:
                _type: StringType
                default: auto
                options:
                - {label: Auto, value: auto}
                - {label: Bases, value: bases}
                - {label: Lines, value: lines}
        -   _type: InputProgramParameter
            prompt: Structure rotation angle (ROT_ANG)
            name: ROT_ANG
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " ROT_ANG=$value"
                    : ""', python: '("" , " ROT_ANG=" + str(value))[ value is not
                    None and value != vdef]'}
            type: {_type: IntegerType, default: 0}
        -   _type: InputProgramParameter
            prompt: 5' base number (START)
            name: START
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " START=$value"
                    : ""', python: '("" , " START=" + str(value))[ value is not None
                    and value != vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            prompt: 3' base number  (STOP)
            name: STOP
            argpos: '3'
            format: {perl: '(defined $value) ? " STOP=$value" : ""', python: '(""
                    , " STOP=" + str(value))[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: "AUX : (optional) This is the name of an auxiliary input file\
                \ of folding\n\t\t  constraints. If this parameter is not used, mfold\
                \ looks for a file\n\t\t  named `fold_name.aux'. If this file exists\
                \ and is not empty, then it\n\t\t  is interpreted as a constraint\
                \ file. Thus constraints may be used\n\t\t  without the use of this\
                \ command line parameter.Fill the box or the file with constraints\
                \ (1 constraint per line) You may:1. force bases i,i+1,...,i+k-1 to\
                \ be double stranded by entering:F   i   0   k2. force consecutive\
                \ base pairs i.j,i+1.j-1, ...,i+k-1.j-k+1 by entering:F   i   j  \
                \ k3. force bases i,i+1,...,i+k-1 to be single stranded by entering:P\
                \   i   0   k4. prohibit the consecutive base pairsi.j,i+1.j-1, ...,i+k-1.j-k+1\
                \ by entering:P   i   j   k5. prohibit bases i to j from pairing with\
                \ bases k to l by entering:P   i-j   k-l"
            prompt: Constraints File (AUX)
            name: AUX
            argpos: '3'
            format: {perl: '(defined $value) ? " AUX=$value" : ""', python: '( ""
                    , " AUX=" + str(value) )[ value is not None]'}
    -   _type: InputParagraph
        prompt: Output options
        name: runtype
        children:
        -   _type: InputProgramParameter
            prompt: Text output file
            name: txt_format
            argpos: '4'
            format: {perl: '""', python: '""'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Detailed output file
            name: det_format
            argpos: '4'
            format: {perl: '""', python: '""'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Html output file
            name: html_format
            argpos: '4'
            format: {perl: '($value) ? " RUN_TYPE=html" : ""', python: '("" , " RUN_TYPE=html")[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: 'The RNAML (RNA Markup Language) was developed by a consortium
                of investigators and is a proposed syntax for RNA information files.
                A description was published in 2002:A. Waugh, P. Gendron, R. Altman,
                J.W. Brown, D. Case, D. Gautheret, S.C. Harvey, N. Leontis, J. Westbrook,
                E. Westhof, M. Zuker, and

                F. Major RNAML: A standard syntax for exchanging RNA information.
                RNA   8 (6), 707-717, (2002)'
            prompt: RNAML output file
            name: rnaml_format
            type: {_type: BooleanType, default: false}
        -   _type: InputParagraph
            prompt: Energy Dot plot
            name: energy_param
            children:
            -   _type: InputProgramParameter
                comment: 'This is a text file that contains all the

                    base pairs on the energy dot plot , organized into helices for
                    which Delta G(i,j) is constant. The first record is a header,
                    and each subsequent record

                    describes a single helix. The records are usually sorted by Delta
                    G(i,j) and are often filtered so that short helices or isolated
                    base pairs (helices of length 1) in suboptimal foldings are removed.'
                prompt: Energy dot plot output file
                name: plot_format
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                prompt: Structure annotation output file
                name: ann_format
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: This file is the same as plot file, except that the energy
                    column is replaced by an h-num column. These files are usually
                    sorted by h-num; lowest to highest, or best determined to worst
                    determined. Often, only helices in optimal foldings are retained.
                prompt: Helix num output file
                name: hnum_format
                type: {_type: BooleanType, default: false}
        -   _type: InputParagraph
            prompt: Structure file format
            name: structure_format
            children:
            -   _type: InputProgramParameter
                comment: A graphics file that ends with the suffix .gif should be
                    displayed directly on the page of your web browser.
                prompt: GIF output file
                name: gif_format
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                prompt: PDF output file
                name: pdf_format
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: PostScript is a programming language that is used to describe
                    output for printing and display. It was developed by Adobe Systems.
                    It is common to have PostScript capability on most printers. Programs
                    such as Ghostscript, Ghostview and GSview can be used to display
                    PostScript files(http://www.cs.wisc.edu/~ghost/").
                prompt: Postscript output file
                name: ps_format
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: 'The ''.ct file'' contains the nucleic acid sequence and
                    base pairing information from which a structure plot may be computed.
                    The mfold software and mfold web servers use the "sir_graph_ng"
                    program to create Postscript, jpg and png images from .ct files.
                    "sir_graph_ng" is part of the mfold_util package that may be obtained
                    here: http://www.bioinfo.rpi.edu/~zukerm/export/.'
                prompt: CT output file
                name: ct_format
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: "This is an input file for the XRNA program by Bryn Weiser\
                    \ and Harry Noller. \n                The new Java version is\
                    \ available from UC Santa Cruz RNA Center web site: \n       \
                    \         href=\"http://rna.ucsc.edu/rnacenter/xrna/xrna.html\"\
                    . The\n                ss file can be regarded as an expanded\
                    \ ct file. It contains base and connect information as \n    \
                    \            well a coordinates for plotting the bases."
                prompt: XRNA_ss output file
                name: ss_format
                type: {_type: BooleanType, default: false}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output options
        name: runtype
        children:
        -   _type: OutputProgramParameter
            name: txt_out
            filenames: {perl: '"*.out"', python: '"*.out"'}
            precond: txt_format
            output_type: stdout
        -   _type: OutputProgramParameter
            prompt: Detailed outfile
            name: det_out_html
            filenames: {perl: '"*.det.html"', python: '"*.det.html"'}
            precond:
                '#and': [det_format, html_format]
        -   _type: OutputProgramParameter
            prompt: Detailed outfile
            name: det_out
            filenames: {perl: '"*.det"', python: '"*.det"'}
            precond:
                '#and':
                - det_format
                - {'#not': html_format}
        -   _type: OutputProgramParameter
            prompt: Html output file
            name: out_html
            filenames: {perl: '"*.html"', python: '"*.html"'}
            precond: html_format
        -   _type: OutputProgramParameter
            prompt: RNAML output file
            name: out_rnaml
            filenames: {perl: '"*.rnaml"', python: '"*.rnaml"'}
            precond: rnaml_format
        -   _type: OutputParagraph
            prompt: Energy Dot plot
            name: energy_param
            children:
            -   _type: OutputProgramParameter
                prompt: Energy dot plot output file
                name: out_plot
                filenames: {perl: '"*.plot"', python: '"*.plot"'}
                precond: plot_format
            -   _type: OutputProgramParameter
                prompt: Structure annotation output file
                name: ann_plot
                filenames: {perl: '"*.ann"', python: '"*.ann"'}
                precond: ann_format
            -   _type: OutputProgramParameter
                prompt: Helix num output file
                name: hnum_plot
                filenames: {perl: '"*.h-num"', python: '"*.h-num"'}
                precond: hnum_format
        -   _type: OutputParagraph
            prompt: Structure file format
            name: structure_format
            children:
            -   _type: OutputProgramParameter
                prompt: GIF output file
                name: out_gif
                filenames: {perl: '*.gif', python: '"*.gif"'}
                precond: gif_format
            -   _type: OutputProgramParameter
                prompt: PDF output file
                name: out_pdf
                filenames: {perl: '"*.pdf"', python: '"*.pdf"'}
                precond: pdf_format
            -   _type: OutputProgramParameter
                prompt: Postscript output file
                name: out_ps
                filenames: {perl: '"*.ps"', python: '"*.ps"'}
                precond: ps_format
            -   _type: OutputProgramParameter
                prompt: CT output file
                name: out_ct
                filenames: {perl: '"*.ct"', python: '"*.ct"'}
                precond: ct_format
            -   _type: OutputProgramParameter
                prompt: XRNA_ss output file
                name: out_ss
                filenames: {perl: '"*.ss-count"', python: '"*.ss-count"'}
                precond: ss_format
operations: ['EDAM_operation:0278']
topics: ['EDAM_topics:0697']
references:
- {doi: null, label: 'M. Zuker, D.H. Mathews and D.H. Turner Algorithms and Thermodynamics
        for RNA Secondary Structure Prediction: A Practical Guide in RNA Biochemistry
        and Biotechnology, J. Barciszewski and B.F.C. Clark, eds., NATO ASI Series,
        Kluwer Academic Publishers, (1999)', url: null}
documentation_links: ['http://bioweb2.pasteur.fr/docs/mfold/index.html']
homepage_links: ['http://www.bioinfo.rpi.edu/applications/mfold/']
public_name: mfold
command: {path: null, value: null}
source_links: ['http://www.bioinfo.rpi.edu/~zukerm/export/']
