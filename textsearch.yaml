_type: Program
name: textsearch
title: textsearch
description: Search the textual description of sequence(s)
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            comment: "The search pattern is a regular expression. Use a | to indicate\
                \ OR. \n  For example: \n  human|mouse \n  will find text with either\
                \ 'human' OR 'mouse' in the text"
            prompt: Enter a pattern to search for
            name: e_pattern
            simple: true
            argpos: '2'
            format: {python: '("", " -pattern=" + str(value))[value is not None]'}
            mandatory: true
            type: {_type: StringType}
    -   _type: InputParagraph
        prompt: Additional section
        name: e_additional
        children:
        -   _type: InputProgramParameter
            prompt: Do a case-sensitive search
            name: e_casesensitive
            argpos: '3'
            format: {python: '("", " -casesensitive")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Format output as an html table
            name: e_html
            argpos: '4'
            format: {python: '("", " -html")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "This is a way of shortening the command line if you only want\
                \ a few things to be displayed. Instead of specifying: \n  '-nohead\
                \ -noname -nousa -noacc -nodesc' \n  to get only the name output,\
                \ you can specify \n  '-only -name'"
            prompt: Display the specified columns
            name: e_only
            argpos: '5'
            format: {python: '("", " -only")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display column headings
            name: e_heading
            argpos: '6'
            format: {python: '("", " -heading")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display the usa of the sequence
            name: e_usa
            argpos: '7'
            format: {python: '("", " -usa")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'accession' column
            name: e_accession
            argpos: '8'
            format: {python: '("", " -accession")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'name' column
            name: e_name
            argpos: '9'
            format: {python: '("", " -name")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'description' column
            name: e_description
            argpos: '10'
            format: {python: '("", " -description")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '11'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: textsearch.e_outfile}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '12'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
operations: ['EDAM_operation:0345']
topics: ['EDAM_topic:0155']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/textsearch.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: textsearch
command: {path: null, value: textsearch}
