_type: Program
name: targetp
version: '1.1'
title: targetp
description: predicts the subcellular location of eukaryotic proteins.
authors: Olof Emanuelsson, olof@sbc.su.se
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: targetp
        format: {perl: '"targetp "', python: '"targetp "'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        prompt: Input Sequence
        name: sequence
        simple: true
        argpos: '50'
        format: {perl: '" $value"', python: '" " + str( value )'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2044
    -   _type: InputProgramParameter
        prompt: Use the plant or non-plant version.
        name: type
        simple: true
        argpos: '10'
        format: {perl: '( $value eq ''p'')? " -P ": " -N "', python: '( " -N ", "
                -P ")[ value == ''p'' ]'}
        mandatory: true
        type:
            _type: StringType
            default: 'null'
            options:
            - {label: Choose a type of organism, value: 'null'}
            - {label: plant, value: p}
            - {label: non-plant, value: np}
    -   _type: InputProgramParameter
        prompt: Include cleavage site prediction (-c).
        name: cleavege
        simple: true
        argpos: '20'
        format: {perl: '(defined $value and $value ne $vdef)? " -c " : ""', python: '(
                "" , " -c ")[ value is not None and value != vdef ]'}
        type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        comment: predefined set of cutoffs that yielded this specificity on the TargetP
            test sets.
        prompt: Cutoffs
        name: cutoffs
        children:
        -   _type: InputProgramParameter
            name: predefined_cutoff
            argpos: '30'
            type: {_type: StringType, default: 'null'}
        -   _type: InputParagraph
            comment: The user cutoffs will be ignored if a predefine set of cutoffs
                is specified
            prompt: define your own Cutoffs
            name: user_cutoffs
            precond: {'#not': predefined_cutoff}
            children:
            -   _type: InputProgramParameter
                comment: "In  order to increase the specificity of cTP prediction,\
                    \ use Pcut as a cutoff for predicting cTP: if\n              the\
                    \ winning score is the chloroplast (cTP) score, specifying Pcut\
                    \ means that the score also  has  to\n              be above that\
                    \ value; if not, the sequence will be left unpredicted, and an\
                    \ asterisk (*) will be out\u2010\n              put in the Loc\
                    \ column.The value of Pcut must be between 0.0 and 1.0."
                prompt: cTP
                name: cTP
                format: {perl: '(defined $value and $value ne $vdef)? " -p $value
                        " : ""', python: '( "" , " -p " + str( value ) )[ value is
                        not None and value != vdef ]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: "In  order to increase the specificity of mTP prediction,\
                    \ use Tcut as a cutoff for predicting mTP: if\n              the\
                    \ winning score is the mithochondrial (mTP) score, specifying\
                    \ Tcut means that the score also  has  to\n              be above\
                    \ that value; if not, the sequence will be left unpredicted, and\
                    \ an asterisk (*) will be out\u2010\n              put in the\
                    \ Loc column.The value of Tcut must be between 0.0 and 1.0."
                prompt: mTP
                name: mTP
                format: {perl: '( defined $value and $value ne $vdef)? " -t $value"
                        : ""', python: '( "" , " -t " + str( value ) )[ value is not
                        None and value != vdef ]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: "In  order to increase the specificity of SP prediction,\
                    \ use Scut as a cutoff for predicting SP: if\n              the\
                    \ winning score is the Secretory pathway (SP) score, specifying\
                    \ Scut means that the score also  has  to\n              be above\
                    \ that value; if not, the sequence will be left unpredicted, and\
                    \ an asterisk (*) will be out\u2010\n              put in the\
                    \ Loc column.The value of Scut must be between 0.0 and 1.0."
                prompt: SP
                name: SP
                format: {perl: '( defined $value and $value ne $vdef)? " -s $value"
                        : ""', python: '( "" , " -s " + str( value ) )[ value is not
                        None and value != vdef ]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: "In  order to increase the specificity of any other location\
                    \ prediction, use Ocut as \n              a cutoff for predicting\
                    \ any other location : if\n              the winning score is\
                    \ the other location score, specifying Ocut means that the score\
                    \ also  has  to\n              be above that value; if not, the\
                    \ sequence will be left unpredicted, and an asterisk (*) will\
                    \ be out\u2010\n              put in the Loc column.The value\
                    \ of Ocut must be between 0.0 and 1.0."
                prompt: other
                name: other
                format: {perl: '( defined $value and $value ne $vdef)? " -o $value"
                        : ""', python: '( "" , " -o " + str( value ) )[ value is not
                        None and value != vdef ]'}
                type: {_type: FloatType, default: 0.0}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        comment: "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>The\
            \ output is in plain text; it will go to stdout. For each input sequence\
            \ the following is printed (on one line):</html:p><html:ul><html:li><html:strong>Name\
            \ :</html:strong>Sequence name truncated to 20 characters.</html:li><html:li><html:strong>Len\
            \ :</html:strong>Sequence length.</html:li><html:li><html:strong>cTP,\
            \ mTP, SP, other :</html:strong>Final NN scores on which the final prediction\
            \ is based (Loc, see below). Note that  the  scores  are\n           \
            \   not  really  probabilities,  and  they do not necessarily add to one.\
            \ However, the location with the\n              highest score is the most\
            \ likely according to targetp, and the relationship between the scores\
            \  (the\n              reliability class, see below) may be an indication\
            \ of how certain the prediction is.</html:li><html:li><html:strong>Loc\
            \ :</html:strong>Prediction of localization, based on the scores above;\
            \ the codes are:<html:ul><html:li><html:strong>C :</html:strong>Chloroplast,\
            \ i.e. the sequence contains cTP, a chloroplast transit peptide;</html:li><html:li><html:strong>M\
            \ :</html:strong>Mitochondrion, i.e. the sequence contains mTP, a mitochondrial\
            \ targeting peptide;</html:li><html:li><html:strong>S :</html:strong>Secretory\
            \ pathway, i.e. the sequence contains SP, a signal peptide;</html:li><html:li><html:strong>_\
            \ :</html:strong>any other location;</html:li><html:li><html:strong>*\
            \ :</html:strong>\"don't know\". This character appears if cutoff\n  \
            \                restrictions were demanded (-p, -t, -s, -o, see\n   \
            \               below) and the winning network output score was below\
            \ the requested cutoff for that category.</html:li></html:ul></html:li><html:li><html:strong>RC\
            \ :</html:strong>Reliability  class,  from 1 to 5, where 1 indicates the\
            \ strongest prediction. RC is a measure of the\n              size of\
            \ the difference ('diff') between the highest (winning) and the second\
            \ highest output  scores.\n              There are 5 reliability classes,\
            \ defined as follows:<html:ol><html:li>diff &gt; 0.8</html:li><html:li>0.800\
            \ &gt; diff &gt; 0.600</html:li><html:li>0.600 &gt; diff &gt; 0.400</html:li><html:li>0.400\
            \ &gt; diff &gt; 0.200</html:li><html:li>0.200 &gt; diff</html:li></html:ol>Thus,\
            \ the lower the value of RC the safer the prediction.</html:li><html:li><html:strong>TPlen\
            \ :</html:strong>predicted presequence length (only when the -c option\
            \ is given).</html:li></html:ul></html:div>"
        prompt: targetp report
        name: results
        filenames: {perl: '"targetp.out"', python: '"targetp.out"'}
        output_type: stdout
comment: "<html:div xmlns:html=\"http://www.w3.org/1999/xhtml\"><html:p>targetp  predicts\
    \  the subcellular location of eukaryotic protein sequences. The assignment is\
    \ based on the\n       predicted presence of any of the N-terminal presequences:\
    \ chloroplast transit peptide (cTP),  mitochondrial\n       targeting  peptide\
    \ (mTP) or secretory pathway signal peptide (SP).</html:p><html:p>targetp comes\
    \ in two versions, one for plant proteins (-P) and one for non-plant proteins\
    \ (-N). In the lat&#8208;\n       ter  case cTP is a forbidden prediction. For\
    \ the sequences predicted to contain an N-terminal presequence a\n       prediction\
    \ of its length can be provided (-c).</html:p><html:p><html:strong>CAVEATS :</html:strong><html:br\
    \ />Submit if possible 130 N-terminal residues. The suggested length is  due \
    \ to  the  fact  that  targetp  was\n       trained  taking into account the 130\
    \ N-terminal residues, and the fact that using longer sequences does not\n   \
    \    influence the prediction in any way (apart from making it slower). The cTP\
    \ and mTP  cleavage  site  predic&#8208;\n       tions  are restricted to search\
    \ for a potential cleavage site within the 100 or 120 N-terminal amino acids,\n\
    \       respectively.</html:p></html:div>"
operations: ['EDAM_operation:2489']
topics: ['EDAM_topic:0140']
references:
- {doi: null, label: "Predicting subcellular localization of proteins based on their\
        \ N-terminal amino acid sequence.\n        Olof Emanuelsson, Henrik Nielsen,\
        \ S\xF8ren Brunak and Gunnar von Heijne.\n        J. Mol. Biol., 300: 1005-1016,\
        \ 2000.", url: null}
- {doi: null, label: "Identification of prokaryotic and eukaryotic signal peptides\
        \ and prediction of their cleavage sites.\n         Henrik Nielsen, Jacob\
        \ Engelbrecht, S\xF8ren Brunak and Gunnar von Heijne.\n         Protein Engineering,\
        \ 10:1-6, 1997.", url: null}
documentation_links: ['http://www.cbs.dtu.dk/services/TargetP/']
public_name: targetp
command: {path: null, value: null}
source_links: ['http://www.cbs.dtu.dk/cgi-bin/nph-sw_request?targetp']
