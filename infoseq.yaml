_type: Program
name: infoseq
title: infoseq
description: Display basic information about sequences
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
    -   _type: InputParagraph
        prompt: Advanced section
        name: e_advanced
        children:
        -   _type: InputProgramParameter
            comment: Set this option on (Y) to print the sequence information into
                neat, aligned columns in the output file. Alternatively,  leave it
                unset (N), in which case the information records will be  delimited
                by a character, which you may specify by using the  -delimiter option.
                In other words, if -columns is set on, the  -delimiter option is overriden.
            prompt: Print information in neat, aligned columns.
            name: e_columns
            argpos: '2'
            format: {python: '(" -nocolumns", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: This string, which is usually a single character only, is used
                to delimit individual records in the text output file. It  could be
                a space character, a tab character, a pipe character or  any other
                character or string.
            prompt: Delimiter of records in text output file
            name: e_delimiter
            argpos: '3'
            format: {python: '("", " -delimiter=" + str(value))[value is not None
                    and value!=vdef]'}
            type: {_type: StringType, default: '|'}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            comment: If you enter the name of a file here then this program will write
                the sequence details into that file.
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '4'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: infoseq.e_outfile}
        -   _type: InputProgramParameter
            prompt: Format output as an html table
            name: e_html
            argpos: '5'
            format: {python: '("", " -html")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "This is a way of shortening the command line if you only want\
                \ a few things to be displayed. Instead of specifying: \n  '-nohead\
                \ -noname -noacc -notype -nopgc -nodesc' \n  to get only the length\
                \ output, you can specify \n  '-only -length'"
            prompt: Display the specified columns
            name: e_only
            argpos: '6'
            format: {python: '("", " -only")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display column headings
            name: e_heading
            argpos: '7'
            format: {python: '(" -noheading", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display the usa of the sequence
            name: e_usa
            argpos: '8'
            format: {python: '("", " -usa")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'database' column
            name: e_database
            argpos: '9'
            format: {python: '("", " -database")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'name' column
            name: e_name
            argpos: '10'
            format: {python: '("", " -name")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'accession' column
            name: e_accession
            argpos: '11'
            format: {python: '("", " -accession")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'gi' column
            name: e_gi
            argpos: '12'
            format: {python: '("", " -gi")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'version' column
            name: e_seqversion
            argpos: '13'
            format: {python: '("", " -seqversion")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'type' column
            name: e_type
            argpos: '14'
            format: {python: '("", " -type")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'length' column
            name: e_length
            argpos: '15'
            format: {python: '("", " -length")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'percent gc content' column
            name: e_pgc
            argpos: '16'
            format: {python: '("", " -pgc")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'organism' column
            name: e_organism
            argpos: '17'
            format: {python: '("", " -organism")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'description' column
            name: e_description
            argpos: '18'
            format: {python: '("", " -description")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '19'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
operations: ['EDAM_operation:0229']
topics: ['EDAM_topic:0155']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/infoseq.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: infoseq
command: {path: null, value: infoseq}
