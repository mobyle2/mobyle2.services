!mobyle/program
name: fastdnaml
version: 1.2.2
title: fastDNAml
description: Construction of phylogenetic trees of DNA sequences using maximum likelihood
authors: Olsen, Matsuda, Hagstrom, Overbeek
inputs: !mobyle/inputparagraph
    children:
    - !mobyle/inputprogramparameter
        format: ("fastDNAml", "cat > %s.tmp;" % infile )[bootstrap]
        argpos: 1000
        name: fastdnaml
        command: true
        hidden: true
        type: !mobyle/stringtype {}
    - !mobyle/inputprogramparameter
        format: '" && clean_checkpoints"'
        argpos: 1100
        name: clean_tmp
        command: false
        hidden: true
        type: !mobyle/stringtype {}
    - !mobyle/inputprogramparameter
        comment: The input to fastDNAml is similar to that used by DNAML (and the
            other PHYLIP programs). At least 3 sequences are required.
        prompt: Sequence Alignment File
        format: '"cat " + str(value) + " | "'
        simple: true
        argpos: 1
        mandatory: true
        name: infile
        command: false
        type: !mobyle/formattedtype
            format_terms: ['EDAM_format:1955']
            data_terms: ['EDAM_data:1383']
    - !mobyle/inputprogramparagraph
        prompt: Input Options
        name: inputopt
        children:
        - !mobyle/inputprogramparameter
            prompt: Use empirical base frequencies derived from the sequence data
                ?
            format: ( "" ,"frequencies %s %s %s %s | " % (str(fA), str(fC), str(fG),
                str(fT)) )[ not ( value and fA is None and fC is None and fG is None
                and fT is None) ]
            argpos: 2
            name: frequencies
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparagraph
            prompt: User bases frequencies (instead of empirical frequencies)
            name: user_frequencies
            precond: {'#not': frequencies}
            children:
            - !mobyle/inputprogramparameter
                prompt: A frequency
                mandatory: true
                name: fA
                command: false
                type: !mobyle/floattype {}
            - !mobyle/inputprogramparameter
                prompt: C frequency
                mandatory: true
                name: fC
                command: false
                type: !mobyle/floattype {}
            - !mobyle/inputprogramparameter
                prompt: G frequency
                mandatory: true
                name: fG
                command: false
                type: !mobyle/floattype {}
            - !mobyle/inputprogramparameter
                prompt: T frequency
                mandatory: true
                name: fT
                command: false
                type: !mobyle/floattype {}
        - !mobyle/inputprogramparameter
            comment: This option can be used before a global or treefile option with
                auxiliary data.
            prompt: Transition/transversion ratio
            format: ( "" , " transition " + str(value) + " | " )[ value is not None
                and value != vdef]
            argpos: 10
            name: transition
            command: false
            type: !mobyle/floattype {default: 2.0}
        - !mobyle/inputprogramparameter
            comment: "Note that fastDNAml explores a very small number of alternative\
                \ tree topologies relative to a typical parsimony program. There is\
                \ a very real chance that the search procedure will not find the tree\
                \ topology with the highest likelihood. Altering the order of taxon\
                \ addition and comparing the trees found is a fairly efficient method\
                \ for testing convergence. Typically, it would be nice to find the\
                \ same best tree at least twice (if not three times), as opposed to\
                \ simply performing some\n              fixed number of jumbles and\
                \ hoping that at least one of them will be the optimum."
            prompt: Randomize input order of sequences (jumble)
            format: ( "" , "jumble | " )[ value ]
            argpos: 10
            name: jumble
            precond: {'#not': bootstrap}
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparameter
            comment: The G (global) option has been generalized to permit crossing
                any number of branches during tree rearrangements. In addition, it
                is possible to modify the extent of rearrangement explored during
                the sequential addition phase of tree building.The G U (global and
                user tree) option combination instructs the program to find the best
                of the user trees, and then look for rearrangements that are better
                still.If a rearrangement distance is specified, the input must contain
                a transition option.The Global option can be used to force branch
                swapping on user trees, (combination of Global and User Tree(s) options).
            prompt: Global rearrangements
            format: ( "" , " global ")[ value ]
            argpos: 11
            name: global_opp
            precond:
                '#or':
                -   transition: {'#ne': None}
                - bootstrap
                - jumble
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparameter
            prompt: Number of branches to cross in rearrangements of the completed
                tree
            format: ( "" , " %s " % str(final_arrgt))[ value is not None]
            argpos: 12
            name: final_arrgt
            precond:
                '#and':
                -   '#or':
                    -   transition: {'#ne': None}
                    - bootstrap
                    - jumble
                - global_opp
            command: false
            type: !mobyle/integertype {}
        - !mobyle/inputprogramparameter
            prompt: Number of branches to cross in testing rearrangements during the
                sequential addition phase of tree inference
            format: ( "" , " %s " % str(partial_arrgt))[ value is not None]
            argpos: 13
            name: partial_arrgt
            precond:
                '#and':
                -   '#or':
                    -   transition: {'#ne': None}
                    - bootstrap
                    - jumble
                - global_opp
            command: false
            type: !mobyle/integertype {}
        - !mobyle/inputprogramparameter
            prompt: Number of branches to cross in testing rearrangements during the
                sequential addition phase of tree inference
            format: '" | "'
            argpos: 14
            name: pipe_arrgt
            precond:
                '#and':
                -   '#or':
                    -   transition: {'#ne': None}
                    - bootstrap
                    - jumble
                - global_opp
            command: false
            hidden: true
            type: !mobyle/integertype {}
        - !mobyle/inputprogramparameter
            comment: This option greatly decreases the time in initially placing a
                new sequence in the growing tree (but does not change the time required
                to subsequently test rearrangements). The overall time savings seems
                to be about 30%, based on a very limited number of test cases. Its
                downside, if any, is unknown. This will probably become default program
                behavior in the near future.If the analysis is run with a global option
                of 'G 0 0', so that no rearrangements are permitted, the tree is build
                very approximately, but very quickly. This may be of greatest interest
                if the question is, 'Where does this one new sequence fit into this
                known tree?' The known tree is provided with the restart option, below.PHYLIP
                DNAML does not include anything comparable to the quickadd option.
            prompt: Decreases the time in initially placing a new sequence in the
                growing tree (quickadd)
            format: ( "" , " quickadd | " )[ value ]
            argpos: 2
            name: quickadd
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparameter
            prompt: Use the specified sequence number as outgroup
            format: ( "" , "outgroup " + str(value) + " | " )[ value is not None ]
            argpos: 2
            name: outgroup
            command: false
            type: !mobyle/integertype {}
    - !mobyle/inputprogramparagraph
        comment: This options allows you to enter your own trees and instructs the
            program to evaluate them.
        prompt: User input Tree Options
        name: treeopt
        precond: {'#not': bootstrap}
        children:
        - !mobyle/inputprogramparameter
            comment: The trees must be in Newick format, and terminated with a semicolon.
                (The program also accepts a pseudo_newick format, which is a valid
                prolog fact.)The tree reader in this program is more powerful than
                that in PHYLIP 3.3. In particular, material enclosed in square brackets,
                [ like this ], is ignored as comments; taxa names can be wrapped in
                single quotation marks to support the inclusion of characters that
                would otherwise end the name (i.e., '(', ')', ':', ';', '[', ']',
                ',' and ' '); names of internal nodes are properly ignored; and exponential
                notation (such as 1.0E-6) for branch lengths is supported.
            prompt: User tree - tree(s) file
            format: ( "" , " usertree %s |" % str(value) )[ value is not None ]
            argpos: 2
            name: user_tree
            command: false
            type: !mobyle/formattedtype
                format_terms: ['EDAM_format:1910']
                data_terms: ['EDAM_data:0872']
        - !mobyle/inputprogramparameter
            comment: Causes user trees to be read with branch lengths (and it is an
                error to omit any of them). Without the L option, branch lengths in
                user trees are not required, and are ignored if present.
            prompt: User trees to be read with branch lengths
            format: ( "" , "userlengths |" )[ value ]
            argpos: 2
            name: user_lengths
            precond: {'#not': bootstrap}
            command: false
            type: !mobyle/booleantype {default: false}
    - !mobyle/inputprogramparagraph
        prompt: Bootstrap
        name: boot
        children:
        - !mobyle/inputprogramparameter
            comment: Tree files will be summarized in one '.tree' file as well as
                output files in one '.out' file
            prompt: Generates a re-sample of the input data (bootstrap)
            format: ( "" , " fastdnaml " )[ value ]
            simple: true
            argpos: 1001
            name: bootstrap
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparagraph
            prompt: Bootstrap options
            name: bootopt
            precond: bootstrap
            children:
            - !mobyle/inputprogramparameter
                prompt: Number of different bootstrap samples
                format: ( "" , " -boots " + str(value) )[ value is not None and value
                    != vdef]
                simple: true
                argpos: 1002
                name: nboots
                command: false
                type: !mobyle/integertype {default: 1}
            - !mobyle/inputprogramparameter
                comment: 'Warning: For a given random number seed, the sample will
                    always be the same.'
                prompt: Random number seed for first bootstrap
                format: ( "" , " -seed " + str(value) )[ value is not None ]
                simple: true
                argpos: 1002
                name: bootstrap_seed
                command: false
                type: !mobyle/integertype {}
            - !mobyle/inputprogramparameter
                prompt: Maximum attempts at replicating inferred tree (max jumble)
                format: ( "" , " -jumble " + str(value) )[ value is not None and value
                    != vdef]
                argpos: 1002
                name: bootstrap_maxjumble
                precond: bootstrap
                command: false
                type: !mobyle/integertype {default: 10}
            - !mobyle/inputprogramparameter
                format: '" %s.tmp" % str(infile)'
                argpos: 1003
                name: in_bootfile
                command: false
                hidden: true
                type: !mobyle/stringtype {}
    - !mobyle/inputprogramparagraph
        prompt: Output and Results Options
        name: output_opt
        children:
        - !mobyle/inputprogramparameter
            prompt: Output File
            format: ( "" , " > " + str(outfile) )[ value is not None ]
            argpos: 1010
            name: outfile
            precond: {'#not': bootstrap}
            command: false
            type: !mobyle/stringtype {}
        - !mobyle/inputprogramparameter
            prompt: Save tree in treefile
            format: ( "treefile | ", "" )[ value ]
            argpos: 2
            name: treefile
            precond: {'#not': bootstrap}
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparameter
            prompt: Print the input alignment at start of run (printdata)
            format: ( "" , "printdata | " )[ value ]
            argpos: 2
            name: printdata
            command: false
            type: !mobyle/booleantype {default: false}
    - !mobyle/inputprogramparagraph
        prompt: Categories and Weights Options
        name: categopt
        children:
        - !mobyle/inputprogramparameter {comment: "The data must have the format specified\
                \ for PHYLIP dnaml 3.3. The first line must be the letter C, followed\
                \ by the number of categories (a number in the range 1 through 35),\
                \ and then a blank-separated list of the rates for each category.\
                \ (The list can take more than one line; the program reads until it\
                \ finds the specified number of rate values.) The next line should\
                \ be the word Categories followed by one rate category character per\
                \ sequence position. The categories 1 - 35 are\n              represented\
                \ by the series 1, 2, 3, ..., 8, 9, A, B, C, ..., Y, Z. These latter\
                \ data can be on one or more lines. For example:C 12 0.0625 0.125\
                \ 0.25 0.5 1 2 4 8 16 32 64 128Categories 5111136343678975AAA8949995566778888889AAAAAA9239898629AAAAA9Category\
                \ 'numbers' are ordered: 1, 2, 3, ..., 9, A, B, ..., Y, Z. Category\
                \ zero (undefined rate) is permitted at sites with a zero in a user-supplied\
                \ weighting mask.", prompt: Rate categories file (user-specified),
            format: '( "" , "categories "+ str(value) + " |" )[ value is not None
                ]', argpos: 2, name: categories, command: false}
        - !mobyle/inputprogramparameter {comment: 'example:Weights 111111111111001100000100011111100000000000000110000110000000In
                case of bootstrap, only positions that have nonzero weights are used
                in computing the bootstrap sample.', prompt: Weights file (user-specified
                column weighting information), format: '( "" , "weights " + str(value)
                + " |" )[ value is not None ]', argpos: 2, name: weights, command: false}
outputs: !mobyle/outputparagraph
    children:
    - !mobyle/outputprogramparagraph
        prompt: Output and Results Options
        name: output_opt
        children:
        - !mobyle/outputprogramparameter
            prompt: Output(s) file
            filenames: '"fastdnaml.out"'
            name: outputfile
            precond:
                '#and':
                - {'#not': bootstrap}
                -   outfile: {'#eq': None}
            output_type: stdout
            type: !mobyle/formattedtype
                data_terms: ['EDAM_data:2048']
        - !mobyle/outputprogramparameter
            prompt: Output(s) file
            filenames: str(outfile)
            name: outputfile_name
            precond:
                '#and':
                - {'#not': bootstrap}
                -   outfile: {'#ne': None}
            type: !mobyle/formattedtype
                data_terms: ['EDAM_data:2048']
    - !mobyle/outputprogramparameter
        prompt: Tree file
        filenames: '"_treefile.[0-9]*"'
        name: treefiles
        precond: {'#not': bootstrap}
        type: !mobyle/formattedtype
            format_terms: ['EDAM_format:1910']
            data_terms: ['EDAM_data:0872']
    - !mobyle/outputprogramparameter
        prompt: Bootstrap output report
        filenames: '"%s.tmp.out" % str(infile)'
        name: bootstrap_report
        precond: bootstrap
        type: !mobyle/formattedtype
            data_terms: ['EDAM_data:2048']
    - !mobyle/outputprogramparameter
        prompt: Bootstrap tree file
        filenames: '"%s.tmp.tree" % str(infile)'
        name: bootstrap_tree
        precond: bootstrap
        type: !mobyle/formattedtype
            format_terms: ['EDAM_format:1910']
            data_terms: ['EDAM_data:0872']
    - !mobyle/outputprogramparameter
        prompt: Bootstrap alignment file
        filenames: '"%s.tmp" % str(infile)'
        name: bootstrap_aln
        precond: bootstrap
        type: !mobyle/formattedtype
            data_terms: ['EDAM_data:0863']
    - !mobyle/outputprogramparameter
        prompt: Standard error
        filenames: '"fastdnaml.err"'
        name: stderr
        type: !mobyle/formattedtype
            data_terms: ['EDAM_data:2048']
references:
- {doi: null, label: 'Olsen, G. J., Matsuda, H., Hagstrom, R., and Overbeek, R. 1994.
        fastDNAml: A tool for construction of phylogenetic trees of DNA sequences
        using maximum likelihood. Comput. Appl. Biosci. 10: 41-48.', url: null}
- {doi: null, label: 'Felsenstein, J. 1981. Evolutionary trees from DNA sequences:
        A maximum likelihood approach. J. Mol. Evol. 17: 368-376.', url: null}
homepage_links: ['http://iubio.bio.indiana.edu/soft/molbio/evolve/fastdnaml/fastDNAml.html']
env: {}
