_type: Program
name: mreps
version: '2.5'
title: mreps
description: Algorithm for finding tandem repeats in DNA sequences
authors: G. Kucherov
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: Query Sequence file
        name: query
        simple: true
        argpos: '20'
        format: {perl: '" -fasta $value"', python: '" -fasta "+str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2977
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Specifies the resolution (-res)
        name: err
        argpos: '10'
        format: {perl: '(defined $value ) ? " -res $value" : ""', python: '( "" ,
                " -res " + str(value) )[ value is not None]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Specifies starting position (-from)
        name: from_v
        argpos: '10'
        format: {perl: '(defined $value) ? " -from $value" : ""', python: '( "" ,
                " -from " + str(value) )[ value is not None ]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Specifies end position (-to)
        name: to
        argpos: '10'
        format: {perl: '(defined $value) ? " -to $value" : ""', python: '( "" , "
                -to " + str(value) )[ value is not None ]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Processes by sliding windows of size 2*n overlaping by n (-win)
        name: win
        argpos: '10'
        format: {perl: '(defined $value) ? " -win $value" : ""', python: '( "" , "
                -win " + str(value) )[ value is not None ]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Report repetitions whose size is at least n (-minsize)
        name: minsize
        argpos: '10'
        format: {perl: '(defined $value) ? " -minsize $value" : ""', python: '( ""
                , " -minsize " + str(value) )[ value is not None ]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Report repetitions whose size is at most n (-maxsize)
        name: maxsize
        argpos: '10'
        format: {perl: '(defined $value) ? " -maxsize $value" : ""', python: '( ""
                , " -maxsize " + str(value) )[ value is not None ]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Report repetitions whose period is at least n (-minperiod)
        name: minperiod
        argpos: '10'
        format: {perl: '(defined $value) ? " -minperiod $value" : ""', python: '(
                "" , " -minperiod " + str(value) )[ value is not None ]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Integer value
        prompt: Report repetitions whose period is at most n (-maxperiod)
        name: maxperiod
        argpos: '10'
        format: {perl: '(defined $value) ? " -maxperiod $value" : ""', python: '(
                "" , " -maxperiod " + str(value) )[ value is not None ]'}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        comment: Float value greater tha 1.0
        prompt: Report repetitions whose exponent is at least n (-exp)
        name: exp
        argpos: '10'
        format: {perl: '(defined $value) ? " -exp $value" : ""', python: '( "" , "
                -exp " + str(value) )[ value is not None ]'}
        type: {_type: FloatType}
    -   _type: InputProgramParameter
        prompt: Output small repeats that can occur randomly (-allowsmall)
        name: allowsmall
        argpos: '10'
        format: {perl: '( $value) ? " -allowsmall" : ""', python: '( "" , " -allowsmall"
                )[ value ]'}
        type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        prompt: Do not output repetitions sequences (-noprint)
        name: noprint
        argpos: '10'
        format: {perl: '( $value) ? " -noprint" : ""', python: '( "" , " -noprint"
                )[ value ]'}
        type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        prompt: XML format output file name (-xmloutput)
        name: xml
        argpos: '10'
        format: {perl: '(defined $value) ? " -xmloutput $value" : ""', python: '(
                "" , " -xmloutput " + str(value) )[ value is not None ]'}
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: XML output file
        name: xmlout
        filenames: {perl: $xml, python: str(xml)}
        precond:
            xml: {'#ne': None}
operations: ['EDAM_operation:0237']
topics: ['EDAM_topic:0157']
references:
- {doi: null, label: 'R. Kolpakov, G. Kucherov, Finding maximal repetitions in a word
        in linear time, 1999 Symposium on Foundations of Computer Science (FOCS),
        New-York (USA), pp. 596-604, IEEE Computer Society', url: null}
- {doi: null, label: 'R. Kolpakov, G. Kucherov, Finding Approximate Repetitions under
        Hamming Distance, 9-th European Symposium on Algorithms (ESA), Aarhus (Denmark),
        Lecture Notes in Computer Science, vol. 2161, pp 170-181.', url: null}
documentation_links: ['http://bioinfo.lifl.fr/mreps/']
homepage_links: ['http://bioinfo.lifl.fr/mreps/']
public_name: mreps
command: {path: null, value: mreps}
source_links: ['http://bioinfo.lifl.fr/mreps/']
