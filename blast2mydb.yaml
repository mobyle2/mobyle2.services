_type: Program
name: blast2mydb
title: BLAST2MYDB
description: NCBI BLAST, with gaps against my sequences database
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Create my Database
        name: db
        children:
        -   _type: InputProgramParameter
            name: formatdb
            argpos: '1'
            format: {perl: '"formatdb "', python: '"formatdb "'}
            hidden: true
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: Create a protein database for blastx
            prompt: Protein db
            name: protein_db
            simple: true
            argpos: '2'
            format: {perl: '" -i $value"', python: '" -i "+ str(value)'}
            precond:
                blast2:
                    '#in': [blastx, blastp]
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:2044
        -   _type: InputProgramParameter
            comment: Create a nucleotid database for blastn, tblastn or tblastx
            prompt: Nucleotid db
            name: nucleotid_db
            simple: true
            argpos: '2'
            format: {perl: '"-p F -i $value"', python: '"-p F -i "+ str(value)'}
            precond:
                blast2:
                    '#in': [blastn, tblastx, tblastn, psitblastn]
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:2044
        -   _type: InputProgramParameter
            prompt: the name of my db
            name: db_name
            simple: true
            argpos: '3'
            format: {python: '" -n " + str( value )'}
            mandatory: true
            type: {_type: StringType, default: myDatabase}
    -   _type: InputProgramParameter
        prompt: Blast initiation
        name: blast_init
        argpos: '4'
        format: {perl: '" && blastall "', python: '" && blastall "'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: '- Blastp compares an amino acid query sequence against a protein
            sequence database;- Blastn compares a nucleotide query sequence against
            a nucleotide sequence database;- Blastx compares the six-frame conceptual
            translation products of a nucleotide query sequence (both strands) against
            a protein sequence database;- tBlastn compares a protein query sequence
            against a nucleotide sequence database dynamically translated in all six
            reading frames (both strands).- tBlastx compares the six-frame translations
            of a nucleotide query sequence against the six-frame translations of a
            nucleotide sequence database.- psitBlastn compares a protein query sequence
            against a nucleotide sequence database dynamically translated in all six
            reading frames (both strands) using a position specific matrix created
            by PSI-BLAST.'
        prompt: Blast program (-p)
        name: blast2
        simple: true
        argpos: '5'
        format: {perl: '" -p $value"', python: '" -p "+ str(value)'}
        mandatory: true
        type:
            _type: StringType
            default: 'null'
            options:
            - {label: Choose a program, value: 'null'}
            - {label: Blastn (nucleotide query / nucleotide db), value: blastn}
            - {label: Blastx (translated nucleotide query / protein db), value: blastx}
            - {label: tBlastx (translated nucleotide query / translated nucleotide
                    db), value: tblastx}
            - {label: Blastp (protein query / protein db), value: blastp}
            - {label: tBlastn (protein query / translated nucleotide db), value: tblastn}
            - {label: psitBlastn (protein query / translated nucleotide db), value: psitblastn}
    -   _type: InputProgramParameter
        name: blastdb
        argpos: '6'
        format: {perl: '" -d $db_name"', python: '" -d "+ str( db_name )'}
        hidden: true
        type: {_type: StringType}
    -   _type: InputParagraph
        prompt: Query Sequence
        name: query
        children:
        -   _type: InputProgramParameter
            comment: Read (first, query) sequence or set from file
            prompt: Query (-i)
            name: query_seq
            simple: true
            format: {perl: '" -i $query"', python: '" -i "+ str(query_seq)'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:2044
        -   _type: InputProgramParameter
            comment: Location on query sequence
            prompt: Start of required region in query sequence (-L)
            name: start_region
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: Location on query sequence
            prompt: End of required region in query sequence (-L)
            name: end_region
            format: {perl: '(defined $value) ? " -L \"$start_region $value\"" : "
                    -L \"$start_region\""', python: '('' -L "%s"'' % (str(start_region)),
                    '' -L "%s %s"'' % (str(start_region), str(value)))[value is not
                    None]'}
            precond:
                start_region: {'#ne': None}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Number of concatenated queries (blastn or tblastn) (-B)
            name: concat
            format: {perl: '(defined $value) ? " -B $value" : ""', python: '("" ,
                    " -B "+str(value))[value is not None]'}
            precond:
                blast2:
                    '#in': [blastn, tblastn]
            type: {_type: IntegerType}
    -   _type: InputParagraph
        prompt: Scoring options
        name: scoring_opt
        children:
        -   _type: InputProgramParameter
            comment: 'Default: 5 for blastn; 10 for blastp, blastx and tblastn'
            prompt: Cost to open a gap (-G)
            name: open_a_gap
            format: {perl: '(defined $value) ? " -G $value" : ""', python: '("" ,
                    " -G "+str(value))[value is not None]'}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: 'Default: 2 for blastn; 1 for blastp, blastx and tblastnLimited
                values for gap existence and extension are supported for these programs.
                Some supported and suggested values are:Existence Extension10 -- 110
                -- 211 -- 18 -- 29 -- 2'
            prompt: Cost to extend a gap (-E)
            name: extend_a_gap
            format: {perl: '(defined $value) ? " -E $value" : ""', python: '("" ,
                    " -E "+str(value))[value is not None]'}
            type: {_type: FloatType}
        -   _type: InputParagraph
            prompt: Protein penalty (not for blastn)
            name: scoring_blast
            precond:
                blast2: {'#ne': blastn}
            children:
            -   _type: InputProgramParameter
                prompt: Similarity matrix (-M)
                name: matrix
                format: {perl: '(defined $value and $value ne $vdef) ? " -M $value"
                        : ""', python: '("" , " -M "+str(value))[value is not None
                        and value != vdef]'}
                type:
                    _type: StringType
                    default: BLOSUM62
                    options:
                    - {label: BLOSUM62, value: BLOSUM62}
                    - {label: BLOSUM45, value: BLOSUM45}
                    - {label: BLOSUM80, value: BLOSUM80}
                    - {label: PAM30, value: PAM30}
                    - {label: PAM70, value: PAM70}
        -   _type: InputParagraph
            prompt: Blastn penalty
            name: scoring_blastn
            precond: {blast2: blastn}
            children:
            -   _type: InputProgramParameter
                prompt: Penalty for a nucleotide mismatch (-q)
                name: mismatch
                format: {perl: '(defined $value and $value != $vdef) ? " -q $value"
                        : ""', python: '("" , " -q "+str(value))[value is not None
                        and value != vdef]'}
                type: {_type: FloatType, default: -3.0}
            -   _type: InputProgramParameter
                prompt: Reward for a nucleotide match (-r)
                name: match
                format: {perl: '(defined $value and $value != $vdef) ? " -r $value"
                        : ""', python: '("" , " -r "+str(value))[value is not None
                        and value != vdef]'}
                type: {_type: FloatType, default: 1.0}
        -   _type: InputProgramParameter
            prompt: Frame shift penalty (-w)
            name: frameshift
            format: {perl: '(defined $value) ? " -w $value" : ""', python: '("", "
                    -w "+str(value))[value is not None]'}
            type: {_type: FloatType}
    -   _type: InputParagraph
        comment: BLAST 2.0 uses the dust low-complexity filter for blastn and seg
            for the other programs.If one uses '-F T' then normal filtering by seg
            or dust (for blastn) occurs (likewise '-F F' means no filtering whatsoever).
        prompt: Filtering and masking options
        name: filter_opt
        children:
        -   _type: InputProgramParameter
            prompt: Filter or Masking query sequence (DUST with blastn, SEG with others)
                (-F)
            name: filter
            format: {perl: '($value) ? "" : " -F F"', python: '(" -F F" , "")[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: A coiled-coiled filter, based on the work of Lupas et al. (Science,
                vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al.,
                J Gen Virol, vol. 76, pp. 2923-32 (1995))
            prompt: Filtering options (Filter must be true)
            name: other_filters
            precond:
                '#and':
                - filter
                - {'#not': other_masking}
            type: {_type: StringType, default: 'null'}
        -   _type: InputProgramParameter
            comment: 'A coiled-coiled filter, based on the work of Lupas et al. (Science,
                vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al.,
                J Gen Virol, vol. 76, pp. 2923-32 (1995)).It is possible to specify
                that the masking should only be done during the process of building
                the initial words .If the -U option (to mask any lower-case sequence
                in the input FASTA file) is used and one does not wish any other filtering,
                but does wish to mask when building the lookup tables then one should
                specify: -F ''m'''
            prompt: Masking options (Filter must be true)
            name: other_masking
            precond:
                '#and':
                - filter
                - {'#not': other_filters}
            type: {_type: StringType, default: 'null'}
        -   _type: InputProgramParameter
            comment: This option specifies that any lower-case letters in the input
                FASTA file should be masked.
            prompt: Use lower case filtering (-U)
            name: lower_case
            format: {perl: '($value) ? " -U T" : ""', python: '("", " -U T")[ bool(value)
                    ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        comment: The programs blastn and blastp offer fully gapped alignments. blastx
            and tblastn have 'in-frame' gapped alignments and use sum statistics to
            link alignments from different frames. tblastx provides only ungapped
            alignments.
        prompt: Selectivity options
        name: selectivity_opt
        children:
        -   _type: InputProgramParameter
            comment: "The statistical significance threshold for reporting matches\
                \ against database sequences; the default value is 10, such that 10\
                \ matches are expected to be found merely by chance, according to\
                \ the stochastic model of Karlin and Altschul (1990). If the statistical\
                \ significance ascribed to a match is greater than the EXPECT threshold,\
                \ the match will not be reported. Lower EXPECT thresholds are more\
                \ stringent, leading to fewer chance matches being reported. Fractional\
                \ values are\n              acceptable."
            prompt: Expected value (-e)
            name: Expect
            simple: true
            format: {perl: '(defined $value and $value != $vdef) ? " -e $value" :
                    ""', python: '("" , " -e "+str(value))[value is not None and value
                    != vdef]'}
            type: {_type: FloatType, default: 10.0}
        -   _type: InputProgramParameter
            comment: Use words of size N.Zero invokes default behaviorDefault values:-
                11 for blastn- 3 for others
            prompt: Word Size (-W)
            name: word_size
            format: {perl: '(defined $value) ? " -W $value" : ""', python: '("" ,
                    " -W "+str(value))[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: 'Default: zero for all programs'
            prompt: Multiple Hits window size (-A)
            name: dist_hits
            format: {perl: '(defined $value) ? " -A $value" : ""', python: '("" ,
                    " -A "+str(value))[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: Blast seeks first short word pairs whose aligned score reaches
                at least this value.Default values:- 0 for blastn- 11 for blastp-
                12 for blastx- 13 for tblastn and tblastx
            prompt: Threshold for extending hits (-f)
            name: extend_hit
            format: {perl: '(defined $value) ? " -f $value" : ""', python: '("" ,
                    " -f "+str(value))[value is not None]'}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: This is the value that control the path graph region explored
                by Blast during a gapped extension (Xg in the NAR paper) (default
                for blastp is 15).Default values:- 30 for blastn- 0 for tblastx- 15
                for others
            prompt: X dropoff value for gapped alignment (-X)
            name: dropoff_extent
            format: {perl: '(defined $value) ? " -X $value" : ""', python: '("" ,
                    " -X "+str(value))[value is not None]'}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: Default values:- 50 for blastn- 0 for tblastx- 25 for others
            prompt: X dropoff value for final alignment gapped alignment (-Z)
            name: dropoff_final
            format: {perl: '(defined $value) ? " -Z $value" : ""', python: '("" ,
                    " -Z "+str(value))[value is not None]'}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: Use zero for the real size
            prompt: Effective length of the search space (-Y)
            name: eff_len
            format: {perl: '(defined $value) ? " -Y $value" : ""', python: '("" ,
                    " -Y "+str(value))[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: If this option is used, a value of 100 is recommended.
            prompt: Number of best hits from a region to keep (-K)
            name: keep_hits
            format: {perl: '(defined $value) ? " -K $value" : ""', python: '("" ,
                    " -K "+str(value))[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Perform or not gapped alignment (not available with tblastx) (-g)
            name: gapped_alig
            format: {perl: '($value) ? "" : " -g F "', python: '(" -g F " , "")[value]'}
            precond:
                blast2: {'#ne': tblastx}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Single-hit or multiple-hit mode (-P)
            name: mode
            format: {perl: '($value ne "0") ? " -P $value" : ""', python: '("" , "
                    -P "+str(value))[value != "0"]'}
            precond:
                blast2: {'#ne': blastn}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Multiple-hit (0), value: '0'}
                - {label: Single-hit (1), value: '1'}
    -   _type: InputParagraph
        prompt: Translation options
        name: translation_opt
        children:
        -   _type: InputProgramParameter
            prompt: Genetic code used for query translation (-Q)
            name: gc_query
            format: {perl: '(defined $value and $value ne $vdef) ? " -Q $value" :
                    ""', python: '("" , " -Q "+str(value))[value is not None and value
                    != vdef]'}
            precond:
                blast2:
                    '#in': [blastx, tblastx]
            type:
                _type: StringType
                default: '1'
                options:
                - {label: Standard (1), value: '1'}
                - {label: Vertebrate Mitochondrial (2), value: '2'}
                - {label: Yeast Mitochondrial (3), value: '3'}
                - {label: 'Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma
                        (4)', value: '4'}
                - {label: Invertebrate Mitochondrial (5), value: '5'}
                - {label: Ciliate Macronuclear and Dasycladacean (6), value: '6'}
                - {label: Echinoderm Mitochondrial (9), value: '9'}
                - {label: Euplotid Nuclear (10), value: '10'}
                - {label: Bacterial (11), value: '11'}
                - {label: Alternative Yeast Nuclear (12), value: '12'}
                - {label: Ascidian Mitochondrial (13), value: '13'}
                - {label: Flatworm Mitochondrial (14), value: '14'}
                - {label: Blepharisma Macronuclear (15), value: '15'}
        -   _type: InputProgramParameter
            prompt: Genetic code used for database translation (-D)
            name: gc_db
            format: {perl: '($value ne $vdef) ? " -D $value" : ""', python: '("" ,
                    " -D "+str(value))[value != vdef]'}
            precond:
                blast2:
                    '#in': [tblastn, tblastx]
            type:
                _type: StringType
                default: '1'
                options:
                - {label: Standard (1), value: '1'}
                - {label: Vertebrate Mitochondrial (2), value: '2'}
                - {label: Yeast Mitochondrial (3), value: '3'}
                - {label: 'Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma
                        (4)', value: '4'}
                - {label: Invertebrate Mitochondrial (5), value: '5'}
                - {label: Ciliate Macronuclear and Dasycladacean (6), value: '6'}
                - {label: Echinoderm Mitochondrial (9), value: '9'}
                - {label: Euplotid Nuclear (10), value: '10'}
                - {label: Bacterial (11), value: '11'}
                - {label: Alternative Yeast Nuclear (12), value: '12'}
                - {label: Ascidian Mitochondrial (13), value: '13'}
                - {label: Flatworm Mitochondrial (14), value: '14'}
                - {label: Blepharisma Macronuclear (15), value: '15'}
        -   _type: InputProgramParameter
            prompt: Query strands to search against database (-S)
            name: strand
            format: {perl: '(defined $value and $value ne $vdef) ? " -S $value" :
                    ""', python: '("" , " -S "+str(value))[value is not None and value
                    != vdef]'}
            precond:
                blast2:
                    '#in': [blastn, blastx, tblastx]
            type:
                _type: StringType
                default: '3'
                options:
                - {label: Top (1), value: '1'}
                - {label: Bottom (2), value: '2'}
                - {label: Both (3), value: '3'}
    -   _type: InputParagraph
        prompt: Report options
        name: affichage
        children:
        -   _type: InputProgramParameter
            comment: Maximum number of database sequences for which one-line descriptions
                will be reported.
            prompt: Number of one-line descriptions to show (-v)
            name: Descriptions
            format: {perl: '(defined $value and $value != $vdef) ? " -v $value" :
                    ""', python: '("" , " -v "+str(value))[value is not None and value
                    != vdef]'}
            type: {_type: IntegerType, default: 500}
        -   _type: InputProgramParameter
            comment: Maximum number of database sequences for which high-scoring segment
                pairs will be reported (-b).
            prompt: Number of database sequences to show alignments (-b)
            name: Alignments
            format: {perl: '(defined $value and $value != $vdef) ? " -b $value" :
                    ""', python: '("" , " -b "+str(value))[value is not None and value
                    != vdef]'}
            type: {_type: IntegerType, default: 250}
        -   _type: InputProgramParameter
            prompt: Alignment view options (-m)
            name: view_alignments
            format: {perl: '(defined $value and $value ne $vdef) ? " -m $value" :
                    ""', python: '("" , " -m "+str(value))[value is not None and value
                    != vdef]'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Pairwise (0), value: '0'}
                - {label: Query-anchored showing identities (1), value: '1'}
                - {label: Query-anchored no identities (2), value: '2'}
                - {label: 'Flat query-anchored, show identities (3)', value: '3'}
                - {label: 'Flat query-anchored, no identities (5)', value: '4'}
                - {label: Query-anchored no identities and blunt ends (5), value: '5'}
                - {label: 'Flat query-anchored, no identities and blunt ends (6)',
                    value: '6'}
                - {label: XML Blast output (7), value: '7'}
                - {label: Tabular output (8), value: '8'}
        -   _type: InputProgramParameter
            prompt: Text output file
            name: txtoutput
            argpos: '50'
            format: {perl: '" -o blast2.txt"', python: '" -o blast2.txt"'}
            precond:
                view_alignments: {'#ne': '7'}
            hidden: true
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Xml output file
            name: xmloutput
            argpos: '60'
            format: {perl: '" -o blast2.xml"', python: '" -o blast2.xml"'}
            precond: {view_alignments: '7'}
            hidden: true
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Html output
            name: htmloutput
            argpos: '61'
            format: {perl: '($value) ? " && html4blast -g -o blast2.html blast2.txt"
                    : ""', python: '("" , " && html4blast -g -o blast2.html blast2.txt")[value]'}
            precond:
                view_alignments:
                    '#nin': ['7', '8']
            type: {_type: BooleanType, default: false}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Blast text report
        name: txtfile
        filenames: {perl: '"blast2.txt"', python: '"blast2.txt"'}
        precond:
            view_alignments: {'#ne': '7'}
        type: {_type: FormattedType, data_terms: 'EDAM_data:0857'}
    -   _type: OutputProgramParameter
        prompt: Blast xml report
        name: xmlfile
        filenames: {perl: '"blast2.xml"', python: '"blast2.xml"'}
        precond: {view_alignments: '7'}
    -   _type: OutputProgramParameter
        prompt: Blast html report
        name: htmlfile
        filenames: {perl: '"blast2.html"', python: '"blast2.html"'}
        precond:
            view_alignments:
                '#nin': ['7', '8']
    -   _type: OutputProgramParameter
        name: imgfile
        filenames: {perl: '"*.gif"', python: '"*.gif"'}
        precond:
            view_alignments:
                '#nin': ['7', '8']
        hidden: true
operations: ['EDAM_operation:0352', 'EDAM_operation:0227']
topics: ['EDAM_topic:0182', 'EDAM_topic:0220']
references:
- {doi: null, label: 'Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui
        Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST
        and PSI-BLAST: a new generation of protein database search programs, Nucleic
        Acids Res. 25:3389-3402.', url: null}
documentation_links: ['http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16',
    'http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html']
public_name: blast2mydb
command: {path: null, value: null}
