_type: Program
name: mview_blast
version: '1.49'
title: MVIEW
description: Blast report pretty viewer
authors: N. P. Brown
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: Blast text Report
        name: blast
        simple: true
        format: {perl: '" -in blast $value"', python: '" -in blast "+str(value)'}
        mandatory: true
        type: {_type: FormattedType, data_terms: 'EDAM_data:0857'}
    -   _type: InputProgramParameter
        prompt: Output format (-out)
        name: out
        simple: true
        argpos: '1'
        format: {perl: '(defined $value and $value ne $vdef) ? "-out $value" : ""',
            python: '( "", " -out " + str(value) )[ value is not None and value !=
                vdef]'}
        type:
            _type: StringType
            default: html
            options:
            - {label: HTML, value: html}
            - {label: GCG/MSF, value: msf}
            - {label: Pearson/FASTA, value: pearson}
            - {label: PIR, value: pir}
            - {label: RDB table for storage/manipulation in relational database form,
                value: rdb}
    -   _type: InputParagraph
        prompt: Main formatting options
        name: main_formatting_options
        children:
        -   _type: InputProgramParameter
            prompt: Attach a ruler (-ruler)
            name: ruler
            format: {perl: '($value) ? " -ruler on" : ""', python: '( "" , " -ruler
                    on" )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Show alignment (-alignment)
            name: alignment
            format: {perl: '($value) ? "" : " -alignment off"', python: '( " -alignment
                    off" , "" )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Show consensus (-consensus)
            name: consensus
            simple: true
            format: {perl: '($value) ? " -consensus on" : ""', python: '( "" , " -consensus
                    on" )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Use DNA/RNA colormaps and/or consensus groups (-dna)
            name: dna
            format: {perl: '($value) ? " -dna" : ""', python: '( "" , " -dna" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Alignment options
        name: alignment_options
        children:
        -   _type: InputProgramParameter
            comment: <html:div xmlns:html="http://www.w3.org/1999/xhtml"><html:ul><html:li><html:em>Colour
                all the residues</html:em>, will colour every residue according to
                the currently selected palette.</html:li><html:li><html:em>Colouring
                by identity to the first sequence</html:em>, will colour only those
                residues that are identical to some reference sequence (usually the
                query or first row).</html:li><html:li><html:em>Colour only when above
                a given percent similarity</html:em>, will colour only those residues
                that belong to a specified physicochemical class that is conserved
                in at least a specified percentage of all rows for a given column.
                This defaults to 70% and and may be set to another threshold, eg.,
                -coloring consensus -threshold 80 would specify 80%. Note that the
                physicochemical classes in question can be confined to individual
                residues.</html:li><html:li><html:em>Colours residues by the colour
                of the class to which they belong</html:em>, is like -coloring consensus,
                but colours residues by the colour of the class to which they belong.</html:li></html:ul><html:p>By
                default, the consensus computation counts gap characters, so that
                sections of the alignment may be uncolored where the presence of gaps
                prevents the non-gap count from reaching the threshold. Setting -con_gaps
                off prevents this, allowing sequence-only based consensus thresholding.</html:p></html:div>
            prompt: Colour scheme (-coloring)
            name: coloring
            simple: true
            argpos: '3'
            format: {perl: '($value and $value ne $vdef) ? " -coloring $value" : ""',
                python: '( "" , " -coloring " + str(value) )[ value !=vdef ]'}
            type:
                _type: StringType
                default: none
                options:
                - {label: No colouring, value: none}
                - {label: Colour all the residues, value: any}
                - {label: Colouring by identity to the first sequence, value: identity}
                - {label: Colour only when above a given percent similarity, value: consensus}
                - {label: Colours residues by the colour of the class to which they
                        belong, value: group}
        -   _type: InputProgramParameter
            prompt: Threshold percentage for consensus coloring (-threshold)
            name: threshold
            argpos: '3'
            format: {perl: '(defined $value and $value != $vdef) ? " -threshold $value"
                    : ""', python: '( "" , " -threshold " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: FloatType, default: 70.0}
        -   _type: InputProgramParameter
            comment: 'Tip: If you want to see only the conserved residues above the
                threshold (ie., only one type of conserved residue per column), add
                the option -ignore class.'
            prompt: Ignore singleton or class group (-ignore)
            name: ignore
            argpos: '3'
            format: {perl: '(defined $value and $value ne $vdef) ? " -ignore $value"
                    : ""', python: '( "" , " -ignore " + str(value) )[ value is not
                    None and value != vdef]'}
            type:
                _type: StringType
                default: none
                options:
                - {label: Class, value: class}
                - {label: None, value: none}
                - {label: Singleton, value: singleton}
    -   _type: InputParagraph
        prompt: Consensus options
        name: consensus_options
        precond: consensus
        children:
        -   _type: InputProgramParameter
            comment: <html:div xmlns:html="http://www.w3.org/1999/xhtml"><html:p>Colouring
                of an alignment by consensus determines which residues to colour and
                the colours to use based on</html:p><html:ol><html:li>the consensus
                threshold chosen for the colouring operation,</html:li><html:li>a
                consideration of the common physicochemical properties of the residues
                in that column,</html:li><html:li>the chosen colour scheme.</html:li></html:ol></html:div>
            prompt: Basic style of coloring (-con_coloring)
            name: con_coloring
            simple: true
            argpos: '3'
            format: {perl: '(defined $value) ? " -con_coloring $value" : ""', python: '(
                    "" , " -con_coloring " + str(value) )[ value is not None ]'}
            type:
                _type: StringType
                default: none
                options:
                - {label: Colour all the residues (any), value: any}
                - {label: Colouring by identity to the first sequence (identity),
                    value: identity}
                - {label: No colouring (none), value: none}
        -   _type: InputProgramParameter
            prompt: Consensus line thresholds (in range 50..100) (separated by commas)
                (-con_threshold)
            name: con_threshold
            argpos: '3'
            format: {perl: '(defined $value and $value ne $vdef) ? " -con_threshold
                    $value" : ""', python: '( "" , " -con_threshold " + str(value)
                    )[ value is not None and value != vdef]'}
            type: {_type: StringType, default: '100,90,80,70'}
        -   _type: InputProgramParameter
            prompt: Ignore singleton or class group (-con_ignore)
            name: con_ignore
            argpos: '3'
            format: {perl: '(defined $value and $value ne $vdef) ? " -con_ignore $value"
                    : ""', python: '( "" , " -con_ignore " + str(value) )[ value is
                    not None and value != vdef]'}
            type:
                _type: StringType
                default: none
                options:
                - {label: Class, value: class}
                - {label: None, value: none}
                - {label: Singleton, value: singleton}
    -   _type: InputParagraph
        prompt: Hybrid alignment and consensus options
        name: hybrid_alignment_consensus_options
        children:
        -   _type: InputProgramParameter
            prompt: Count gaps during consensus computations (-con_gaps)
            name: con_gaps
            argpos: '3'
            format: {perl: '($value) ? "" : " -con_gaps off"', python: '( " -con_gaps
                    off" , "" )[ value ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: General row/column filters
        name: general_row_column_filters
        children:
        -   _type: InputProgramParameter
            prompt: Report top N hits (-top)
            name: top
            format: {perl: '(defined $value) ? " -top $value" : ""', python: '( ""
                    , " -top " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: You must enter a string composed of two numbers separated by
                comma
            prompt: Display column range M:N (-range)
            name: range
            format: {perl: '(defined $value and $value =~ s/,/:/g) ? " -range $value"
                    : ""', python: '( "" , " -range " + str(value).replace('','','':'')
                    )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Only report sequences with percent identity <= N (-maxident)
            name: maxident
            format: {perl: '(defined $value and $value != $vdef) ? " -maxident $value"
                    : ""', python: '( "" , " -maxident " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: IntegerType, default: 100}
        -   _type: InputProgramParameter
            prompt: Use row N or row identifier as percent identity reference (-ref)
            name: ref
            format: {perl: '(defined $value) ? " -ref $value" : ""', python: '( ""
                    , " -ref " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: You must enter a string composed of two numbers separated by
                comma
            prompt: Keep only the rows from start to end (separated by comma) (-keep)
            name: keep_only
            format: {perl: '(defined $value ) ? " -keep $value" : ""', python: '(
                    ""  , " -keep " + str(value) )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: You must enter a string composed of two numbers separated by
                comma
            prompt: Discard rows from start to end (separated by comma) (-disc)
            name: disc
            format: {perl: '(defined $value and $value =~ s/,/../ ) ? " -disc $value"
                    : ""', python: '( ""  , " -disc " + str(value).replace('','',''..'')
                    )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: You must enter a string composed of two numbers separated by
                comma
            prompt: Display rows unprocessed (separated by comma ) (-nops)
            name: nops
            format: {perl: '(defined $value and $value =~ s/,/../) ? " -nops $value"
                    : ""', python: '( ""  , " -nops " + str(value).replace('','',''..''
                    ))[ value is not None ]'}
            type: {_type: StringType}
    -   _type: InputParagraph
        prompt: General formatting options
        name: general_formatting_options
        children:
        -   _type: InputProgramParameter
            prompt: Paginate in N columns of alignment (-width)
            name: width
            format: {perl: '(defined $value) ? " -width $value" : ""', python: '(
                    "" , " -width " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Use this character as the gap (-gap)
            name: gap
            format: {perl: '(defined $value) ? " -gap $value" : " "', python: '( "
                    " ,  " -gap " + str(value) )[ value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: 'Switch off label: row number (-label0)'
            name: label0
            format: {perl: '($value) ? " -label0" : ""', python: '( "" , " -label0"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: 'Switch off label: identifier (-label1)'
            name: label1
            format: {perl: '($value) ? " -label1" : ""', python: '( "" , " -label1"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: 'Switch off label: description (-label2)'
            name: label2
            format: {perl: '($value) ? " -label2" : ""', python: '( "" , " -label2"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: 'Switch off label: scores (-label3)'
            name: label3
            format: {perl: '($value) ? " -label3" : ""', python: '( "" , " -label3"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: 'Switch off label: percent identity (-label4)'
            name: label4
            format: {perl: '($value) ? " -label4" : ""', python: '( "" , " -label4"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Output multi-pass alignments with columns in register (-register)
            name: register
            format: {perl: '($value) ? "" : " -register off"', python: '( " -register
                    off" , "" )[ value ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: BLAST options
        name: blast_options
        children:
        -   _type: InputProgramParameter
            prompt: HSP tiling method (-hsp)
            name: hsp
            format: {perl: '($value ne  $vdef) ?  " -hsp $value":""', python: '("","
                    -hsp " + str(value))[value !=vdef]'}
            type:
                _type: StringType
                default: ranked
                options:
                - {label: All, value: all}
                - {label: Discrete, value: discrete}
                - {label: Ranked, value: ranked}
        -   _type: InputProgramParameter
            prompt: Report only these query strand orientations (-strand)
            name: strand
            format: {perl: '($value ne $vdef) ? " -strand $value":""', python: '("",
                    " -strand " +str(value))[value !=vdef]'}
            type:
                _type: StringType
                default: all
                options:
                - {label: Plus (p), value: p}
                - {label: Minus (m), value: m}
                - {label: Both, value: all}
        -   _type: InputParagraph
            prompt: BLAST series 1 options
            name: blast1_options
            children:
            -   _type: InputProgramParameter
                prompt: Ignore hits with p-value more than N (-maxpval)
                name: maxpval
                format: {perl: '(defined $value) ? " -maxpval $value":""', python: '("",
                        " -maxpval "+str(value))[value is not None]'}
                type: {_type: FloatType}
            -   _type: InputProgramParameter
                prompt: Ignore hits with score less than N (-minscore)
                name: minscore
                format: {perl: '(defined $value) ? " -minscore $value":""', python: '("",
                        " -minscore "+str(value))[value is not None]'}
                type: {_type: FloatType}
        -   _type: InputParagraph
            prompt: BLAST series 2 options
            name: blast2_options
            children:
            -   _type: InputProgramParameter
                prompt: Ignore hits with p-value more than N -- Blast2 only (-maxeval)
                name: maxeval
                format: {perl: '(defined $value) ? " -maxeval $value":""', python: '("",
                        " -maxeval "+str(value))[value is not None]'}
                type: {_type: FloatType}
            -   _type: InputProgramParameter
                prompt: Ignore hits with bits less than N (-minbits)
                name: minbits
                format: {perl: '(defined $value) ? " -minbits $value":""', python: '("",
                        " -minbits "+str(value))[value is not None]'}
                type: {_type: IntegerType}
            -   _type: InputParagraph
                prompt: PSI-BLAST options
                name: psi_options
                children:
                -   _type: InputProgramParameter
                    prompt: Process the Nth cycle of a multipass search (-cycle)
                    name: cycle
                    format: {perl: '(defined $value) ? " -cycle $value" : ""', python: '("",
                            " -cycle "+str(value))[value is not None]'}
                    type: {_type: StringType}
    -   _type: InputParagraph
        prompt: HTML markup options
        name: html_markup_options
        precond: {out: html}
        children:
        -   _type: InputProgramParameter
            prompt: Amount of HTML markup (-html)
            name: html_output
            format: {perl: '(defined $value]) ? "-html $value":""', python: '("",
                    " -html " + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: StringType
                default: full
                options:
                - {label: Full, value: full}
                - {label: Head, value: head}
                - {label: Body, value: body}
                - {label: Data, value: data}
                - {label: CSS, value: css}
                - {label: 'OFF', value: 'off'}
        -   _type: InputProgramParameter
            prompt: Page title string
            name: Title
            format: {perl: '(defined $value) ? " -title $value" : ""', python: '(
                    "" , " -title " + str(value) )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Page background color (-pagecolor)
            name: pagecolor
            format: {perl: '(defined $value and $value ne $vdef) ? " -pagecolor $value"
                    : ""', python: '( "" , " -pagecolor " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: StringType, default: white}
        -   _type: InputProgramParameter
            prompt: Page text color (-textcolor)
            name: textcolor
            format: {perl: '(defined $value and $value ne $vdef) ? " -textcolor $value"
                    : ""', python: '( "" , " -textcolor " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: StringType, default: black}
        -   _type: InputProgramParameter
            prompt: Link color (-linkcolor)
            name: linkcolor
            argpos: '3'
            format: {perl: '(defined $value and $value ne $vdef) ? " -linkcolor $value"
                    : ""', python: '( "" , " -linkcolor " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: StringType, default: blue}
        -   _type: InputProgramParameter
            prompt: Active link color (-alinkcolor)
            name: alinkcolor
            format: {perl: '(defined $value and $value ne $vdef) ? " -alinkcolor $value"
                    : ""', python: '( "" , " -alinkcolor " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: StringType, default: red}
        -   _type: InputProgramParameter
            prompt: Visited link color (-vlinkcolor)
            name: vlinkcolor
            format: {perl: '(defined $value and $value ne $vdef) ? " -vlinkcolor $value"
                    : ""', python: '( "" , " -vlinkcolor " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: StringType, default: purple}
        -   _type: InputProgramParameter
            prompt: Alignment background color (-alncolor)
            name: alncolor
            format: {perl: '(defined $value and $value ne $vdef) ? " -alncolor $value"
                    : ""', python: '( "" , " -alncolor " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: StringType, default: white}
        -   _type: InputProgramParameter
            prompt: Alignment label color (-labcolor)
            name: labcolor
            format: {perl: '(defined $value and $value ne $vdef) ? " -labcolor $value"
                    : ""', python: '( "" , " -labcolor " + str(value) )[ value is
                    not None and value != vdef]'}
            type: {_type: StringType, default: black}
        -   _type: InputProgramParameter
            prompt: Alignment default text color (-symcolor)
            name: symcolor
            format: {perl: '(defined $value) ? " -symcolor $value" : " "', python: '(
                    " " , " -symcolor " + str(value) )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Alignment gap color (-gapcolor)
            name: gapcolor
            format: {perl: '(defined $value) ? " -gapcolor $value" : ""', python: '(
                    "" , " -gapcolor " + str(value) )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Use bold emphasis for coloured residues (-bold)
            name: bold
            format: {perl: '($value) ? " -bold" : ""', python: '( "" , " -bold" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Use Cascading Style Sheets (-css)
            name: css
            format: {perl: '(defined $value and $value eq $vdef) ? " -css on" : ""',
                python: '( "" , " -css on" )[ value is not None and value != vdef]'}
            type:
                _type: StringType
                default: 'off'
                options:
                - {label: 'OFF', value: 'off'}
                - {label: 'ON', value: 'on'}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Alignment output file
        name: alig_file
        filenames: {perl: '"mview.out"', python: '"mview.out"'}
        precond:
            out:
                '#in': [msf, pearson, pir]
        output_type: stdout
        type: {_type: FormattedType, data_terms: 'EDAM_data:0863'}
    -   _type: OutputProgramParameter
        prompt: Alignment output file
        name: html_file
        filenames: {perl: '"mview_blast.html"', python: '"mview_blast.html"'}
        precond: {out: html}
        output_type: stdout
    -   _type: OutputProgramParameter
        prompt: Alignment output in RDB format
        name: rdb_file
        filenames: {perl: '"mview.out"', python: '"mview.out"'}
        precond: {out: rdb}
        output_type: stdout
operations: ['EDAM_operation:0562', 'EDAM_operation:0565']
topics: ['EDAM_topic:0220', 'EDAM_topic:0092']
references:
- {doi: null, label: 'Brown, N.P., Leroy C., Sander C. (1998). MView: A Web compatible
        database search or multiple alignment viewer. Bioinformatics. 14(4):380-381.',
    url: null}
documentation_links: ['http://bioweb2.pasteur.fr/docs/mview/index.html']
homepage_links: ['http://bio-mview.sourceforge.net/']
public_name: mview_blast
command: {path: null, value: mview}
