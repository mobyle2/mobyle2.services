_type: Program
name: msbar
title: msbar
description: Mutate a sequence
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
        -   _type: InputProgramParameter
            comment: If you require that the resulting mutated sequence should not
                match a set of other sequences, then you can specify that set  of
                sequences here. For example, if you require that the mutated  sequence
                should not be the same as the input sequence, enter the  input sequence
                here. If you want the result to be different to  previous results
                of this program, specify the previous result  sequences here. The
                program will check that the result does not  match the sequences specified
                here before writing it out. If a  match is found, then the mutation
                is started again with a fresh  copy of the input sequence. If, after
                10 such retries, there is  still a match to the set of sequence given
                here, then the matching  mutated sequence is written with a warning
                message.
            prompt: Other sequences that the mutated result should not match
            name: e_othersequence
            argpos: '2'
            format: {python: '("", " -othersequence=" + str(value))[value is not None
                    ]'}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            prompt: Number of times to perform the mutation operations (value greater
                than or equal to 0)
            name: e_count
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            simple: true
            argpos: '3'
            format: {python: '("", " -count=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            prompt: Point mutation operations (value from 1 to 4)
            name: e_point
            simple: true
            argpos: '4'
            format: {python: '("", " -point=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type:
                _type: StringType
                default: '0'
                options:
                - {label: None, value: '0'}
                - {label: Any of the following, value: '1'}
                - {label: Insertions, value: '2'}
                - {label: Deletions, value: '3'}
                - {label: Changes, value: '4'}
                - {label: Duplications, value: '5'}
                - {label: Moves, value: '6'}
        -   _type: InputProgramParameter
            prompt: Block mutation operations (value from 1 to 4)
            name: e_block
            simple: true
            argpos: '5'
            format: {python: '("", " -block=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type:
                _type: StringType
                default: '0'
                options:
                - {label: None, value: '0'}
                - {label: Any of the following, value: '1'}
                - {label: Insertions, value: '2'}
                - {label: Deletions, value: '3'}
                - {label: Changes, value: '4'}
                - {label: Duplications, value: '5'}
                - {label: Moves, value: '6'}
        -   _type: InputProgramParameter
            comment: Types of codon mutations to perform. These are only done if the
                sequence is nucleic.
            prompt: Codon mutation operations (value from 1 to 4)
            name: e_codon
            argpos: '6'
            format: {python: '("", " -codon=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: None, value: '0'}
                - {label: Any of the following, value: '1'}
                - {label: Insertions, value: '2'}
                - {label: Deletions, value: '3'}
                - {label: Changes, value: '4'}
                - {label: Duplications, value: '5'}
                - {label: Moves, value: '6'}
    -   _type: InputParagraph
        prompt: Additional section
        name: e_additional
        children:
        -   _type: InputProgramParameter
            prompt: Do 'codon' and 'block' operations in frame
            name: e_inframe
            argpos: '7'
            format: {python: '("", " -inframe")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Advanced section
        name: e_advanced
        children:
        -   _type: InputProgramParameter
            prompt: Minimum size for a block mutation (value greater than or equal
                to 0)
            name: e_minimum
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '8'
            format: {python: '("", " -minimum=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            prompt: Maximum size for a block mutation
            name: e_maximum
            argpos: '9'
            format: {python: '("", " -maximum=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 10}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Name of the output sequence file (e_outseq)
            name: e_outseq
            argpos: '10'
            format: {python: '("" , " -outseq=" + str(value))[value is not None]'}
            type: {_type: StringType, default: msbar.e_outseq}
        -   _type: InputProgramParameter
            prompt: Choose the sequence output format
            name: e_osformat_outseq
            argpos: '11'
            format: {python: '("", " -osformat=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: FASTA
                options:
                - {label: Embl, value: EMBL}
                - {label: Fasta, value: FASTA}
                - {label: Gcg, value: GCG}
                - {label: Genbank, value: GENBANK}
                - {label: Nbrf, value: NBRF}
                - {label: Pir, value: PIR}
                - {label: Raw, value: RAW}
                - {label: Swissprot, value: SWISSPROT}
                - {label: Gff, value: GFF}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '12'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outseq_out option
            name: e_outseq_out
            filenames: {python: e_outseq}
            type: {_type: FormattedType, data_terms: 'EDAM_data:2044'}
operations: ['EDAM_operation:0367']
topics: ['EDAM_topic:0156']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/msbar.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: msbar
command: {path: null, value: msbar}
