_type: Program
name: blast2taxoclass
version: '1.0'
title: blast2taxoclass
description: Blast filtering with taxonomic hierarchy information
authors: C. Maufrais
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: Blast output file
        name: infile
        simple: true
        argpos: '20'
        format: {perl: '" -i $value"', python: '" -i " + str(value)'}
        mandatory: true
        type: {_type: FormattedType, data_terms: 'EDAM_data:0857'}
    -   _type: InputProgramParameter
        prompt: 'Find taxonomic classification of:'
        name: blastfilter
        simple: true
        format: {perl: '($value) ? " -$value" : ""', python: '" -" + str(value)'}
        type:
            _type: StringType
            default: M
            options:
            - {label: best hit, value: M}
            - {label: most frequent hit, value: F}
    -   _type: InputProgramParameter
        comment: '0: all hsp'
        prompt: Number of hsp to consider (-x)
        name: nbofhit
        format: {perl: '(defined $value) ? " -x $value" : ""', python: '("", " -x
                " + str(value) )[value is not None and value != vdef]'}
        type: {_type: IntegerType, default: 10}
    -   _type: InputProgramParameter
        comment: '0: all hsp'
        prompt: Number of hsp to consider (-x)
        name: nbofhit
        format: {perl: '(defined $value) ? " -x $value" : ""', python: '("", " -x
                " + str(value) )[value is not None and value != vdef]'}
        type: {_type: IntegerType, default: 10}
    -   _type: InputParagraph
        prompt: Taxonomic hierarchy filter option
        name: taxonomicfilter
        children:
        -   _type: InputProgramParameter
            comment: 'zero means: root of taxonomy, higher value: leaf or near'
            prompt: Relative position in taxonomic hierarchy (-p)
            name: position
            simple: true
            format: {perl: '(defined $value) ? " -p $value" : ""', python: '("", "
                    -p " + str(value) )[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Taxonomic Name (-n)
            name: taxonomic_name
            simple: true
            format: {perl: '(defined $value) ? " -n $value" : ""', python: '("", "
                    -n " + str(value).replace('' '',''_'') )[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: If Taxonomic rank is not defined for one hit, it is not treated.
            prompt: Taxonomic rank name (-r)
            name: rank
            simple: true
            format: {perl: '(defined $value) ? " -r $value" : ""', python: '("", "
                    -r " + str(value) )[value is not None]'}
            type:
                _type: StringType
                default: 'null'
                options:
                - {label: null, value: 'null'}
                - {label: superkingdom, value: superkingdom}
                - {label: kingdom, value: kingdom}
                - {label: subkingdom, value: subkingdom}
                - {label: superphylum, value: superphylum}
                - {label: phylum, value: phylum}
                - {label: subphylum, value: subphylum}
                - {label: superclass, value: superclass}
                - {label: class, value: class}
                - {label: subclass, value: subclass}
                - {label: infraclass, value: infraclass}
                - {label: superorder, value: superorder}
                - {label: order, value: order}
                - {label: suborder, value: suborder}
                - {label: infraorder, value: infraorder}
                - {label: parvorder, value: parvorder}
                - {label: superfamily, value: superfamily}
                - {label: family, value: family}
                - {label: subfamily, value: subfamily}
                - {label: tribe, value: tribe}
                - {label: subtribe, value: subtribe}
                - {label: genus, value: genus}
                - {label: subgenus, value: subgenus}
                - {label: species_group, value: species_group}
                - {label: species_subgroup, value: species_subgroup}
                - {label: species, value: species}
                - {label: subspecies, value: subspecies}
                - {label: varietas, value: varietas}
                - {label: forma, value: forma}
    -   _type: InputParagraph
        prompt: Output option
        name: output
        children:
        -   _type: InputProgramParameter
            prompt: Blast output file(s) sort/split by specific taxonomic hierarchy
                (-b)
            name: blastout
            format: {perl: '($value)? " -b" : ""', python: '("" , " -b") [value]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Query name write in file(s) sort/split by specific taxonomic hierarchy
                (-q)
            name: queryout
            format: {perl: '($value)? " -q" : ""', python: '("" , " -q") [value]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Extract fasta sequence, matching specified taxonomic filter,
                from file containing query sequences witch are used to made blast.
            prompt: Extraction of fasta sequences.
            name: fastaExtract
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Query sequences witch are used to made blast.
            name: query_seq
            argpos: '100'
            format: {perl: '(defined $value)? " && extractfasta -i $query *.qry":
                    ""', python: '(""," && extractfasta -i "+ str(value) + " *.qry")
                    [value is not None]'}
            precond:
                '#and': [fastaExtract, queryout]
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:2044
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output option
        name: output
        children:
        -   _type: OutputProgramParameter
            prompt: Output file
            name: outfile
            filenames: {perl: '"blast2taxoclass.out"', python: '"blast2taxoclass.out"'}
            output_type: stdout
        -   _type: OutputProgramParameter
            prompt: Blast output file(s)
            name: blastoutfile
            filenames: {perl: '"*.blast"', python: '"*.blast"'}
            precond: blastout
            type: {_type: FormattedType, data_terms: 'EDAM_data:0857'}
        -   _type: OutputProgramParameter
            prompt: Query name file
            name: queryoutfile
            filenames: {perl: '"*.qry"', python: '"*.qry"'}
            precond: queryout
        -   _type: OutputProgramParameter
            prompt: Fasta file
            name: fastafile
            filenames: {perl: '"*.fasta"', python: '"*.fasta"'}
            precond: fastaExtract
            type: {_type: FormattedType, data_terms: 'EDAM_data:2044'}
operations: ['EDAM_operation:0258', 'EDAM_operation:0637']
topics: ['EDAM_topic:0182', 'EDAM_topic:0637']
public_name: blast2taxoclass
command: {path: null, value: blast2taxoclass}
