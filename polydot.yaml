_type: Program
name: polydot
title: polydot
description: Draw dotplots for all-against-all comparison of a sequence set
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            comment: File containing a sequence alignment
            prompt: sequences option
            name: e_sequences
            simple: true
            argpos: '1'
            format: {python: '("", " -sequences=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            prompt: Word size (value greater than or equal to 2)
            name: e_wordsize
            ctrl:
            -   message: Value greater than or equal to 2 is required
                test:
                    value: {'#gte': '2'}
            simple: true
            argpos: '2'
            format: {python: '("", " -wordsize=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type: {_type: IntegerType, default: 6}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            comment: This specifies the size of the gap that is used to separate the
                individual dotplots in the display. The size is measured in  residues,
                as displayed in the output.
            prompt: Gap (in residues) between dotplots (value greater than or equal
                to 0)
            name: e_gap
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '3'
            format: {python: '("", " -gap=" + str(value))[value is not None and value!=vdef]'}
            type: {_type: IntegerType, default: 10}
        -   _type: InputProgramParameter
            prompt: Draw a box around each dotplot
            name: e_boxit
            argpos: '4'
            format: {python: '(" -noboxit", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Dump all matches as feature files
            name: e_dumpfeat
            argpos: '5'
            format: {python: '("", " -dumpfeat")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Name of the output feature file (e_outfeat)
            name: e_outfeat
            argpos: '6'
            format: {python: '("" , " -outfeat=" + str(value))[value is not None]'}
            precond: e_dumpfeat
            type: {_type: StringType, default: polydot.e_outfeat}
        -   _type: InputProgramParameter
            prompt: Choose the feature output format
            name: e_offormat_outfeat
            argpos: '7'
            format: {python: '("", " -offormat=" + str(value))[value is not None and
                    value!=vdef]'}
            precond: e_dumpfeat
            type:
                _type: StringType
                default: GFF
                options:
                - {label: Gff, value: GFF}
                - {label: Embl, value: EMBL}
                - {label: Swissprot, value: SWISSPROT}
                - {label: Nbrf, value: NBRF}
                - {label: Pir, value: PIR}
        -   _type: InputProgramParameter
            prompt: Choose the e_graph output format
            name: e_graph
            simple: true
            argpos: '8'
            format: {python: '(" -graph=" + str(vdef), " -graph=" + str(value))[value
                    is not None and value!=vdef]'}
            mandatory: true
            type:
                _type: StringType
                default: png
                options:
                - {label: Png, value: png}
                - {label: Gif, value: gif}
                - {label: Cps, value: cps}
                - {label: Ps, value: ps}
                - {label: Meta, value: meta}
                - {label: Data, value: data}
        -   _type: InputProgramParameter
            prompt: Name of the output graph
            name: e_goutfile
            argpos: '9'
            format: {python: '("" , " -goutfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: polydot_graph}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '10'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfeat_out option
            name: e_outfeat_out
            filenames: {python: e_outfeat}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: outgraph_png
            filenames: {python: '"*.png"'}
            precond: {e_graph: png}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: outgraph_gif
            filenames: {python: '"*.gif"'}
            precond: {e_graph: gif}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: outgraph_ps
            filenames: {python: '"*.ps"'}
            precond:
                '#or':
                - {e_graph: ps}
                - {e_graph: cps}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: outgraph_meta
            filenames: {python: '"*.meta"'}
            precond: {e_graph: meta}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: outgraph_data
            filenames: {python: '"*.dat"'}
            precond: {e_graph: data}
operations: ['EDAM_operation:0490']
topics: ['EDAM_topic:0159']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/polydot.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: polydot
command: {path: null, value: polydot}
