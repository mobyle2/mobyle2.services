_type: Program
name: sixpack
title: sixpack
description: Display a DNA sequence with 6-frame translation and ORFs
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2977
    -   _type: InputParagraph
        prompt: Additional section
        name: e_additional
        children:
        -   _type: InputProgramParameter
            comment: Genetics code used for the translation
            prompt: Genetic codes
            name: e_table
            argpos: '2'
            format: {python: '("", " -table=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Standard, value: '0'}
                - {label: Standard (with alternative initiation codons), value: '1'}
                - {label: Vertebrate mitochondrial, value: '2'}
                - {label: Yeast mitochondrial, value: '3'}
                - {label: 'Mold, protozoan, coelenterate mitochondrial and  mycoplasma/spiroplasma',
                    value: '4'}
                - {label: Invertebrate mitochondrial, value: '5'}
                - {label: Ciliate  macronuclear and dasycladacean, value: '6'}
                - {label: Echinoderm mitochondrial, value: '9'}
                - {label: Euplotid nuclear, value: '10'}
                - {label: Bacterial, value: '11'}
                - {label: Alternative yeast nuclear, value: '12'}
                - {label: Ascidian mitochondrial, value: '13'}
                - {label: Flatworm mitochondrial, value: '14'}
                - {label: Blepharisma macronuclear, value: '15'}
                - {label: Chlorophycean mitochondrial, value: '16'}
                - {label: Trematode mitochondrial, value: '21'}
                - {label: Scenedesmus obliquus, value: '22'}
                - {label: Thraustochytrium mitochondrial, value: '23'}
        -   _type: InputProgramParameter
            comment: Count the beginning of a sequence as a possible ORF, even if
                it's inferior to the minimal ORF size.
            prompt: Orf at the beginning of the sequence
            name: e_firstorf
            argpos: '3'
            format: {python: '(" -nofirstorf", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Count the end of a sequence as a possible ORF, even if it's not
                finishing with a STOP, or inferior to the minimal ORF size.
            prompt: Orf at the end of the sequence
            name: e_lastorf
            argpos: '4'
            format: {python: '(" -nolastorf", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Displays only ORFs starting with an M.
            prompt: Orf start with an m
            name: e_mstart
            argpos: '5'
            format: {python: '("", " -mstart")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '6'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: sixpack.e_outfile}
        -   _type: InputProgramParameter
            comment: ORF sequence output
            prompt: Name of the output sequence file (e_outseq)
            name: e_outseq
            argpos: '7'
            format: {python: '("" , " -outseq=" + str(value))[value is not None]'}
        -   _type: InputProgramParameter
            prompt: Choose the sequence output format
            name: e_osformat_outseq
            argpos: '8'
            format: {python: '("", " -osformat=" + str(value))[value is not None and
                    value!=vdef]'}
        -   _type: InputProgramParameter
            comment: Display also the translation of the DNA sequence in the 3 reverse
                frames
            prompt: Display translation of reverse sense
            name: e_reverse
            argpos: '9'
            format: {python: '(" -noreverse", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Minimum size of Open Reading Frames (ORFs) to display in the
                translations.
            prompt: Minimum size of orfs (value greater than or equal to 1)
            name: e_orfminsize
            ctrl:
            -   message: Value greater than or equal to 1 is required
                test:
                    value: {'#gte': '1'}
            argpos: '10'
            format: {python: '("", " -orfminsize=" + str(value))[value is not None
                    and value!=vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            comment: "Regions to put in uppercase. \n If this is left blank, then\
                \ the sequence case is left alone. \n  A set of regions is specified\
                \ by a set of pairs of positions. \n  The positions are integers.\
                \ \n  They are separated by any non-digit, non-alpha character. \n\
                \  Examples of region specifications are: \n  24-45, 56-78 \n  1:45,\
                \ 67=99;765..888 \n  1,5,8,10,23,45,57,99"
            prompt: 'Regions to put in uppercase (eg: 4-57,78-94)'
            name: e_uppercase
            argpos: '11'
            format: {python: '("", " -uppercase=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Regions to colour if formatting for HTML. \n If this is left\
                \ blank, then the sequence is left alone. \n  A set of regions is\
                \ specified by a set of pairs of positions. \n  The positions are\
                \ integers. \n  They are followed by any valid HTML font colour. \n\
                \  Examples of region specifications are: \n  24-45 blue 56-78 orange\
                \ \n  1-100 green 120-156 red \n  A file of ranges to colour (one\
                \ range per line) can be specified as  '@filename'."
            prompt: 'Regions to colour in html (eg: 4-57 red 78-94 green)'
            name: e_highlight
            argpos: '12'
            format: {python: '("", " -highlight=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: Number the sequence at the beginning and the end of each line.
            prompt: Number the sequences
            name: e_number
            argpos: '13'
            format: {python: '(" -nonumber", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Number of nucleotides displayed on each line
            prompt: Width of sequence to display (value greater than or equal to 1)
            name: e_width
            ctrl:
            -   message: Value greater than or equal to 1 is required
                test:
                    value: {'#gte': '1'}
            argpos: '14'
            format: {python: '("", " -width=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 60}
        -   _type: InputProgramParameter
            prompt: Line length of page (0 for indefinite) (value greater than or
                equal to 0)
            name: e_length
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '15'
            format: {python: '("", " -length=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 0}
        -   _type: InputProgramParameter
            prompt: Margin around sequence for numbering. (value greater than or equal
                to 0)
            name: e_margin
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '16'
            format: {python: '("", " -margin=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 10}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the ID name
                of the sequence.
            prompt: Display sequence id
            name: e_name
            argpos: '17'
            format: {python: '(" -noname", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the description
                of the sequence.
            prompt: Display description
            name: e_description
            argpos: '18'
            format: {python: '(" -nodescription", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Number from which you want the DNA sequence to be numbered.
            prompt: Offset to start numbering the sequence from
            name: e_offset
            argpos: '19'
            format: {python: '("", " -offset=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            prompt: Use html formatting
            name: e_html
            argpos: '20'
            format: {python: '("", " -html")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '21'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
        -   _type: OutputProgramParameter
            prompt: outseq_out option
            name: e_outseq_out
            filenames: {python: e_outseq}
            type: {_type: FormattedType, data_terms: 'EDAM_data:2976'}
operations: ['EDAM_operation:0371', 'EDAM_operation:0564', 'EDAM_operation:0436']
topics: ['EDAM_topic:0108']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/sixpack.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: sixpack
command: {path: null, value: sixpack}
