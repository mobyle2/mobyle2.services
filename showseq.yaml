_type: Program
name: showseq
title: showseq
description: Displays sequences with features in pretty format
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2977
        -   _type: InputProgramParameter
            prompt: Restriction enzyme methylation data file (optional)
            name: e_mfile
            argpos: '2'
            format: {python: '("", " -mfile=" + str(value))[value is not None ]'}
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            prompt: Things to display
            name: e_format
            simple: true
            argpos: '3'
            format: {python: '("", " -format=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type:
                _type: StringType
                default: '2'
                options:
                - {label: Enter your own list of things to display, value: '0'}
                - {label: Sequence only, value: '1'}
                - {label: Default sequence with features, value: '2'}
                - {label: Pretty sequence, value: '3'}
                - {label: One  frame translation, value: '4'}
                - {label: Three frame translations, value: '5'}
                - {label: Six frame  translations, value: '6'}
                - {label: Restriction enzyme map, value: '7'}
                - {label: Baroque, value: '8'}
        -   _type: InputProgramParameter
            comment: 'Specify a list of one or more code characters in the order in
                which you wish things to be displayed one above the other down  the
                page.S: SequenceB: Blank line1: Frame1 translation2: Frame2 translation3:
                Frame3 translation-1: Compframe1  translation-2: Compframe2 translation-3:
                Compframe3  translationT: Ticks lineN: Number ticks lineC: Complement  sequenceF:
                FeaturesR: Restriction enzyme cut sites in forward  sense-R: Restriction
                enzyme cut sites in reverse senseA: AnnotationFor example if you wish
                to see things displayed in the  order: sequence, complement sequence,
                ticks line, frame 1  translation, blank line; then you should enter
                ''S,C,T,1,B''.'
            prompt: Specify your own things to display (value from 1 to 100)
            name: e_things
            argpos: '4'
            format: {python: '("", " -things=" + str(value))[value is not None and
                    value!=vdef]'}
            precond: {e_format: '0'}
            type: {_type: StringType, default: 'B,N,T,S,A,F'}
    -   _type: InputParagraph
        prompt: Additional section
        name: e_additional
        children:
        -   _type: InputProgramParameter
            comment: "Regions to translate (if translating). \n If this is left blank\
                \ the complete sequence is translated. \n  A set of regions is specified\
                \ by a set of pairs of positions. \n  The positions are integers.\
                \ \n  They are separated by any non-digit, non-alpha character. \n\
                \  Examples of region specifications are: \n  24-45, 56-78 \n  1:45,\
                \ 67=99;765..888"
            prompt: 'Regions to translate (eg: 4-57,78-94)'
            name: e_translate
            argpos: '5'
            format: {python: '("", " -translate=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Regions to translate (if translating). \n If this is left blank\
                \ the complete sequence is translated. \n  A set of regions is specified\
                \ by a set of pairs of positions. \n  The positions are integers.\
                \ \n  They are separated by any non-digit, non-alpha character. \n\
                \  Examples of region specifications are: \n  78-56, 45-24, \n  888..765,\
                \ 99=67; 45:1"
            prompt: 'Regions to translate in reverse direction (eg: 78-94,4-57)'
            name: e_revtranslate
            argpos: '6'
            format: {python: '("", " -revtranslate=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Regions to put in uppercase. \n If this is left blank, then\
                \ the sequence case is left alone. \n  A set of regions is specified\
                \ by a set of pairs of positions. \n  The positions are integers.\
                \ \n  They are separated by any non-digit, non-alpha character. \n\
                \  Examples of region specifications are: \n  24-45, 56-78 \n  1:45,\
                \ 67=99;765..888 \n  1,5,8,10,23,45,57,99"
            prompt: 'Regions to put in uppercase (eg: 4-57,78-94)'
            name: e_uppercase
            argpos: '7'
            format: {python: '("", " -uppercase=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Regions to colour if formatting for HTML. \n If this is left\
                \ blank, then the sequence is left alone. \n  A set of regions is\
                \ specified by a set of pairs of positions. \n  The positions are\
                \ integers. \n  They are followed by any valid HTML font colour. \n\
                \  Examples of region specifications are: \n  24-45 blue 56-78 orange\
                \ \n  1-100 green 120-156 red \n  A file of ranges to colour (one\
                \ range per line) can be specified  as '@filename'."
            prompt: 'Regions to colour in html (eg: 4-57 red 78-94 green)'
            name: e_highlight
            argpos: '8'
            format: {python: '("", " -highlight=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Regions to annotate by marking. \n If this is left blank, then\
                \ no annotation is added. \n  A set of regions is specified by a set\
                \ of pairs of positions  followed by optional text. \n  The positions\
                \ are integers. \n  They are followed by any text (but not digits\
                \ when on the  command-line). \n  Examples of region specifications\
                \ are: \n  24-45 new domain 56-78 match to Mouse \n  1-100 First part\
                \ 120-156 oligo \n  A file of ranges to annotate (one range per line)\
                \ can be specified  as '@filename'."
            prompt: 'Regions to mark (eg: 4-57 promoter region 78-94 first exon)'
            name: e_annotation
            argpos: '9'
            format: {python: '("", " -annotation=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "The name 'all' reads in all enzyme names from the REBASE database.\
                \ You can specify enzymes by giving their names with  commas between\
                \ then, such as: 'HincII,hinfI,ppiI,hindiii'. \n  The case of the\
                \ names is not important. You can specify a file of  enzyme names\
                \ to read in by giving the name of the file holding the  enzyme names\
                \ with a '@' character in front of it, for example,  '@enz.list'.\
                \ \n  Blank lines and lines starting with a hash character or '!'\
                \ are  ignored and all other lines are concatenated together with\
                \ a comma  character ',' and then treated as the list of enzymes to\
                \ search  for. \n  An example of a file of enzyme names is: \n  !\
                \ my enzymes \n  HincII, ppiII \n  ! other enzymes \n  hindiii \n\
                \  HinfI \n  PpiI"
            prompt: Comma separated restriction enzyme list
            name: e_enzymes
            argpos: '10'
            format: {python: '("", " -enzymes=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: StringType, default: all}
        -   _type: InputProgramParameter
            prompt: Genetic codes
            name: e_table
            argpos: '11'
            format: {python: '("", " -table=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Standard, value: '0'}
                - {label: Standard (with alternative initiation codons), value: '1'}
                - {label: Vertebrate mitochondrial, value: '2'}
                - {label: Yeast mitochondrial, value: '3'}
                - {label: 'Mold, protozoan, coelenterate mitochondrial and  mycoplasma/spiroplasma',
                    value: '4'}
                - {label: Invertebrate mitochondrial, value: '5'}
                - {label: Ciliate  macronuclear and dasycladacean, value: '6'}
                - {label: Echinoderm mitochondrial, value: '9'}
                - {label: Euplotid nuclear, value: '10'}
                - {label: Bacterial, value: '11'}
                - {label: Alternative yeast nuclear, value: '12'}
                - {label: Ascidian mitochondrial, value: '13'}
                - {label: Flatworm mitochondrial, value: '14'}
                - {label: Blepharisma macronuclear, value: '15'}
                - {label: Chlorophycean mitochondrial, value: '16'}
                - {label: Trematode mitochondrial, value: '21'}
                - {label: Scenedesmus obliquus, value: '22'}
                - {label: Thraustochytrium mitochondrial, value: '23'}
        -   _type: InputParagraph
            prompt: Feature display options
            name: e_featuresection
            children:
            -   _type: InputProgramParameter
                comment: "By default any feature source in the feature table is shown.\
                    \ You can set this to match any feature source you wish to  show.\
                    \ \n  The source name is usually either the name of the program\
                    \ that  detected the feature or it is the feature table (eg: EMBL)\
                    \ that  the feature came from. \n  The source may be wildcarded\
                    \ by using '*'. \n  If you wish to show more than one source,\
                    \ separate their names  with the character '|', eg: \n  gene*\
                    \ | embl"
                prompt: Source of feature to display
                name: e_sourcematch
                argpos: '12'
                format: {python: '("", " -sourcematch=" + str(value))[value is not
                        None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: "By default any feature type in the feature table is shown.\
                    \ You can set this to match any feature type you wish to  show.\
                    \ \n  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the\
                    \  EMBL feature types and see Appendix A of the Swissprot user\
                    \  manual in http://www.expasy.org/sprot/userman.html  for a list\
                    \ of the Swissprot feature types. \n  The type may be wildcarded\
                    \ by using '*'. \n  If you wish to show more than one type, separate\
                    \ their names  with the character '|', eg: \n  *UTR | intron"
                prompt: Type of feature to display
                name: e_typematch
                argpos: '13'
                format: {python: '("", " -typematch=" + str(value))[value is not None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: By default any feature type in the feature table is shown.
                    You can set this to match any feature sense you wish to  show.
                    0 - any sense, 1 - forward sense, -1 - reverse sense
                prompt: Sense of feature to display (value from -1 to 1)
                name: e_sensematch
                ctrl:
                -   message: Value greater than or equal to -1 is required
                    test:
                        value: {'#gte': '-1'}
                -   message: Value less than or equal to 1 is required
                    test:
                        value: {'#lte': '1'}
                argpos: '14'
                format: {python: '("", " -sensematch=" + str(value))[value is not
                        None and value!=vdef]'}
                type: {_type: IntegerType, default: 0}
            -   _type: InputProgramParameter
                comment: Minimum score of feature to display (see also maxscore)
                prompt: Minimum score of feature to display
                name: e_minscore
                argpos: '15'
                format: {python: '("", " -minscore=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: "Maximum score of feature to display. \n If both minscore\
                    \ and maxscore are zero (the default),  then any score is ignored"
                prompt: Maximum score of feature to display
                name: e_maxscore
                argpos: '16'
                format: {python: '("", " -maxscore=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: "Tags are the types of extra values that a feature may have.\
                    \ For example in the EMBL feature table, a 'CDS' type of  feature\
                    \ may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                    \ '/evidence', '/exception', '/function', '/gene',  '/label',\
                    \ '/map', '/note', '/number', '/partial', '/product',  '/protein_id',\
                    \ '/pseudo', '/standard_name', '/translation',  '/transl_except',\
                    \ '/transl_table', or '/usedin'. Some of these  tags also have\
                    \ values, for example '/gene' can have the value of  the gene\
                    \ name. \n  By default any feature tag in the feature table is\
                    \ shown. You  can set this to match any feature tag you wish to\
                    \ show. \n  The tag may be wildcarded by using '*'. \n  If you\
                    \ wish to show more than one tag, separate their names with  the\
                    \ character '|', eg: \n  gene | label"
                prompt: Tag of feature to display
                name: e_tagmatch
                argpos: '17'
                format: {python: '("", " -tagmatch=" + str(value))[value is not None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: "Tag values are the values associated with a feature tag.\
                    \ Tags are the types of extra values that a feature may have.\
                    \ For  example in the EMBL feature table, a 'CDS' type of feature\
                    \ may  have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                    \ '/evidence', '/exception', '/function', '/gene',  '/label',\
                    \ '/map', '/note', '/number', '/partial', '/product',  '/protein_id',\
                    \ '/pseudo', '/standard_name', '/translation',  '/transl_except',\
                    \ '/transl_table', or '/usedin'. Only some of  these tags can\
                    \ have values, for example '/gene' can have the  value of the\
                    \ gene name. By default any feature tag value in the  feature\
                    \ table is shown. You can set this to match any feature  tag value\
                    \ you wish to show. \n  The tag value may be wildcarded by using\
                    \ '*'. \n  If you wish to show more than one tag value, separate\
                    \ their  names with the character '|', eg: \n  pax* | 10"
                prompt: Value of feature tags to display
                name: e_valuematch
                argpos: '18'
                format: {python: '("", " -valuematch=" + str(value))[value is not
                        None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: By default if any tag/value pair in a feature matches the
                    specified tag and value, then all the tags/value pairs of that  feature
                    will be displayed. If this is set to be true, then only  those
                    tag/value pairs in a feature that match the specified tag  and
                    value will be displayed.
                prompt: Only display the matching tags
                name: e_stricttags
                argpos: '19'
                format: {python: '("", " -stricttags")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Advanced section
        name: e_advanced
        children:
        -   _type: InputParagraph
            prompt: Restriction map options
            name: e_remapsection
            children:
            -   _type: InputProgramParameter
                comment: This changes the output format to one where the recognition
                    site is indicated by a row of '===' characters and  the cut site
                    is pointed to by a '>' character in the forward  sense, or a '<'
                    in the reverse sense strand.
                prompt: Display re sites in flat format
                name: e_flatreformat
                argpos: '20'
                format: {python: '("", " -flatreformat")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: This sets the minimum number of cuts for any restriction
                    enzyme that will be considered. Any enzymes that cut fewer times  than
                    this will be ignored.
                prompt: Minimum cuts per re (value from 1 to 1000)
                name: e_mincuts
                ctrl:
                -   message: Value greater than or equal to 1 is required
                    test:
                        value: {'#gte': '1'}
                -   message: Value less than or equal to 1000 is required
                    test:
                        value: {'#lte': '1000'}
                argpos: '21'
                format: {python: '("", " -mincuts=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: IntegerType, default: 1}
            -   _type: InputProgramParameter
                comment: This sets the maximum number of cuts for any restriction
                    enzyme that will be considered. Any enzymes that cut more times  than
                    this will be ignored.
                prompt: Maximum cuts per re
                name: e_maxcuts
                argpos: '22'
                format: {python: '("", " -maxcuts=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: IntegerType, default: 2000000000}
            -   _type: InputProgramParameter
                comment: This sets the minimum length of the restriction enzyme recognition
                    site. Any enzymes with sites shorter than this will  be ignored.
                prompt: Minimum recognition site length (value from 2 to 20)
                name: e_sitelen
                ctrl:
                -   message: Value greater than or equal to 2 is required
                    test:
                        value: {'#gte': '2'}
                -   message: Value less than or equal to 20 is required
                    test:
                        value: {'#lte': '20'}
                argpos: '23'
                format: {python: '("", " -sitelen=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: IntegerType, default: 4}
            -   _type: InputProgramParameter
                comment: If this is set then this forces the values of the mincuts
                    and maxcuts qualifiers to both be 1. Any other value you may  have
                    set them to will be ignored.
                prompt: Force single re site only cuts
                name: e_single
                argpos: '24'
                format: {python: '("", " -single")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: This allows those enzymes which cut at the same position
                    on the forward and reverse strands to be considered.
                prompt: Allow blunt end re cutters
                name: e_blunt
                argpos: '25'
                format: {python: '(" -noblunt", "")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: This allows those enzymes which cut at different positions
                    on the forward and reverse strands, leaving an  overhang, to be
                    considered.
                prompt: Allow sticky end re cutters
                name: e_sticky
                argpos: '26'
                format: {python: '(" -nosticky", "")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: This allows those enzymes which have one or more 'N' ambiguity
                    codes in their pattern to be considered
                prompt: Allow ambiguous re matches
                name: e_ambiguity
                argpos: '27'
                format: {python: '(" -noambiguity", "")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: If this is set then this allows searches for restriction
                    enzyme recognition site and cut positions that span the end of  the
                    sequence to be considered.
                prompt: Allow circular dna
                name: e_plasmid
                argpos: '28'
                format: {python: '("", " -plasmid")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: If this is set then RE recognition sites will not match methylated
                    bases.
                prompt: Use methylation data
                name: e_methylation
                argpos: '29'
                format: {python: '("", " -methylation")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: If this is set, then only those enzymes with a commercial
                    supplier will be searched for. This qualifier is ignored if you  have
                    specified an explicit list of enzymes to search for,  rather than
                    searching through 'all' the enzymes in the REBASE  database. It
                    is assumed that, if you are asking for an explicit  enzyme, then
                    you probably know where to get it from and so all  enzymes names
                    that you have asked to be searched for, and which  cut, will be
                    reported whether or not they have a commercial  supplier.
                prompt: Only use restriction enzymes with suppliers
                name: e_commercial
                argpos: '30'
                format: {python: '(" -nocommercial", "")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: This limits the reporting of enzymes to just one enzyme from
                    each group of isoschizomers. The enzyme chosen to represent  an
                    isoschizomer group is the prototype indicated in the data  file
                    'embossre.equ', which is created by the program  'rebaseextract'.
                    If you prefer different prototypes to be used,  make a copy of
                    embossre.equ in your home directory and edit it.  If this value
                    is set to be false then all of the input enzymes  will be reported.
                    You might like to set this to false if you are  supplying an explicit
                    set of enzymes rather than searching  'all' of them.
                prompt: Limits re hits to one isoschizomer
                name: e_limit
                argpos: '31'
                format: {python: '(" -nolimit", "")[ bool(value) ]'}
                type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: This sets the minimum size of Open Reading Frames (ORFs) to display
                in the translations. All other translation regions are  masked by
                changing the amino acids to '-' characters.
            prompt: Minimum size of orfs (value greater than or equal to 0)
            name: e_orfminsize
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '32'
            format: {python: '("", " -orfminsize=" + str(value))[value is not None
                    and value!=vdef]'}
            type: {_type: IntegerType, default: 0}
        -   _type: InputProgramParameter
            prompt: Display protein sequences in three-letter code
            name: e_threeletter
            argpos: '33'
            format: {python: '("", " -threeletter")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Number the sequences
            name: e_number
            argpos: '34'
            format: {python: '("", " -number")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Width of sequence to display (value greater than or equal to 1)
            name: e_width
            ctrl:
            -   message: Value greater than or equal to 1 is required
                test:
                    value: {'#gte': '1'}
            argpos: '35'
            format: {python: '("", " -width=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 60}
        -   _type: InputProgramParameter
            prompt: Line length of page (0 for indefinite) (value greater than or
                equal to 0)
            name: e_length
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '36'
            format: {python: '("", " -length=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 0}
        -   _type: InputProgramParameter
            prompt: Margin around sequence for numbering (value greater than or equal
                to 0)
            name: e_margin
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '37'
            format: {python: '("", " -margin=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 10}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the ID name
                of the sequence
            prompt: Show sequence id
            name: e_name
            argpos: '38'
            format: {python: '(" -noname", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the description
                of the sequence
            prompt: Show description
            name: e_description
            argpos: '39'
            format: {python: '(" -nodescription", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Offset to start numbering the sequence from
            name: e_offset
            argpos: '40'
            format: {python: '("", " -offset=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            prompt: Use html formatting
            name: e_html
            argpos: '41'
            format: {python: '("", " -html")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '42'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: showseq.e_outfile}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '43'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
operations: ['EDAM_operation:0371', 'EDAM_operation:0575', 'EDAM_operation:0564']
topics: ['EDAM_topic:0108']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/showseq.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: showseq
command: {path: null, value: showseq}
