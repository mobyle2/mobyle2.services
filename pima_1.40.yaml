_type: Program
name: pima
version: '1.40'
title: PIMA
description: Pattern-Induced Multi-sequence Alignment program
authors: R. D. Smith and T. F. Smith
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        comment: 'Name of the input file containing the sequences to be clustered
            and multi-aligned.  Sequences can be in any of the following formats:
            IG/Stanford, GenBank/GB, NBRF, EMBL, Pearson/Fasta, PIR/CODATA. The format
            of the output sequence files will match the format of this input file.'
        prompt: Sequences file
        name: sequence
        simple: true
        argpos: '3'
        format: {perl: '" $value"', python: '" " + str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1942', 'EDAM_format:1936', 'EDAM_format:1948',
                'EDAM_format:1927', 'EDAM_format:1948', 'EDAM_format:2200']
            data_terms: EDAM_data:2044
    -   _type: InputProgramParameter
        comment: An arbitrary name used to label the cluster.
        prompt: Cluster name
        name: cluster_name
        simple: true
        argpos: '2'
        format: {perl: '" $value"', python: '" " + str(value)'}
        mandatory: true
        type: {_type: StringType}
    -   _type: InputParagraph
        prompt: Parameters
        name: pima_params
        children:
        -   _type: InputProgramParameter
            comment: '[optional; if specified, then sec_struct_seq_filename must also
                be specified]. Locus name of one of the primary sequences for which
                the secondary structure is in the file seq_struct_seq_filename.'
            prompt: Reference sequence name
            name: ref_seq_name
            argpos: '4'
            format: {perl: '(defined $value)? " $value" : ""', python: '("", " "+str(value))[value
                    is not None]'}
            precond:
                sec_struc_seq_filename: {'#ne': None}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: '[optional; if specified, then ref_seq_name must also be specified]
                Name of a file containing secondary structure sequences for one or
                more of the primary sequences in the set.  The secondary structure
                sequences in this file must be in one of the formats listed above
                (see sequence_filename, above).  The locus name of each sequence must
                be the locus name of it''s corresponding primary sequence with the
                suffix ''.ss'' (e.g. 1ldm.ss). An alpha-helix, 3-10 helix and beta-strand
                must be designated ''h'', ''g'', and ''e'', respectively.  All other
                characters in the secondary structure sequences will be ignored with
                respect to the the structure-dependent gap penalty.  To allow gaps
                to be placed between the first and the second and the last elements
                of these structures, the first and last 2 elements of each should
                be changed to another character designation.  In the secondary structure
                sequence file pdb-dssp.ss provided with this package, these end cap
                elements are designated ''i'', ''f'', and ''d'', for alpha-helices,
                3-10 helices and beta-strands, respectfully.'
            prompt: sec_struc_seq_filename
            name: sec_struc_seq_filename
            argpos: '5'
            format: {perl: '(defined $value)? " $value" : ""', python: '( ""  , "
                    " + str(value) )[ value is not None ]'}
            precond:
                ref_seq_name: {'#ne': None}
    -   _type: InputParagraph
        prompt: Options
        name: pima_options
        children:
        -   _type: InputProgramParameter
            comment: Use a cluster score cutoff of number. This is the lowest match
                score to be used to incorporate a sequence into a cluster.  The default
                value of 0.0 will force all input sequences into 1 cluster, but the
                final pattern may be completely degenerate.
            prompt: Cluster score cutoff (-c)
            name: score_cutoff
            format: {perl: '(defined $value and $value != $vdef)? " -c $value " :
                    ""', python: '( "" , " -c " + str(value) )[ value is not None
                    and value != vdef]'}
            type: {_type: FloatType, default: 0.0}
        -   _type: InputProgramParameter
            comment: Use a length dependent gap penalty of number. This is the cost
                of extending a gap.  The default value is dependent on the matrix
                file used.
            prompt: Gap extension penalty (-d)
            name: ext_gap_cost
            format: {perl: '(defined $value)? " -d $value" : ""', python: '( ""  ,
                    " -d " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: Use a length independent gap penalty of number. This is the cost
                of opening a gap.  The default value is dependent on the matrix file
                used.
            prompt: Gap opening penalty (-i)
            name: gap_open_cost
            format: {perl: '(defined $value)? " -i $value" : ""', python: '( ""  ,
                    " -i " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: Use minimum local score of number. This is the lowest score a
                quadrant can have before an attempt is made to join this local alignment
                with the local alignment at the previous step.  The default value
                is dependent on the matrix file used.
            prompt: Minimum local score (-l)
            name: min_score
            format: {perl: '(defined $value)? " -l $value" : ""', python: '( ""  ,
                    " -l " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: Use matrix file with the name file. The default matrix file is
                patgen.mat and is provided with this package.  The matrix file class1.mat
                uses the original pima alphabet.  The matrix file class2.mat is also
                provided, which is similar to the matrix file class1.mat but uses
                the new alphabet.
            prompt: Matrix file (-m)
            name: mat_file
            format: {perl: '(defined $value and $value ne $vdef and $value ne "user")?
                    " -m $value" : ""', python: '( ""  , " -m " + str(value) )[ value
                    is not None and value !=vdef and value !="user"]'}
            type:
                _type: StringType
                default: patgen.mat
                options:
                - {label: patgen.mat, value: patgen.mat}
                - {label: class1.mat, value: class1.mat}
                - {label: class2.mat, value: class2.mat}
                - {label: User matrix, value: user}
        -   _type: InputProgramParameter
            comment: User matrix file.
            prompt: User matrix file (-m)
            name: user_mat_file
            format: {perl: '(defined $value)? " -m $value" : ""', python: '( ""  ,
                    " -m " + str(value) )[ value is not None ]'}
            precond: {mat_file: user}
        -   _type: InputProgramParameter
            prompt: Do not use numerical extensions on each step of the alignment.
                (-n)
            name: not_num_ext
            format: {perl: '($value)? " -n" : ""', python: '( ""  , " -n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Use a secondary structure gap penalty of number. This is the
                cost of a gap at a position matching a secondary structure character.  The
                default value is dependent on the matrix file used and is always 10
                times the value of the length independent gap penalty of the matrix
                file.
            prompt: Secondary structure gap penalty (-t)
            name: sec_struc_gap_cost
            format: {perl: '(defined $value)? " -t $value " : ""', python: '( ""  ,
                    " -t " + str(value) + " " )[ value is not None ]'}
            type: {_type: IntegerType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Output files
        name: results
        filenames: {perl: '*.pima"', python: '"*.pima"'}
operations: ['EDAM_operation:0492']
topics: ['EDAM_topic:0182']
references:
- {doi: null, label: 'R. D. Smith and T. F. Smith. Pattern-induced multi-sequence
        alignment (PIMA) algorithm employing secondary structure-dependent gap penalties
        for use in comparative modelling. protein Engineering, vol5, number 1, pp
        35-41, 1992', url: null}
public_name: pima
command: {path: null, value: pima}
source_links: ['ftp://ftp.ebi.ac.uk/pub/software/unix/pima/']
