_type: Program
name: hmmemit
title: HMMEMIT
description: Generate sequences from a profile HMM
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: HMM emit command
        name: hmmcmd
        argpos: '0'
        format: {perl: '"hmmemit"', python: '"hmmemit"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        prompt: HMM file
        name: hmmfile
        simple: true
        argpos: '2'
        format: {perl: '" $hmmfile"', python: '" " + str(hmmfile)'}
        mandatory: true
    -   _type: InputProgramParameter
        comment: Save the synthetic sequences to file rather than writing them to
            stdout.
        prompt: Name of the synthetic sequences file (-o)
        name: outfile_name
        argpos: '1'
        format: {perl: '(defined $value) ? " -o $value" : ""', python: '( "" , " -o
                " + str(value) )[ value is not None ]'}
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: "Emit a consensus sequence, instead of sampling a sequence from the\
            \ profile\n        HMM's probability distribution. The consensus sequence\
            \ is formed by selecting\n        the maximum probability residue at each\
            \ match state."
        prompt: Consensus sequence (-c)
        name: consensus
        argpos: '1'
        format: {perl: '($value) ? " -c" : ""', python: '( "" , " -c" )[ value ]'}
        precond:
            '#and':
            - {number: '1'}
            - {'#not': sample}
        type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        comment: Sample x sequences, rather than just one.
        prompt: Number of sequences to sample (-N)
        name: number
        argpos: '1'
        format: {perl: '(defined $value and $value != $vdef) ? " -N $value " : ""',
            python: '( "" , " -N " + str(value) )[ value is not None and value !=
                vdef]'}
        type: {_type: IntegerType, default: 1}
    -   _type: InputProgramParameter
        comment: "Sample sequences from the implicit profile, not from the core model.\
            \ \n        The core\n        model consists only of the homologous states\
            \ (between the begin and end states\n        of a HMMER Plan7 model).\
            \ The profile includes the nonhomologous N, C, and J\n        states,\
            \ local/glocal and uni/multihit algorithm configuration, and the target\
            \ length\n        model. Therefore sequences sampled from a profile may\
            \ include nonhomologous\n        as well as homologous sequences, and\
            \ may contain more than one homologous\n        sequence segment. By default,\
            \ the profile is in multihit local mode, and the target\n        sequence\
            \ length is configured for L=400. To change these defaults, see Options\n\
            \        Controlling Emission from Profiles, below."
        prompt: Sample from profile, not core model (-p)
        name: sample
        argpos: '1'
        format: {perl: '( $value ) ? " -p " : ""', python: '( "" , " -p " )[ value
                ]'}
        type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Options controlling emission from profiles (with -p)
        name: controlP
        precond: sample
        children:
        -   _type: InputProgramParameter
            comment: "Configure the profile's target sequence length model to generate\
                \ a mean length of\n          approximately the value rather than\
                \ the default of 400."
            prompt: Set expected length from profile (-L)
            name: len
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? " -L $value " :
                    ""', python: '( "" , " -L " + str(value) )[ value is not None
                    and value != vdef]'}
            type: {_type: IntegerType, default: 400}
        -   _type: InputProgramParameter
            prompt: Configure profile mode
            name: local
            format: {perl: '(defined $value) ? " --$value " : ""', python: '( "" ,
                    " --" + str(value) )[ value is not None ]'}
            type:
                _type: StringType
                default: 'null'
                options:
                - {label: null, value: 'null'}
                - {label: local mode, value: local}
                - {label: unilocal mode, value: unilocal}
                - {label: glocal mode, value: glocal}
                - {label: uniglocal mode, value: uniglocal}
    -   _type: InputProgramParameter
        comment: "Seed the random number generator with the value, an integer >= 0.\
            \ If the value is nonzero,\n          any stochastic simulations will\
            \ be reproducible; the same command will give the\n          same results.\
            \ If the value is 0, the random number generator is seeded arbitrarily,\
            \ and\n          stochastic simulations will vary from run to run of the\
            \ same command. The default\n          is 0: use an arbitrary seed, so\
            \ different hmmemit runs will generate different\n          samples."
        prompt: Seed number (--seed)
        name: seed
        argpos: '1'
        format: {perl: '(defined $value and $value != $vdef) ? " --seed $value " :
                ""', python: '( "" , " --seed " + str(value) )[ value is not None
                and value !=vdef ]'}
        type: {_type: IntegerType, default: 0}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Output file
        name: output_file
        filenames: {perl: $outfile_name, python: str(outfile_name)}
        precond:
            outfile_name: {'#ne': None}
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2044
    -   _type: OutputProgramParameter
        prompt: Output file
        name: out_file
        filenames: {perl: '"hmmemit.out"', python: '"hmmemit.out"'}
        precond:
            outfile_name: {'#eq': None}
        output_type: stdout
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2044
comment: hmmemit reads an HMM file from hmmfile and generates a number of sequences
    from it; or, if the -c option is selected, generate a single majority-rule consensus.
    This can be useful for various applications in which one needs a simulation of
    sequences consistent with a sequence family consensus.By default, hmmemit generates
    10 sequences and outputs them in FASTA (unaligned) format.
operations: ['EDAM_operation:0230']
topics: ['EDAM_topics:0188']
public_name: hmmemit
command: {path: null, value: null}
