_type: Program
name: neighbor
title: neighbor
description: Neighbor-Joining and UPGMA methods
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: neighbor
        argpos: '0'
        format: {perl: '"neighbor <neighbor.params"', python: '"neighbor <neighbor.params"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        prompt: Distance method
        name: distance_method
        argpos: '1'
        format: {perl: '($value eq "upgma") ? "N\\n" : ""', python: '( "" , "N\n")[
                value == "upgma" ]'}
        mandatory: true
        type:
            _type: StringType
            default: neighbor
            options:
            - {label: Neighbor-joining, value: neighbor}
            - {label: UPGMA, value: upgma}
        paramfile: neighbor.params
    -   _type: InputProgramParameter
        comment: "Give a file containing a distance matrix\n\t  obtained by distance\
            \ matrix programs like protdist or\n\t  dnadist"
        prompt: Distances matrix File
        name: infile
        simple: true
        argpos: '-10'
        format: {perl: '"ln -s $infile infile && "', python: '"ln -s "+str(infile)+"
                infile && "'}
        precond:
            infile: {'#ne': infile}
        mandatory: true
        type: {_type: FormattedType, data_terms: 'EDAM_data:0870'}
    -   _type: InputParagraph
        prompt: Randomize options
        name: jumble_opt
        children:
        -   _type: InputProgramParameter
            prompt: Randomize (jumble) input order (J)
            name: jumble
            argpos: '20'
            format: {perl: '($value) ? "J\\n$jumble_seed\\n" : ""', python: '( ""
                    , "J\n" + str( jumble_seed ) + "\n" )[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: neighbor.params
        -   _type: InputProgramParameter
            prompt: Random number seed for jumble (must be odd)
            name: jumble_seed
            format: {perl: '""', python: '""'}
            precond: jumble
            mandatory: true
            type: {_type: IntegerType}
    -   _type: InputParagraph
        prompt: Bootstrap options
        name: bootstrap
        children:
        -   _type: InputProgramParameter
            prompt: Analyze multiple data sets (M)
            name: multiple
            argpos: '10'
            format: {perl: '($value) ? "M\\n$multiple_number\\n$multiple_seed\\n"
                    : ""', python: '("", "M\n"+str(multiple_number)+"\n"+str(multiple_seed)+"\n")[
                    value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: neighbor.params
        -   _type: InputProgramParameter
            prompt: How many data sets
            name: multiple_number
            format: {perl: '""', python: '""'}
            precond: multiple
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Random number seed for multiple dataset (must be odd)
            name: multiple_seed
            format: {perl: '""', python: '""'}
            precond: multiple
            mandatory: true
            type: {_type: IntegerType}
            paramfile: neighbor.params
        -   _type: InputProgramParameter
            prompt: Compute a consensus tree
            name: consense
            argpos: '10'
            format: {perl: '($value)? " && cp infile neighbor.infile &&  cp neighbor.outtree
                    intree && consense <consense.params && mv outtree consense.outtree
                    && mv outfile consense.outfile" : ""', python: '("" , " && cp
                    infile neighbor.infile &&  cp neighbor.outtree intree && consense
                    <consense.params && mv outtree consense.outtree && mv outfile
                    consense.outfile")[ value ]'}
            precond:
                '#and': [multiple, print_treefile]
            type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        name: consense_confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputProgramParameter
        name: consense_terminal_type
        argpos: '-2'
        format: {perl: '"T\\n"', python: '"T\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputParagraph
        prompt: Output options
        name: output
        children:
        -   _type: InputProgramParameter
            comment: Tells the program to print a semi-graphical picture of the tree
                in the outfile.
            prompt: Print out tree (3)
            name: print_tree
            argpos: '1'
            format: {perl: '($value) ? "" : "3\\n"', python: '( "3\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: neighbor.params
        -   _type: InputProgramParameter
            comment: Tells the program to save the tree in a treefile (a standard
                representation of trees where the tree is specified by a nested pairs
                of parentheses, enclosing names and separated by commas).
            prompt: Write out trees onto tree file (4)
            name: print_treefile
            argpos: '1'
            format: {perl: '($value) ? "" : "4\\n"', python: '( "4\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: neighbor.params
        -   _type: InputProgramParameter
            prompt: Print out the data at start of run (1)
            name: printdata
            argpos: '1'
            format: {perl: '($value) ? "1\\n" : ""', python: '( "" , "1\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: neighbor.params
    -   _type: InputParagraph
        prompt: Other options
        name: other_options
        children:
        -   _type: InputProgramParameter
            comment: The O (Outgroup) option specifies which species is to have the
                root of the tree be on the line leading to it.For example, if the
                outgroup is a species "Mouse" then the root of the tree will be placed
                in the middle of the branch which is connected to this species, with
                Mouse branching off on one side of the root and the lineage leading
                to the rest of the tree on the other.This option is toggle on by choosing
                the number of the outgroup (the species being taken in the numerical
                order that they occur in the input file).Outgroup-rooting will not
                be attempted  if it is a user-defined tree, despite your invoking
                the option.When it is used, the tree as printed out is still listed
                as being an unrooted tree, though the outgroup is connected to the
                bottommost node so that it is easy to visually convert the tree into
                rooted form.
            prompt: Outgroup species (default, use as outgroup species 1) (O)
            name: outgroup
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "O\\n$value\\n"
                    : ""', python: '( "" , "O\n" +str( value )+ "\n" )[ value is not
                    None and value != vdef]'}
            precond: {distance_method: neighbor}
            type: {_type: IntegerType, default: 1}
            paramfile: neighbor.params
        -   _type: InputProgramParameter
            prompt: Matrix format
            name: triangular
            argpos: '1'
            type: {_type: StringType, default: square}
            paramfile: neighbor.params
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: neighbor.params
    -   _type: InputProgramParameter
        name: terminal_type
        argpos: '-1'
        format: {perl: '"0\\n"', python: '"0\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: neighbor.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Consense output file
        name: consense_outfile
        filenames: {perl: '"consense.outfile"', python: '"consense.outfile"'}
        precond: consense
    -   _type: OutputProgramParameter
        prompt: Consense output tree
        name: consense_treefile
        filenames: {perl: '"consense.outtree"', python: '"consense.outtree"'}
        precond: consense
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
    -   _type: OutputProgramParameter
        prompt: Neighbor output file
        name: outfile
        filenames: {perl: '"neighbor.outfile"', python: '"neighbor.outfile"'}
    -   _type: OutputProgramParameter
        prompt: Neighbor output tree file
        name: treefile
        filenames: {perl: '"neighbor.outtree"', python: '"neighbor.outtree"'}
        precond: print_treefile
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
comment: "This program implements the Neighbor-Joining\n\t method of Saitou and Nei\
    \ (1987) and the UPGMA method of\n\t clustering.NEIGHBOR constructs a tree by\
    \ successive\n\t clustering of lineages, setting branch lengths as the\n\t lineages\
    \ join. The tree is not rearranged thereafter. The\n\t tree does not assume an\
    \ evolutionary clock, so that it is in\n\t effect an unrooted tree."
operations: ['EDAM_operation:0546']
topics: ['EDAM_topic:0084']
documentation_links: ['http://bioweb2.pasteur.fr/docs/phylip/doc/neighbor.html']
public_name: neighbor
command: {path: null, value: null}
