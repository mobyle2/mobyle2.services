_type: Program
name: restrict
title: restrict
description: Report restriction enzyme cleavage sites in a nucleotide sequence
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2977
        -   _type: InputProgramParameter
            prompt: Restriction enzyme data file (optional)
            name: e_datafile
            argpos: '2'
            format: {python: '("", " -datafile=" + str(value))[value is not None]'}
        -   _type: InputProgramParameter
            prompt: Restriction enzyme methylation data file (optional)
            name: e_mfile
            argpos: '3'
            format: {python: '("", " -mfile=" + str(value))[value is not None ]'}
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            comment: This sets the minimum length of the restriction enzyme recognition
                site. Any enzymes with sites shorter than this will be  ignored.
            prompt: Minimum recognition site length (value from 2 to 20)
            name: e_sitelen
            ctrl:
            -   message: Value greater than or equal to 2 is required
                test:
                    value: {'#gte': '2'}
            -   message: Value less than or equal to 20 is required
                test:
                    value: {'#lte': '20'}
            simple: true
            argpos: '4'
            format: {python: '("", " -sitelen=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type: {_type: IntegerType, default: 4}
        -   _type: InputProgramParameter
            comment: "The name 'all' reads in all enzyme names from the REBASE database.\
                \ You can specify enzymes by giving their names with  commas between\
                \ then, such as: 'HincII,hinfI,ppiI,hindiii'. \n  The case of the\
                \ names is not important. You can specify a file of  enzyme names\
                \ to read in by giving the name of the file holding the  enzyme names\
                \ with a '@' character in front of it, for example,  '@enz.list'.\
                \ \n  Blank lines and lines starting with a hash character or '!'\
                \ are  ignored and all other lines are concatenated together with\
                \ a comma  character ',' and then treated as the list of enzymes to\
                \ search  for. \n  An example of a file of enzyme names is: \n  !\
                \ my enzymes \n  HincII, ppiII \n  ! other enzymes \n  hindiii \n\
                \  HinfI \n  PpiI"
            prompt: Comma separated enzyme list
            name: e_enzymes
            simple: true
            argpos: '5'
            format: {python: '("", " -enzymes=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type: {_type: StringType, default: all}
    -   _type: InputParagraph
        prompt: Advanced section
        name: e_advanced
        children:
        -   _type: InputProgramParameter
            comment: This sets the minimum number of cuts for any restriction enzyme
                that will be considered. Any enzymes that cut fewer times  than this
                will be ignored.
            prompt: Minimum cuts per re (value from 1 to 1000)
            name: e_min
            ctrl:
            -   message: Value greater than or equal to 1 is required
                test:
                    value: {'#gte': '1'}
            -   message: Value less than or equal to 1000 is required
                test:
                    value: {'#lte': '1000'}
            argpos: '6'
            format: {python: '("", " -min=" + str(value))[value is not None and value!=vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            comment: This sets the maximum number of cuts for any restriction enzyme
                that will be considered. Any enzymes that cut more times  than this
                will be ignored.
            prompt: Maximum cuts per re
            name: e_max
            argpos: '7'
            format: {python: '("", " -max=" + str(value))[value is not None and value!=vdef]'}
            type: {_type: IntegerType, default: 2000000000}
        -   _type: InputProgramParameter
            comment: This gives the fragment lengths of the forward sense strand produced
                by complete restriction by each restriction enzyme on  its own. Results
                are added to the tail section of the report.
            prompt: List individual enzymes with their fragments
            name: e_solofragment
            argpos: '8'
            format: {python: '("", " -solofragment")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: If this is set then this forces the values of the mincuts and
                maxcuts qualifiers to both be 1. Any other value you may have  set
                them to will be ignored.
            prompt: Force single site only cuts
            name: e_single
            argpos: '9'
            format: {python: '("", " -single")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: This allows those enzymes which cut at the same position on the
                forward and reverse strands to be considered.
            prompt: Allow blunt end cutters
            name: e_blunt
            argpos: '10'
            format: {python: '(" -noblunt", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: This allows those enzymes which cut at different positions on
                the forward and reverse strands, leaving an overhang, to be  considered.
            prompt: Allow sticky end cutters
            name: e_sticky
            argpos: '11'
            format: {python: '(" -nosticky", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: This allows those enzymes which have one or more 'N' ambiguity
                codes in their pattern to be considered
            prompt: Allow ambiguous matches
            name: e_ambiguity
            argpos: '12'
            format: {python: '(" -noambiguity", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: If this is set then this allows searches for restriction enzyme
                recognition site and cut positions that span the end of the  sequence
                to be considered.
            prompt: Allow circular dna
            name: e_plasmid
            argpos: '13'
            format: {python: '("", " -plasmid")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: If this is set then RE recognition sites will not match methylated
                bases.
            prompt: Use methylation data
            name: e_methylation
            argpos: '14'
            format: {python: '("", " -methylation")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: If this is set, then only those enzymes with a commercial supplier
                will be searched for. This qualifier is ignored if you  have specified
                an explicit list of enzymes to search for, rather  than searching
                through 'all' the enzymes in the REBASE database.  It is assumed that,
                if you are asking for an explicit enzyme, then  you probably know
                where to get it from and so all enzymes names  that you have asked
                to be searched for, and which cut, will be  reported whether or not
                they have a commercial supplier.
            prompt: Only enzymes with suppliers
            name: e_commercial
            argpos: '15'
            format: {python: '(" -nocommercial", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            comment: This limits the reporting of enzymes to just one enzyme from
                each group of isoschizomers. The enzyme chosen to represent  an isoschizomer
                group is the prototype indicated in the data file  'embossre.equ',
                which is created by the program 'rebaseextract'.  If you prefer different
                prototypes to be used, make a copy of  embossre.equ in your home directory
                and edit it. If this value is  set to be false then all of the input
                enzymes will be reported.  You might like to set this to false if
                you are supplying an  explicit set of enzymes rather than searching
                'all' of them.
            prompt: Limits reports to one isoschizomer
            name: e_limit
            argpos: '16'
            format: {python: '(" -nolimit", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Sort output alphabetically
            name: e_alphabetic
            argpos: '17'
            format: {python: '("", " -alphabetic")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: This gives the fragment lengths of the forward sense strand produced
                by complete restriction using all of the input enzymes  together.
                Results are added to the tail section of the report.
            prompt: Show fragment lengths
            name: e_fragments
            argpos: '18'
            format: {python: '("", " -fragments")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Show sequence name
            name: e_name
            argpos: '19'
            format: {python: '("", " -name")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Name of the report file
            name: e_outfile
            argpos: '20'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: restrict.report}
        -   _type: InputProgramParameter
            prompt: Choose the report output format
            name: e_rformat_outfile
            argpos: '21'
            format: {python: '("", " -rformat=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: TABLE
                options:
                - {label: Dasgff, value: DASGFF}
                - {label: Dbmotif, value: DBMOTIF}
                - {label: Diffseq, value: DIFFSEQ}
                - {label: Embl, value: EMBL}
                - {label: Excel, value: EXCEL}
                - {label: Feattable, value: FEATTABLE}
                - {label: Genbank, value: GENBANK}
                - {label: Gff, value: GFF}
                - {label: Listfile, value: LISTFILE}
                - {label: Motif, value: MOTIF}
                - {label: Nametable, value: NAMETABLE}
                - {label: Pir, value: PIR}
                - {label: Regions, value: REGIONS}
                - {label: Seqtable, value: SEQTABLE}
                - {label: Simple, value: SIMPLE}
                - {label: Srs, value: SRS}
                - {label: Swiss, value: SWISS}
                - {label: Table, value: TABLE}
                - {label: Tagseq, value: TAGSEQ}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '22'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
            precond:
                e_rformat_outfile:
                    '#in': [DASGFF, DBMOTIF, DIFFSEQ, EMBL, EXCEL, FEATTABLE, GENBANK,
                        GFF, LISTFILE, MOTIF, NAMETABLE, PIR, REGIONS, SEQTABLE, SIMPLE,
                        SRS, SWISS, TABLE, TAGSEQ]
operations: ['EDAM_operation:0431']
topics: ['EDAM_topic:0100']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/restrict.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: restrict
command: {path: null, value: restrict}
