_type: Program
name: rnaeval
title: RNAeval
description: Calculate energy of RNA sequences on given secondary structure
authors: Hofacker, Stadler
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: rnaeval
        format: {perl: '"RNAeval"', python: '"RNAeval"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: "Sequences and structures are read alternately from stdin.\n    \
            \    The energy in Kcal/Mol is written to stdout.\n        The program\
            \ will continue to read new sequences and structures until  a  line\n\
            \       consisting of the single character \"@\" or an end of file condition\
            \ is encountered.\n       If the input sequence or structure contains\
            \ the separator character \"&\" the program\n       calculates the energy\
            \ of the co-folding of two RNA strands, where the \"&\" marks the\n  \
            \     boundary between the two strands."
        prompt: Sequences/Structures File
        name: seqstruct
        simple: true
        argpos: '1000'
        format: {perl: '" < $value"', python: '" < " + str(value)'}
        mandatory: true
    -   _type: InputParagraph
        prompt: Other options
        name: others_options
        children:
        -   _type: InputProgramParameter
            prompt: Rescale energy parameters to a temperature of temp C. (-T)
            name: temperature
            format: {perl: '(defined $value and $value != $vdef)? " -T $value" : ""',
                python: '( "" , " -T " + str(value) )[ value is not None and value
                    != vdef]'}
            type: {_type: FloatType, default: 37.0}
        -   _type: InputProgramParameter
            prompt: Do not include special stabilizing energies for certain tetraloops
                (-4)
            name: tetraloops
            format: {perl: '($value)? " -4" : ""', python: '( "" , " -4" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "How to treat 'dangling end' energies for bases adjacent to helices\
                \ in free \n            ends and multiloops: Normally only unpaired\
                \ bases can participate in at most one dangling end.-d     Do  not\
                \  give  stabilizing energies to unpaired bases adjacent to helices\
                \ in\n              multiloops and free ends (\"dangling ends\").\
                \ Same as  -d0,  opposite  of  -d1\n              (the default).-d2\
                \    Treat dangling ends as in the partition function algorithm, i.e.\
                \ bases adjacent \n           to helices in multiloops and free ends\
                \ give a stabilizing  energy  contribution, \n           regardless\
                \ whether they're paired or unpaired.-d3    Allow coaxial stacking\
                \ of adjacent helices in multi-loops."
            prompt: How to treat dangling end energies for bases adjacent to helices
                in free ends and multiloops (-d)
            name: dangling
            format: {perl: '(defined $value and $value ne $vdef)? " $value" : ""',
                python: '( "" , " " + str(value) )[ value is not None and value !=
                    vdef]'}
            type:
                _type: StringType
                default: -d1
                options:
                - {label: Only unpaired bases can participate in at most one dangling
                        end (-d1), value: -d1}
                - {label: Ignores dangling ends altogether (-d), value: -d}
                - {label: 'The check is ignored, this is the default for partition
                        function folding (-d2)', value: -d2}
        -   _type: InputProgramParameter
            comment: "Let multiloop energies depend logarithmically on the size, \n\
                \            instead of the usual linear energy function."
            prompt: Let multiloop energies depend logarithmically on the size (-logML)
            name: logML
            format: {perl: '($value)? " -logML" : ""', python: '( "" , " -logML" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: -circ  Assume a cricular (rather than linear) RNA molecule.
            name: circular
            format: {perl: '($value)? " -circ" : ""', python: '( "" , " -circ" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: <html:p xmlns:html="http://www.w3.org/1999/xhtml">Read energy
                parameters from paramfile, instead of using the default parameter
                set.<html:a href="http://www.tbi.univie.ac.at/~ivo/RNA/RNAlib/Param-Files.html"
                target="ParamFile">( documentation for details on the file format.)</html:a></html:p>
            prompt: Energy parameter file (-P)
            name: parameter
            format: {perl: '(defined $value)? " -P $value" : ""', python: '( "" ,
                    " -P " + str(value) )[ value is not None ]'}
        -   _type: InputParagraph
            prompt: Output options
            name: output_options
            children:
            -   _type: InputProgramParameter
                prompt: Print out energy contribution of each loop in the structure.
                name: verbose
                format: {perl: '($value)? " -v ": ""', python: '( "" , " -v ")[ value
                        ]'}
                type: {_type: BooleanType, default: false}
outputs: {_type: OutputParagraph}
comment: RNAeval  evaluates  the  free  energy  of  an  RNA molecule in fixed secondary
    structure.
operations: ['EDAM_operation:2439']
topics: ['EDAM_topic:0097']
references:
- {doi: null, label: 'I.L. Hofacker, W. Fontana, P.F. Stadler, S. Bonhoeffer, M. Tacker,
        P. Schuster (1994) Fast Folding and Comparison of RNA Secondary Structures.
        Monatshefte f. Chemie 125: 167-188', url: null}
documentation_links: ['http://www.tbi.univie.ac.at/RNA/RNAeval.html']
public_name: rnaeval
command: {path: null, value: null}
