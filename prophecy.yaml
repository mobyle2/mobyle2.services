_type: Program
name: prophecy
title: prophecy
description: Create frequency matrix or profile from a multiple alignment
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200', 'EDAM_format:1993', 'EDAM_format:1996',
                    'EDAM_format:1985', 'EDAM_format:1986', 'EDAM_format:1988', 'EDAM_format:1989',
                    'EDAM_format:1987', 'EDAM_format:2002', 'EDAM_format:2003', 'EDAM_format:1999',
                    'EDAM_format:2001', 'EDAM_format:2001', 'EDAM_format:2001', 'EDAM_format:1990']
                data_terms: EDAM_data:0863
        -   _type: InputProgramParameter
            prompt: Profile type
            name: e_type
            simple: true
            argpos: '2'
            format: {python: '("", " -type=" + str(value))[value is not None and value!=vdef]'}
            mandatory: true
            type:
                _type: StringType
                default: F
                options:
                - {label: Frequency, value: F}
                - {label: Gribskov, value: G}
                - {label: Henikoff, value: H}
        -   _type: InputProgramParameter
            comment: '''Epprofile'' for Gribskov type, or EBLOSUM62'
            prompt: Scoring matrix
            name: e_datafile
            argpos: '3'
            format: {python: '("", " -datafile=" + str(value))[value is not None and
                    value!=vdef]'}
            precond:
                e_type: {'#ne': F}
            type:
                _type: StringType
                default: mobyle_null
                options:
                - {label: null, value: mobyle_null}
                - {label: Eblosum30, value: EBLOSUM30}
                - {label: Eblosum35, value: EBLOSUM35}
                - {label: Eblosum40, value: EBLOSUM40}
                - {label: Eblosum45, value: EBLOSUM45}
                - {label: Eblosum50, value: EBLOSUM50}
                - {label: Eblosum55, value: EBLOSUM55}
                - {label: Eblosum60, value: EBLOSUM60}
                - {label: Eblosum62, value: EBLOSUM62}
                - {label: Eblosum62-12, value: EBLOSUM62-12}
                - {label: Eblosum65, value: EBLOSUM65}
                - {label: Eblosum70, value: EBLOSUM70}
                - {label: Eblosum75, value: EBLOSUM75}
                - {label: Eblosum80, value: EBLOSUM80}
                - {label: Eblosum85, value: EBLOSUM85}
                - {label: Eblosum90, value: EBLOSUM90}
                - {label: Eblosumn, value: EBLOSUMN}
                - {label: Ednafull, value: EDNAFULL}
                - {label: Ednamat, value: EDNAMAT}
                - {label: Ednasimple, value: EDNASIMPLE}
                - {label: Epam10, value: EPAM10}
                - {label: Epam100, value: EPAM100}
                - {label: Epam110, value: EPAM110}
                - {label: Epam120, value: EPAM120}
                - {label: Epam130, value: EPAM130}
                - {label: Epam140, value: EPAM140}
                - {label: Epam150, value: EPAM150}
                - {label: Epam160, value: EPAM160}
                - {label: Epam170, value: EPAM170}
                - {label: Epam180, value: EPAM180}
                - {label: Epam190, value: EPAM190}
                - {label: Epam20, value: EPAM20}
                - {label: Epam200, value: EPAM200}
                - {label: Epam210, value: EPAM210}
                - {label: Epam220, value: EPAM220}
                - {label: Epam230, value: EPAM230}
                - {label: Epam240, value: EPAM240}
                - {label: Epam250, value: EPAM250}
                - {label: Epam260, value: EPAM260}
                - {label: Epam270, value: EPAM270}
                - {label: Epam280, value: EPAM280}
                - {label: Epam290, value: EPAM290}
                - {label: Epam30, value: EPAM30}
                - {label: Epam300, value: EPAM300}
                - {label: Epam310, value: EPAM310}
                - {label: Epam320, value: EPAM320}
                - {label: Epam330, value: EPAM330}
                - {label: Epam340, value: EPAM340}
                - {label: Epam350, value: EPAM350}
                - {label: Epam360, value: EPAM360}
                - {label: Epam370, value: EPAM370}
                - {label: Epam380, value: EPAM380}
                - {label: Epam390, value: EPAM390}
                - {label: Epam40, value: EPAM40}
                - {label: Epam400, value: EPAM400}
                - {label: Epam410, value: EPAM410}
                - {label: Epam420, value: EPAM420}
                - {label: Epam430, value: EPAM430}
                - {label: Epam440, value: EPAM440}
                - {label: Epam450, value: EPAM450}
                - {label: Epam460, value: EPAM460}
                - {label: Epam470, value: EPAM470}
                - {label: Epam480, value: EPAM480}
                - {label: Epam490, value: EPAM490}
                - {label: Epam50, value: EPAM50}
                - {label: Epam500, value: EPAM500}
                - {label: Epam60, value: EPAM60}
                - {label: Epam70, value: EPAM70}
                - {label: Epam80, value: EPAM80}
                - {label: Epam90, value: EPAM90}
                - {label: Sssub, value: SSSUB}
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            prompt: Enter a name for the profile
            name: e_name
            simple: true
            argpos: '4'
            format: {python: '("", " -name=" + str(value))[value is not None and value!=vdef]'}
            mandatory: true
            type: {_type: StringType, default: mymatrix}
        -   _type: InputParagraph
            prompt: Profile type specific options
            name: e_profiletypesection
            children:
            -   _type: InputProgramParameter
                prompt: Enter threshold reporting percentage (value from 1 to 100)
                name: e_threshold
                ctrl:
                -   message: Value greater than or equal to 1 is required
                    test:
                        value: {'#gte': '1'}
                -   message: Value less than or equal to 100 is required
                    test:
                        value: {'#lte': '100'}
                argpos: '5'
                format: {python: '("", " -threshold=" + str(value))[value is not None
                        and value!=vdef]'}
                precond: {e_type: F}
                type: {_type: IntegerType, default: 75}
        -   _type: InputParagraph
            prompt: Gap options
            name: e_gapsection
            children:
            -   _type: InputProgramParameter
                prompt: Gap opening penalty
                name: e_open
                argpos: '6'
                format: {python: '("", " -open=" + str(value))[value is not None and
                        value!=vdef]'}
                precond:
                    e_type: {'#ne': F}
                type: {_type: FloatType, default: 3.0}
            -   _type: InputProgramParameter
                prompt: Gap extension penalty
                name: e_extension
                argpos: '7'
                format: {python: '("", " -extension=" + str(value))[value is not None
                        and value!=vdef]'}
                precond:
                    e_type: {'#ne': F}
                type: {_type: FloatType, default: 0.3}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '8'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: prophecy.e_outfile}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '9'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
operations: ['EDAM_operation:0296']
topics: ['EDAM_topic:0188']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/prophecy.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: prophecy
command: {path: null, value: prophecy}
