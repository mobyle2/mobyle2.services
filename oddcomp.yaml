_type: Program
name: oddcomp
title: oddcomp
description: Identify proteins with specified sequence word composition
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2976
        -   _type: InputProgramParameter
            comment: This is a file in the format of the output produced by 'compseq'
                that is used to set the minimum frequencies of words in  this analysis.
            prompt: Program compseq output file
            name: e_infile
            simple: true
            argpos: '2'
            format: {python: '("", " -infile=" + str(value))[value is not None]'}
            mandatory: true
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            comment: Set this option on (Y) if you want the window size to be set
                to the length of the current protein. Otherwise, leave this  option
                unset, in which case you'll be prompted for a window size  to use.
            prompt: Set window size to length of current protein
            name: e_fullwindow
            argpos: '3'
            format: {python: '("", " -fullwindow")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "This is the size of window in which to count. \n Thus if you\
                \ want to count frequencies in a 40 aa stretch you  should enter 40\
                \ here."
            prompt: Window size to consider (e.g. 30 aa) (value greater than or equal
                to 10)
            name: e_window
            ctrl:
            -   message: Value greater than or equal to 10 is required
                test:
                    value: {'#gte': '10'}
            argpos: '4'
            format: {python: '("", " -window=" + str(value))[value is not None and
                    value!=vdef]'}
            precond: {'#not': e_fullwindow}
            type: {_type: IntegerType, default: 30}
    -   _type: InputParagraph
        prompt: Advanced section
        name: e_advanced
        children:
        -   _type: InputProgramParameter
            comment: "The amino acid code B represents Asparagine or Aspartic acid\
                \ and the code Z represents Glutamine or Glutamic acid. \n  These\
                \ are not commonly used codes and you may wish not to count  words\
                \ containing them, just noting them in the count of 'Other'  words."
            prompt: Ignore the amino acids b and z and just count them as 'other'
            name: e_ignorebz
            argpos: '5'
            format: {python: '(" -noignorebz", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            comment: This is the results file.
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '6'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: outfile.oddcomp}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '7'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
operations: ['EDAM_operation:0378']
topics: ['EDAM_topic:0157']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/oddcomp.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: oddcomp
command: {path: null, value: oddcomp}
