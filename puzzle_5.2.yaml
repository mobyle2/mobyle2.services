_type: Program
name: puzzle
version: '5.2'
title: Tree-Puzzle
description: Maximum likelihood analysis for nucleotide, amino-acid and two state
    data
authors: Heiko A. Schmidt, Korbinian Strimmer and Arndt von Haeseler
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: stdinput
        argpos: '2'
        format: {perl: '" < puzzle.params"', python: '" < puzzle.params"'}
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"y\\n"', python: '"y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: puzzle.params
    -   _type: InputProgramParameter
        prompt: Alignment File
        name: infile
        simple: true
        argpos: '1'
        format: {perl: '" $infile"', python: '" " + str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1955']
            data_terms: EDAM_data:0863
    -   _type: InputParagraph
        prompt: General options
        name: general_options
        children:
        -   _type: InputProgramParameter
            comment: Allows to switch between tree reconstruction/analysis by maximum
                likelihood and likelihood mapping.
            prompt: Type of analysis? (b)
            name: analysis_type
            simple: true
            type: {_type: StringType, default: '1'}
            paramfile: puzzle.params
        -   _type: InputParagraph
            prompt: Both Tree reconstruction and Likelihood mapping options
            name: both_options
            children:
            -   _type: InputProgramParameter
                comment: Determines whether an approximate or the exact likelihood
                    function is used to estimate parameters of the models of sequence
                    evolution. The approximate likelihood function is in most cases
                    sufficient and is faster.
                prompt: Parameter estimates? (e)
                name: parameter_estimates
                simple: true
                type: {_type: StringType, default: '1'}
                paramfile: puzzle.params
            -   _type: InputProgramParameter
                comment: Selects the methods used in the estimation of the model parameters.
                    Neighbor-joining tree means that a NJ tree is used to estimate
                    the parameters. Quartet sampling means that a number of random
                    sets of four sequences are selected to estimate parameters.
                prompt: Parameter estimation uses? (x)
                name: parameter_estimation
                simple: true
                type: {_type: StringType, default: '1'}
                paramfile: puzzle.params
        -   _type: InputParagraph
            prompt: Likelihood mapping options
            name: likelihood_options
            precond: {analysis_type: '2'}
            children:
            -   _type: InputProgramParameter
                comment: 'If tree reconstruction is selected: number of puzzling steps.
                    Parameter of the quartet puzzling tree search. Generally, the
                    more sequences are used the more puzzling steps are advised. The
                    default value varies depending on the number of sequences (at
                    least 1000).If likelihood mapping is selected: number of qua rtets
                    in a likelihood mapping analysis. Equal to the number of dots
                    in the likelihood mapping diagram. By default 10000 dots/quartets
                    are assumed. To use all possible quartets in clustered likelihood
                    mapping you have to specify a value of n=0.'
                prompt: Number of quartets? (n)
                name: quartet
                format: {perl: '(defined $value and $value != $vdef)? "n\\n$value\\n"
                        : ""', python: '( "" , "n\n" + str(value) + "\n" )[ value
                        is not None and value != vdef]'}
                type: {_type: IntegerType, default: 10000}
                paramfile: puzzle.params
        -   _type: InputParagraph
            prompt: Tree reconstruction options
            name: reconstruction_options
            precond: {analysis_type: '1'}
            children:
            -   _type: InputProgramParameter
                comment: Determines how the overall tree is obtained. The topology
                    is either computed with the quartet puzzling algorithm or a set
                    of trees is provided by the user. If there are more than two trees
                    in such a set, maximum likelihood branch lengths will be computed
                    for this tree and a number of tests (KH-test, SH-test, and ELW)
                    will be performed on the trees by default. Instead of the evaluation
                    a consensus can be computed for all the trees for which ML branch
                    lengths and ML value are estimated. Alternatively, a maximum likelihood
                    distance matrix only can also be computed (no overall tree).
                prompt: Tree search procedure? (k)
                name: tree_search
                type: {_type: StringType, default: '1'}
                paramfile: puzzle.params
            -   _type: InputProgramParameter
                prompt: User Tree file
                name: tree_file
                argpos: '2000'
                format: {perl: '(defined $value)? "$tree_file\\n" : ""', python: '(
                        "" , str(value) +"\n" )[ value is not None ]'}
                precond:
                    '#or':
                    - {tree_search: '3'}
                    - {tree_search: '2'}
                mandatory: true
                type:
                    _type: FormattedType
                    format_terms: ['EDAM_format:1910']
                    data_terms: EDAM_data:0872
                paramfile: puzzle.params
            -   _type: InputProgramParameter
                comment: Computation of clock-like maximum likelihood branch lengths.
                    This option also invokes the likelihood ratio clock test.
                prompt: Compute clocklike branch lengths? (z)
                name: clocklike
                format: {perl: '($value)? "z\\n" : ""', python: '( "" , "z\n" )[ value
                        ]'}
                precond:
                    tree_search: {'#ne': '4'}
                type: {_type: BooleanType, default: false}
                paramfile: puzzle.params
            -   _type: InputProgramParameter
                comment: Location of root. Only for computation of clock-like maximum
                    likelihood branch lengths. Allows to specify the branch where
                    the root should be placed in an unrooted tree topology. For example,
                    in the tree (a,b,(c,d)) l = 1 places the root at the branch leading
                    to sequence a whereas l=5 places the root at the internal branch.
                prompt: Enter an invalid branch number to search for the best location
                    despite of automatic search (l)
                name: invalid
                format: {perl: '(defined $value)? "l\\n$value\\n" : ""', python: '(
                        "" , "l\n" + str(value) + "\n" )[ value is not None]'}
                precond:
                    '#and':
                    -   tree_search: {'#ne': '4'}
                    - clocklike
                type: {_type: IntegerType}
                paramfile: puzzle.params
            -   _type: InputParagraph
                prompt: Quartet puzzling options
                name: quartet_options
                children:
                -   _type: InputProgramParameter
                    comment: For the quartet puzzling tree search only. Only for very
                        small data sets it is necessary to compute an exact maximum
                        likelihood. For larger data sets this option should always
                        be turned on.
                    prompt: Approximate quartet likelihood (v)
                    name: approximate
                    format: {perl: '($value)? "" : "v\\n"', python: '( "v\n" , ""
                            )[ value ]'}
                    type: {_type: BooleanType, default: false}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    comment: Show unresolved quartets. During the quartet puzzling
                        tree search TREE-PUZZLE counts the number of unresolved quartet
                        trees. An unresolved quartet is a quartet where the maximum
                        likelihood values for each of the three possible quartet topologies
                        are so similar that it is not possible to prefer one of them
                        (Strimmer et al., 1997). If this option is selected you will
                        get a detailed list of all star-like quartets. Note, for some
                        data sets there may be a lot of unresolved quartets. In this
                        case a list of all unresolved quartets is probably not very
                        useful and also needs a lot of disk space.
                    prompt: List unresolved quartets? (u)
                    name: unresolved
                    format: {perl: '($value)? "u\\n" : ""', python: '( "" , "u\n"
                            )[ value ]'}
                    type: {_type: BooleanType, default: false}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    comment: 'If tree reconstruction is selected: number of puzzling
                        steps. Parameter of the quartet puzzling tree search. Generally,
                        the more sequences are used the more puzzling steps are advised.
                        The default value varies depending on the number of sequences
                        (at least 1000).If likelihood mapping is selected: number
                        of quartets in a likelihood mapping analysis. Equal to the
                        number of dots in the likelihood mapping diagram. By default
                        10000 dots/quartets are assumed. To use all possible quartets
                        in clustered likelihood mapping you have to specify a value
                        of n=0.'
                    prompt: Number of puzzling steps (n)
                    name: puzzling_step
                    format: {perl: '(defined $value and $value != $vdef)? "n\\n$value\\n"
                            : ""', python: '( "" , "n\n" + str(value) + "\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: IntegerType, default: 1000}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    comment: Writes all intermediate trees (puzzling step trees) used
                        to compute the quartet puzzling tree into a file, either as
                        a list of topologies ordered by number of occurrences (*.ptorder),
                        or as list about the chronological occurrence of the topologies
                        (*.pstep), or both.
                    prompt: List puzzling step trees? (j)
                    name: list_puzzling
                    type: {_type: StringType, default: '1'}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    comment: For displaying purposes of the unrooted quartet puzzling
                        tree only. The default outgroup is the first sequence of the
                        data set.
                    prompt: Display as outgroup? (o)
                    name: output
                    format: {perl: '(defined $value and $value != $vdef)? "o\\n$value\\n"
                            : ""', python: '( "" , "o\n" + str(value) + "\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: IntegerType, default: 1}
                    paramfile: puzzle.params
    -   _type: InputParagraph
        prompt: Substitution process options
        name: substitution_options
        children:
        -   _type: InputProgramParameter
            comment: 'Specifies whether nucleotide, amino acid sequences, or twostate
                data serve as input. The default is automatically set by inspection
                of the input data. After TREE-PUZZLE has selected an appropriate data
                type (marked by ?Auto:?) the ?d?-option changes the type in the following
                order: automatically selected type ! Nucleotides ! Amino acids ! automatically
                selected type.'
            prompt: Type of sequence input data? (d)
            name: seqtype
            argpos: '-10'
            mandatory: true
            type: {_type: StringType, default: '1'}
            paramfile: puzzle.params
        -   _type: InputParagraph
            prompt: Amino acids options
            name: protein_options
            precond: {seqtype: '2'}
            children:
            -   _type: InputProgramParameter
                comment: For amino acid sequence data the Dayhoff et al. (Dayhoff)
                    model, the Jones et al. (JTT) model, the Adachi and Hasegawa (mtREV24)
                    model, the Henikoff and Henikoff (BLOSUM 62), the Muller and Vingron
                    (VT), and theWhelan and Goldman (WAG) substitution model are implemented
                    in TREE-PUZZLE.The mtREV24 model describes the evolution of amino
                    acids encoded on mtDNA, and BLOSUM 62 is for distantly related
                    amino acid sequences, as well as the VT model.
                prompt: Model of substitution for protein (m)
                name: protein_model
                type: {_type: StringType, default: '1'}
                paramfile: puzzle.params
            -   _type: InputProgramParameter
                comment: The maximum likelihood calculation needs the frequency of
                    each nucleotide (amino acid, doublet) as input. TREE-PUZZLE estimates
                    these values from the sequence input data. This option allows
                    specification of other values.
                prompt: Use specified Amino acid frequencies (in %) (f)
                name: prot_freq
                argpos: '50'
                format: {perl: '($value)? "f\\n" : ""', python: '( ""  , "f\n" )[
                        value ]'}
                type: {_type: BooleanType, default: false}
                paramfile: puzzle.params
            -   _type: InputParagraph
                prompt: Values of specified amino acid frequencies (in %)
                name: specified_prot_freq
                precond: prot_freq
                children:
                -   _type: InputProgramParameter
                    prompt: pi (A)
                    name: a_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (R)
                    name: r_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (N)
                    name: n_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (D)
                    name: d_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (C)
                    name: c_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (Q)
                    name: q_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (E)
                    name: e_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (G)
                    name: g_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (H)
                    name: h_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (I)
                    name: i_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (L)
                    name: l_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (K)
                    name: k_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (M)
                    name: m_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (F)
                    name: f_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (P)
                    name: p_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (S)
                    name: s_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (T)
                    name: t_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (W)
                    name: w_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (Y)
                    name: y_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
        -   _type: InputParagraph
            prompt: DNA options
            name: dna_options
            precond: {seqtype: '1'}
            children:
            -   _type: InputProgramParameter
                comment: 'The following models are implemented for nucleotides: the
                    general time reversible model (Tavaree, 1986, GTR, e.g.,) model,
                    the Tamura and Nei (TN) model, the Hasegawa et al. (HKY) model,
                    and the Schroniger and von Haeseler (SH) model.The SH model describes
                    the evolution of pairs of dependent nucleotides (pairs are the
                    first and the second nucleotide, the third and the fourth nucleotide
                    and so on). It allows for specification of the transition-transversion
                    ratio.The original model (Schroniger and von Haeseler, 1994) is
                    obtained by setting the transition-transversion parameter to 0.5.The
                    Jukes and Cantor (1969), the Felsenstein (1981), and the Kimura
                    (1980) model are all special cases of the HKY model.'
                prompt: Model of substitution for DNA (m)
                name: dna_model
                argpos: '10'
                type: {_type: StringType, default: '1'}
                paramfile: puzzle.params
            -   _type: InputParagraph
                prompt: GTR model rates
                name: GTR_options
                precond: {dna_model: '4'}
                children:
                -   _type: InputProgramParameter
                    prompt: A-C rate (1)
                    name: GTR_acrate
                    argpos: '11'
                    format: {perl: '(defined $value and $value != $vdef) ? "1\\n$value\\n"
                            : ""', python: '( "" , "1\n"+ str(value) + "\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: FloatType, default: 1.0}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: A-G rate (2)
                    name: GTR_agrate
                    format: {perl: '(defined $value and $value != $vdef) ? "2\\n$value\\n"
                            : ""', python: '( "" , "2\n"+ str(value) + "\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: FloatType, default: 1.0}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: A-T rate (3)
                    name: GTR_atrate
                    format: {perl: '(defined $value and $value != $vdef) ? "3\\n$value\\n"
                            : ""', python: '( "" , "3\n"+ str(value) + "\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: FloatType, default: 1.0}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: C-G rate (4)
                    name: GTR_cgrate
                    format: {perl: '(defined $value and $value != $vdef) ? "4\\n$value\\n"
                            : ""', python: '( "" , "4\n"+ str(value) + "\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: FloatType, default: 1.0}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: C-T rate (5)
                    name: GTR_ctrate
                    format: {perl: '(defined $value and $value != $vdef) ? "5\\n$value\\n"
                            : ""', python: '( "" , "5\n" + str(value) +"\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: FloatType, default: 1.0}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: G-T rate (6)
                    name: GTR_gtrate
                    format: {perl: '(defined $value and $value != $vdef) ? "6\\n$value\\n"
                            : ""', python: '( "" , "6\n" + str(value) +"\n" )[ value
                            is not None and value != vdef]'}
                    type: {_type: FloatType, default: 1.0}
                    paramfile: puzzle.params
            -   _type: InputParagraph
                prompt: SH model rates
                name: SH_options
                precond: {dna_model: '4'}
                children:
                -   _type: InputProgramParameter
                    comment: This option is only available for the SH model. With
                        this option the doublet frequencies are symmetrized. For example,
                        the frequencies of ?AT? and ?TA? are then set to the average
                        of both frequencies.
                    prompt: Symmetrize doublet frequencies (s)
                    name: symmetrize_frequencies
                    argpos: '11'
                    format: {perl: '($value)? "s\\n" : ""', python: '( "" , "s\n"
                            )[ value ]'}
                    type: {_type: BooleanType, default: false}
                    paramfile: puzzle.params
            -   _type: InputParagraph
                prompt: TN model options
                name: TN_options
                precond: {dna_model: '2'}
                children:
                -   _type: InputProgramParameter
                    comment: This option is only available for the Tamura-Nei model.
                        With this option the expected (!) transition-transversion
                        ratio for the F84 model have to be entered and TREE-PUZZLE
                        computes the corresponding parameters of the TN model (this
                        depends on base frequencies of the data). This allows to compare
                        the results of TREE-PUZZLE and the PHYLIP maximum likelihood
                        programs which use the F84 model.
                    prompt: Constrain TN model to F84 model (p)
                    name: constrain_TN
                    argpos: '11'
                    format: {perl: '($value)? "p\\n" : ""', python: '( "" , "p\n"
                            )[ value ]'}
                    mandatory: true
                    type: {_type: BooleanType, default: false}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: Expected F84 Transition/transversion ratio
                    name: f84_ratio
                    argpos: '12'
                    format: {perl: '(defined $value)? "$value\\n" : ""', python: '(
                            "" , str(value) + "\n" )[ value is not None]'}
                    precond: constrain_TN
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    comment: This option is only available for the TN model. This
                        parameter is the ratio of the rates for pyrimidine transitions
                        and purine transitions. You do not need to specify this parameter
                        as TREE-PUZZLE estimates it from the data. For precise definition
                        please read the section in this manual about models of sequence
                        evolution.
                    prompt: Y/R transition parameter (r)
                    name: y_r
                    argpos: '13'
                    format: {perl: '(defined $value)? "r\\n$value\\n" : ""', python: '(
                            "" , "r\n" + str(value) +"\n" )[ value is not None ]'}
                    type: {_type: FloatType}
                    paramfile: puzzle.params
            -   _type: InputProgramParameter
                comment: For nucleotide data only. You do not need to specify this
                    parameter as TREE-PUZZLE estimates it from the data. The precise
                    definition of this parameter is given in the section on models
                    of sequence evolution in this manual.
                prompt: Transition/transversion ratio (t)
                name: ratio
                format: {perl: '(defined $value) ? "t\\n$value\\n" : ""', python: '(
                        "" , "t\n" + str(value) + "\n" )[ value is not None ]'}
                precond:
                    dna_model: {'#ne': '3'}
                type: {_type: FloatType}
                paramfile: puzzle.params
            -   _type: InputParagraph
                prompt: Base frequencies (in %) (f)
                name: nuc_freq
                children:
                -   _type: InputProgramParameter
                    comment: The maximum likelihood calculation needs the frequency
                        of each nucleotide (amino acid, doublet) as input. TREE-PUZZLE
                        estimates these values from the sequence input data. This
                        option allows specification of other values.
                    prompt: Use specified values?
                    name: use_specified_nuc
                    argpos: '50'
                    format: {perl: '($value)? "f\\n" : ""', python: '( ""  , "f\n"
                            )[ value ]'}
                    type: {_type: BooleanType, default: false}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (A)
                    name: a_nuc_freq
                    argpos: '51'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    precond: use_specified_nuc
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (C)
                    name: c_nuc_freq
                    argpos: '52'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    precond: use_specified_nuc
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
                -   _type: InputProgramParameter
                    prompt: pi (G)
                    name: g_nuc_freq
                    argpos: '53'
                    format: {perl: '"$value\\n"', python: str(value) + "\n"}
                    precond: use_specified_nuc
                    mandatory: true
                    type: {_type: FloatType}
                    paramfile: puzzle.params
    -   _type: InputParagraph
        prompt: Rate heterogeneity options
        name: rate_options
        children:
        -   _type: InputProgramParameter
            comment: 'TREE-PUZZLE provides several different models of rate heterogeneity:
                uniform rate over all sites (rate homogeneity), Gamma distributed
                rates, two rates (1 invariable + 1 variable), and a mixed model (1
                invariable rate + Gamma distributed rates). All necessary parameters
                can be estimated by TREE-PUZZLE. Note that whenever invariable sites
                are taken into account the parameter estimation will invoke the ?e?
                option to use an exact likelihood function. For more detailed information
                please read the section in this manual about models of sequence evolution.
                See also option ?m? (model of substitution).'
            prompt: Model of rate heterogeneity (w)
            name: rate_heterogeneity
            argpos: '20'
            type: {_type: StringType, default: '1'}
            paramfile: puzzle.params
        -   _type: InputProgramParameter
            comment: This is the so-called shape parameter of the Gamma distribution.
            prompt: Gamma rate heterogeneity parameter alpha (a)
            name: alpha
            argpos: '21'
            format: {perl: '(defined $value)? "a\\n$value\\n" : ""', python: '( ""
                    , "a\n" + str(value) +"\n" )[ value is not None ]'}
            precond:
                '#or':
                - {rate_heterogeneity: '2'}
                - {rate_heterogeneity: '4'}
            type: {_type: FloatType}
            paramfile: puzzle.params
        -   _type: InputProgramParameter
            comment: Number of rate categories (4-16) for the discrete Gamma distribution
                (rate heterogeneity).
            prompt: Number of Gamma rate categories (c)
            name: gamma_number
            argpos: '21'
            format: {perl: '(defined $value and $value != $vdef)? "c\\n$value\\n"
                    : ""', python: '( "" , "c\n" + str(value) +"\n" )[ value is not
                    None and value != vdef]'}
            precond:
                '#or':
                - {rate_heterogeneity: '2'}
                - {rate_heterogeneity: '4'}
            type: {_type: IntegerType, default: 8}
            paramfile: puzzle.params
        -   _type: InputProgramParameter
            comment: Probability of a site to be invariable. This parameter can be
                estimated from the data by TREE-PUZZLE (only if the approximation
                option for the likelihood function is turned off).
            prompt: Fraction of invariable sites (i)
            name: invariable
            argpos: '21'
            format: {perl: '(defined $value)? "i\\n$value\\n" : ""', python: '( ""
                    , "i\n" + str(value) +"\n" )[ value is not None ]'}
            precond:
                '#or':
                - {rate_heterogeneity: '3'}
                - {rate_heterogeneity: '4'}
            type: {_type: FloatType}
            paramfile: puzzle.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Output file
        name: outfile
        filenames: {perl: '"$infile.puzzle"', python: str(infile) + ".puzzle"}
    -   _type: OutputProgramParameter
        prompt: Output tree
        name: outtree
        filenames: {perl: '"$infile.tree"', python: str(infile) + ".tree"}
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
    -   _type: OutputProgramParameter
        prompt: Output distance
        name: outdist
        filenames: {perl: '"$infile.dist"', python: str(infile) + ".dist"}
operations: ['EDAM_operation:0547']
topics: ['EDAM_topic:0084']
references:
- {doi: null, label: 'Strimmer, K., and A. von Haeseler. 1996. Quartet puzzling:A
        quartet maximum likelihood method for reconstructing tree topologies. Mol.
        Biol. Evol. 13: 964-969.', url: null}
documentation_links: ['http://bioweb2.pasteur.fr/docs/puzzle/tree-puzzle.pdf']
homepage_links: ['http://www.tree-puzzle.de/']
public_name: puzzle
command: {path: null, value: puzzle}
source_links: ['http://www.tree-puzzle.de/']
