_type: Program
name: bambe
version: '4.01'
title: BAMBE
description: Bayesian Analysis in Molecular Biology and Evolution
authors: Simon, Larget
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: bambe
        argpos: '0'
        format: {perl: '"bambe <bambe.params"', python: '"bambe <bambe.params"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        prompt: Alignment file (data-file)
        name: data_file
        simple: true
        argpos: '6'
        format: {perl: '"data-file=$value\\n"', python: '"data-file="+str(value)+"\n"'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1982']
            data_terms: EDAM_data:1383
        paramfile: bambe.params
    -   _type: InputParagraph
        prompt: Run characteristics
        name: run_options
        children:
        -   _type: InputProgramParameter
            prompt: Seed for random number generator (seed)
            name: seed
            format: {perl: '(defined $value and $value != $vdef) ? "seed=$value\\n"
                    : ""', python: '("", "seed="+str(value)+"\n")[value is not None
                    and value!=vdef]'}
            type: {_type: IntegerType, default: 194024933}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Number of cycles to run the main algorithm (cycles)
            name: cycles
            format: {perl: '(defined $value and $value != $vdef) ?"cycles=$value\\n"
                    : ""', python: '("", "cycles="+str(value)+"\n")[value is not None
                    and value!=vdef]'}
            type: {_type: IntegerType, default: 1000}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: Also used for updating the window size during burn-in.
            prompt: Number of cycles between printing trees to output (window-interval)
            name: window_interval
            format: {perl: '(defined $value and $value != $vdef) ? "window-interval=$value\\n"
                    : ""', python: '("", "window-interval="+str(value)+"\n")[value
                    is not None and value!=vdef]'}
            type: {_type: IntegerType, default: 200}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Algorithm to run during production cycles (main-algorithm)
            name: main_algorithm
            format: {perl: '(defined $value and $value ne $vdef) ? "main-algorithm=$value\\n"
                    : ""', python: '("", "main-algorithm="+str(value)+"\n")[value
                    is not None and value != vdef]'}
            type:
                _type: StringType
                default: local
                options:
                - {label: Global, value: global}
                - {label: Local, value: local}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: Parameter values are not updated during burn. User should discard
                these cycles and the initial cycles of the main algorithm before inference.
            prompt: Number of cycles to run the burn algorithm (burn)
            name: burn
            format: {perl: '(defined $value and $value != $vdef) ? "burn=$value\\n"
                    : ""', python: '("", "burn="+str(value)+"\n")[value is not None
                    and value!=vdef]'}
            type: {_type: IntegerType, default: 1000}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Algorithm to run during burn (burn-algorithm)
            name: burn_algorithm
            format: {perl: '(defined $value and $value ne $vdef) ? "burn-algorithm=$value\\n"
                    : ""', python: '("","burn-algorithm="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            type:
                _type: StringType
                default: global
                options:
                - {label: Global, value: global}
                - {label: Local, value: local}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Use scaled beta distribution modification of the local algorithm
                (use-beta)
            name: use_beta
            format: {perl: '($value) ? "use-beta=true\\n" : ""', python: '("", "use-beta=true\n")[
                    value ]'}
            precond:
                '#or':
                - {main_algorithm: local}
                - {burn_algorithm: local}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
    -   _type: InputParagraph
        prompt: Model specification
        name: model_options
        children:
        -   _type: InputProgramParameter
            prompt: Use a molecular clock (molecular-clock)
            name: molecular_clock
            format: {perl: '($value) ? "" :"molecular-clock=false\\n"', python: '("molecular-clock=false\n",
                    "")[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Likelihood model (likelihood-model)
            name: likelihood_model
            format: {perl: '(defined $value and $value ne $vdef) ? "likelihood-model=$value\\n"
                    : ""', python: '("", "likelihood-model="+str(value)+"\n")[value
                    is not None and value!=vdef]'}
            type:
                _type: StringType
                default: HKY85
                options:
                - {label: 'Hasegawa, Kishino, Yano (HKY85)', value: HKY85}
                - {label: Felsenstein's PHYLIP (F84), value: F84}
                - {label: Tamura-Nei (TN93), value: TN93}
                - {label: Hayley (GREV), value: GREV}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: Each category has its own set of parameters. Each category is
                denoted by a positive integer between 1 and 10. A comma-separated
                list gives the categories of the sites in order, e.g., 1,2,3,1,3 means
                that the first site is in category 1, the second in 2, the third in
                3, the fourth in 1, and the fifth site is in category 3.A repeat count
                is indicated by a caret (^). For example, 1^20,2^5,3^2 means that
                the first twenty sites are in category 1, the next five sites are
                in 2, and the next two sites are in category 3.Parentheses may be
                used to group sites together with a common repeat count, i.e., (1,2)^5
                is the same as 1,2,1,2,1,2,1,2,1,2. Repeat counts may be nested, e.g.,
                (1^3,2)^2 is the same as 1,1,1,2,1,1,1,2.Repetition to the end of
                the list of sites is indicated by an asterisk (*). For example, 1^5,2*
                means that the first five sites are in category 1, and all the remaining
                sites are in category 2. Parentheses may also be used in conjunction
                with the asterisk, e.g., (1,2)* is the same as 1,2,1,2,1,2,.... The
                category list may contain at most one asterisk and it must be associated
                with the last category or group in the list. In other words, an asterisk
                may appear only at the end of the list.Examples1* - all sites are
                the same category. (default)(1,2,3)* - all sites are partitioned by
                codon position.1^99,2^50,3^9 - the sites are divided over three genes.
                Each gene has its own set of parameters used by all sites in that
                gene. The first gene is composed of the first ninety-nine sites, the
                next by the next fifty sites, and the last by nine sites.
            prompt: A valid category list (category-list)
            name: category_list
            format: {perl: '(defined $value) ? "category-list=$value\\n" :""', python: '("",
                    "category-list="+str(value)+"\n" )[value is not None]'}
            type: {_type: StringType}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: If true, the same kappa parameter is used for all site categories.
                If false, there are different values for different site categories.
                It has no effect if there is only one rate category.
            prompt: Single kappa (single-kappa)
            name: single_kappa
            format: {perl: '($value) ? "single-kappa=true\\n" : ""', python: '("",
                    "single-kappa=true\n")[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: If single-kappa is true, a warning is given if more than one
                value is specified. The first value will be used. If single-kappa
                is false, a value must be specified for each category in use.
            prompt: Comma separated list of positive kappa values for each site category
                (initial-kappa)
            name: initial_kappa
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-kappa=$value\\n"
                    : ""', python: '("", "initial-kappa="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond:
                '#or':
                - {likelihood_model: HKY85}
                - {likelihood_model: F84}
            type: {_type: StringType, default: '7.5,2.5,10.75'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: The weighted average of these values should be 1, with weights
                given by the proportion of sites in each site category. (Renormalization
                is automatic and a warning given if the condition fails.) If there
                are an equal number of sites in each category, for example, the numbers
                should average to 1.
            prompt: Comma separated list of positive theta values for each site category
                (initial-theta)
            name: initial_theta
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-theta=$value\\n"
                    : ""', python: '("", "initial-theta="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            type: {_type: StringType, default: '1.4,1.0,8.3'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: If true, the initial stationary probabilities for each base in
                each category are estimated by the relative frequencies with which
                they appear in the data.
            prompt: Use empirical relative frequencies (estimate-pi)
            name: estimate_pi
            format: {perl: '($value) ? "" : "estimate-pi=false\\n"', python: '("estimate-pi=false\n","")[
                    value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Comma separated list of initial pi value of base A (initial-pia)
            name: initial_pia
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-pia=$value\\n"
                    : ""', python: '("", "initial-pia="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {'#not': estimate_pi}
            type: {_type: StringType, default: '0.25,0.25,0.25'}
        -   _type: InputProgramParameter
            prompt: Comma separated list of initial pi value of base G (initial-pig)
            name: initial_pig
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-pig=$value\\n"
                    : ""', python: '("", "initial-pig="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {'#not': estimate_pi}
            type: {_type: StringType, default: '0.25,0.25,0.25'}
        -   _type: InputProgramParameter
            prompt: Comma separated list of initial pi value of base C (initial-pic)
            name: initial_pic
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-pic=$value\\n"
                    : ""', python: '("", "initial-pic="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {'#not': estimate_pi}
            type: {_type: StringType, default: '0.25,0.25,0.25'}
        -   _type: InputProgramParameter
            prompt: Comma separated list of initial pi value of base T (initial-pit)
            name: initial_pit
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-pit=$value\\n"
                    : ""', python: '("","initial-pit="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond: {'#not': estimate_pi}
            type: {_type: StringType, default: '0.25,0.25,0.25'}
        -   _type: InputProgramParameter
            comment: This is used only with TN93. There must be a value specified
                for each site-category used if TN93 is the chosen model.
            prompt: Comma separated list of positive transition/transversion parameter
                values (TN93 model) (initial-ttp)
            name: initial_ttp
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-ttp=$value\\n"
                    : ""', python: '("", "initial-ttp="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: TN93}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This is used only with TN93. There must be a value specified
                for each site-category used if TN93 is the chosen model.
            prompt: Comma separated list of positive gamma values (TN93 model) (initial-gamma)
            name: initial_gamma
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-gamma=$value\\n"
                    : ""', python: '("", "initial-gamma="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: TN93}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This is used only with GREV model.
            prompt: Comma separated list of positive r values for AC bases(GREV model)
                (initial-rac)
            name: initial_Rac
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-rac=$value\\n"
                    : ""', python: '("", "initial-rac="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: GREV}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This is used only with GREV model.
            prompt: Comma separated list of positive r values for AG  (GREV model)
                (initial-rag)
            name: initial_Rag
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-rag=$value\\n"
                    : ""', python: '("", "initial-rag="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: GREV}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This is used only with GREV model.
            prompt: Comma separated list of positive r values for AT (GREV model)
                (initial-rat)
            name: initial_Rat
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-rat=$value\\n"
                    : ""', python: '("", "initial-rat="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: GREV}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This is used only with GREV model.
            prompt: Comma separated list of positive r values for CG (GREV model)
                (initial-rcg)
            name: initial_Rcg
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-rcg=$value\\n"
                    : ""', python: '("", "initial-rcg="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: GREV}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This is used only with GREV model.
            prompt: Comma separated list of positive r values for CT (GREV model)
                (initial-rct)
            name: initial_Rct
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-rct=$value\\n"
                    : ""', python: '("", "initial-rct="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: GREV}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This is used only with GREV model.
            prompt: Comma separated list of positive r values for GT  (GREV model)
                (initial-rct)
            name: initial_Rgt
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-rgt=$value\\n"
                    : ""', python: '("", "initial-rgt="+str(value)+"\n")[value is
                    not None and value!=vdef]'}
            precond: {likelihood_model: GREV}
            type: {_type: StringType, default: '1.0,1.0,1.0'}
            paramfile: bambe.params
    -   _type: InputParagraph
        prompt: Parameter updating
        name: param_update
        children:
        -   _type: InputProgramParameter
            comment: During the main algorithm, any 'on' parameters are updated at
                each cycle divisible by this value. Use zero for no parameter updating.
            prompt: Parameter update interval (parameter-update-interval)
            name: parameter_update_interval
            format: {perl: '(defined $value and $value != $vdef) ? "parameter-update-interval=$value\\n"
                    : ""', python: '("", "parameter-update-interval="+str(value)+"\n")[value
                    is not None and value!=vdef]'}
            type: {_type: IntegerType, default: 1}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Update kappa value (update-kappa)
            name: update_kappa
            format: {perl: '($value) ? "" : "update-kappa=false\\n"', python: '("update-kappa=false\n",
                    "")[ value ]'}
            precond:
                '#or':
                - {likelihood_model: HKY85}
                - {likelihood_model: F84}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Update theta value (update-theta)
            name: update_theta
            format: {perl: '($value) ? "" : "update-theta=false\\n"', python: '("update-theta=false\n",
                    "")[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Update pi value (update-pi)
            name: update_pi
            format: {perl: '($value) ? "" : "update-pi=false\\n"', python: '("update-pi=false\n",
                    "")[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Update ttp value (TN93 model) (update-ttp)
            name: update_ttp
            format: {perl: '($value) ? "" : "update-ttp=false\\n"', python: '("update-ttp=false\n",
                    "")[ value ]'}
            precond: {likelihood_model: TN93}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Update gamma value for (TN93 model) (update-gamma)
            name: update_gamma
            format: {perl: '($value) ? "" : "update-gamma=false\\n"', python: '("update-gamma=false\n",
                    "")[ value ]'}
            precond: {likelihood_model: TN93}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Update grev (GREV model) (update-grev)
            name: update_grev
            format: {perl: '($value) ? "" : "update-grev=false\\n"', python: '("update-grev=false\n",
                    "")[ value ]'}
            precond: {likelihood_model: GREV}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Update invariant probability (update-invariant-prob)
            name: update_invariant_prob
            format: {perl: '($value) ? "update-invariant-prob=true\\n" : ""', python: '("",
                    "update-invariant-prob=true\n")[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This tuning parameter is only used with the local algorithm.
                It modulates the size of a maximal stretch. The smaller the value,
                the greater the tree acceptance rate will be.
            prompt: Stretch parameter for local (local-tune)
            name: local_tune
            format: {perl: '(defined $value and $value != $vdef) ? "local-tune=$value\\n"
                    : ""', python: '("", "local-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond:
                '#or':
                - {burn_algorithm: local}
                - {main_algorithm: local}
            type: {_type: FloatType, default: 0.19}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: Tuning parameter used during update of theta value(s). The larger
                its value, the more likely proposals are to be accepted.
            prompt: Dirichlet parameter for theta update (theta-tune)
            name: theta_tune
            format: {perl: '(defined $value and $value != $vdef) ? "theta-tune=$value\\n"
                    : ""', python: '("","theta-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond:
                '#and':
                -   parameter_update_interval: {'#ne': '0'}
                - update_theta
            type: {_type: FloatType, default: 2000.0}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: Tuning parameter used during update of pi values. The larger
                its value, the more likely proposals are to be accepted.
            prompt: Dirichlet parameter for pi update (pi-tune)
            name: pi_tune
            format: {perl: '(defined $value and $value != $vdef) ? "pi-tune=$value\\n"
                    : ""', python: '("", "pi-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond:
                '#and':
                -   parameter_update_interval: {'#ne': '0'}
                - update_pi
            type: {_type: FloatType, default: 2000.0}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This tuning parameter is only used when 'parameter-update-interval'
                is positive and 'update-kappa' is true. The smaller its value, the
                greater the parameter acceptance rate will be.
            prompt: Halft the size of the window for uniform updates of kappa (kappa-tune)
            name: kappa_tune
            format: {perl: '(defined $value and $value != $vdef) ? "kappa-tune=$value\\n"
                    : ""', python: '("","kappa-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond:
                '#and':
                -   parameter_update_interval: {'#ne': '0'}
                - update_kappa
                -   '#or':
                    - {likelihood_model: HKY85}
                    - {likelihood_model: F84}
            type: {_type: FloatType, default: 0.2}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This tuning parameter is only used when 'parameter-update-interval'
                is positive and 'update-ttp' is true. The smaller its value, the greater
                the parameter acceptance rate will be.
            prompt: Halft window width for ttp update (TN93 model) (ttp-tune)
            name: ttp_tune
            format: {perl: '(defined $value and $value != $vdef) ? "ttp-tune=$value\\n"
                    : ""', python: '("","ttp-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond:
                '#and':
                -   parameter_update_interval: {'#ne': '0'}
                - update_ttp
                - {likelihood_model: TN93}
            type: {_type: FloatType, default: 0.1}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This tuning parameter is only used when 'parameter-update-interval'
                is positive and 'update-gamma' is true. The smaller its value, the
                greater the parameter acceptance rate will be.
            prompt: Half window width for gamma update (TN93 model) (gamma-tune)
            name: gamma_tune
            format: {perl: '(defined $value and $value != $vdef) ? "gamma-tune=$value\\n"
                    : ""', python: '("","gamma-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond:
                '#and':
                -   parameter_update_interval: {'#ne': '0'}
                - update_gamma
                - {likelihood_model: TN93}
            type: {_type: FloatType, default: 0.1}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Halft window width for grev update (grev-tune)
            name: grev_tune
            format: {perl: '(defined $value and $value != $vdef) ? "grev-tune=$value\\n"
                    : ""', python: '("","grev-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond:
                '#and':
                -   parameter_update_interval: {'#ne': '0'}
                - update_grev
                - {likelihood_model: GREV}
            type: {_type: FloatType, default: 2000.0}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Beta parameter for local update (beta-tune)
            name: beta_tune
            format: {perl: '(defined $value and $value != $vdef) ? "beta-tune=$value\\n"
                    : ""', python: '("","beta-tune="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond: use_beta
            type: {_type: FloatType, default: 10.0}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Halft window width for invariant probability update (invariant-prob-tune)
            name: invariant_prob_tune
            format: {perl: '(defined $value and $value != $vdef) ? "invariant-prob-tune=$value\\n"
                    : ""', python: '("","invariant-prob-tune="+str(value)+"\n")[value
                    is not None and value!=vdef]'}
            precond:
                '#and':
                -   parameter_update_interval: {'#ne': '0'}
                - update_invariant_prob
            type: {_type: FloatType, default: 2000.0}
            paramfile: bambe.params
    -   _type: InputParagraph
        prompt: Output options
        name: output_options
        children:
        -   _type: InputProgramParameter
            comment: During burn and main algorithms, the tree topology, log likelihoods,
                and parameters are written to files at each cycle divisible by this
                value.
            prompt: Sample interval (sample-interval)
            name: sample_interval
            format: {perl: '(defined $value and $value != $vdef) ? "sample-interval=$value\\n"
                    : ""', python: '("","sample-interval="+str(value)+"\n")[value
                    is not None and value!=vdef]'}
            type: {_type: IntegerType, default: 200}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: Indicates the format of the tree to read (if not random) and
                the format of the tree to print after the run.
            prompt: Newick format of tree file (newick-format)
            name: newick_format
            format: {perl: '($value) ? "newick-format=false\\n" : ""', python: '("newick-format=false\n",
                    "")[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
    -   _type: InputProgramParameter
        name: file_root
        argpos: '6'
        format: {perl: '"file-root=bambe_results\\n"', python: '"file-root=bambe_results\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: bambe.params
    -   _type: InputParagraph
        prompt: Input options
        name: input_options
        children:
        -   _type: InputProgramParameter
            comment: This is ignored if a molecular clock is assumed. In the absence
                of a clock, trees and tree topologies are printed with the outgroup
                emerging directly from the root.
            prompt: Number of the outgroup (outgroup)
            name: outgroup
            format: {perl: '(defined $value and $value != $vdef) ? "outgroup=$value\\n"
                    : ""', python: '("", "outgroup="+str(value)+"\n")[value is not
                    None and value!=vdef]'}
            precond: molecular_clock
            type: {_type: IntegerType, default: 1}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: If no tree file is given, the program generates a random tree
                from a flat distribution where each labeled history is equally likely.
            prompt: Tree file (tree-file)
            name: tree_file
            format: {perl: '(defined $value) ? "tree-file=$value\\n" : ""', python: '("",
                    "tree-file="+str(value)+"\n")[value is not None]'}
            precond:
                '#or':
                - {initial_tree_type: bambe}
                - {initial_tree_type: newick}
            type: {_type: FormattedType, data_terms: 'EDAM_data:0872'}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: . random select a tree from the prior. upgma sets the initial
                clock tree to the UPGMA tree using maximum likelihood distances with
                the specified model and initial parameter values.. neighbor-joining
                sets the initial nonclock tree to the neigbor joining tree using maximum
                likelihood distances with the specified model and initial parameter
                values.. newick reads in an initial tree in Newick format from a file..
                bambe reads in an initial tree in BAMBE format from a file.
            prompt: Initial tree type (initial-tree-type)
            name: initial_tree_type
            format: {perl: '(defined $value and $value ne $vdef) ? "initial-tree-type=$value\\n"
                    : ""', python: '("", "initial-tree-type="+str(value)+"\n")[value
                    is not None and value != vdef]'}
            type:
                _type: StringType
                default: random
                options:
                - {label: Random, value: random}
                - {label: UPGMA, value: upgma}
                - {label: Neighbor-Joining, value: neighbor-joining}
                - {label: Newick, value: newick}
                - {label: Bambe, value: bambe}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            prompt: Print all trees?(print-all-trees)
            name: print_all_trees
            format: {perl: '($value) ? "" : "print-all-trees=false\\n"', python: '("print-all-trees=false\n",
                    "")[value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: bambe.params
        -   _type: InputProgramParameter
            comment: This parameter is only used to generate an initial random tree.
            prompt: Initial tree height used to generate an initial random tree (max-initial-tree-height)
            name: max_initial_tree_height
            format: {perl: '(defined $value and $value != $vdef) ? "max-initial-tree-height=$value\\n"
                    : ""', python: '("", "max-initial-tree-height="+str(value)+"\n")[value
                    is not None and value!=vdef]'}
            type: {_type: FloatType, default: 0.1}
            paramfile: bambe.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Results files
        name: results_files
        filenames: {perl: '"bambe_results.lpd" and  "bambe_results.par" and  "bambe_results.out"',
            python: '"bambe_results.out"'}
    -   _type: OutputProgramParameter
        prompt: Tree file
        name: result_tree
        filenames: {perl: '"bambe_results.tre"', python: '"bambe_results.tre"'}
        type: {_type: FormattedType, data_terms: 'EDAM_data:0872'}
    -   _type: OutputProgramParameter
        prompt: Topology file
        name: top_file
        filenames: {perl: '"bambe_results.top"', python: '"bambe_results.top"'}
operations: ['EDAM_operation:0550']
topics: ['EDAM_topic:0084']
references:
- {doi: null, label: "Larget, B. and D. Simon (1999). Markov chain Monte\n\tCarlo\
        \ algorithms for the Bayesian analysis of phylogenetic\n\ttrees. Molecular\
        \ Biology and Evolution 16:750-759.", url: null}
- {doi: null, label: "Simon, D. and B. Larget. 1998. Bayesian analysis in\n\tmolecular\
        \ biology and evolution (BAMBE), version 1.01\n\tbeta. Department of Mathematics\
        \ and Computer Science, Duquesne\n\tUniversity.", url: null}
homepage_links: ['http://www.stat.wisc.edu/~larget/']
public_name: bambe
command: {path: null, value: null}
source_links: ['http://www.stat.wisc.edu/~larget/']
