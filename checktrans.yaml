_type: Program
name: checktrans
title: checktrans
description: Reports STOP codons and ORF statistics of a protein
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2976
    -   _type: InputParagraph
        prompt: Required section
        name: e_required
        children:
        -   _type: InputProgramParameter
            prompt: Minimum orf length to report (value greater than or equal to 1)
            name: e_orfml
            ctrl:
            -   message: Value greater than or equal to 1 is required
                test:
                    value: {'#gte': '1'}
            simple: true
            argpos: '2'
            format: {python: '("", " -orfml=" + str(value))[value is not None and
                    value!=vdef]'}
            mandatory: true
            type: {_type: IntegerType, default: 100}
    -   _type: InputParagraph
        prompt: Additional section
        name: e_additional
        children:
        -   _type: InputProgramParameter
            comment: An asterisk in the protein sequence indicates the position of
                a STOP codon. Checktrans assumes that all ORFs end in a STOP  codon.
                Forcing the sequence to end with an asterisk, if there is  not one
                there already, makes checktrans treat the end as a  potential ORF.
                If an asterisk is added, it is not included in the  reported count
                of STOPs.
            prompt: Force the sequence to end with an asterisk
            name: e_addlast
            argpos: '3'
            format: {python: '(" -noaddlast", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '4'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: checktrans.e_outfile}
        -   _type: InputProgramParameter
            comment: Sequence file to hold output ORF sequences
            prompt: Name of the output sequence file (e_outseq)
            name: e_outseq
            argpos: '5'
            format: {python: '("" , " -outseq=" + str(value))[value is not None]'}
            type: {_type: StringType, default: checktrans.e_outseq}
        -   _type: InputProgramParameter
            prompt: Choose the sequence output format
            name: e_osformat_outseq
            argpos: '6'
            format: {python: '("", " -osformat=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: FASTA
                options:
                - {label: Embl, value: EMBL}
                - {label: Fasta, value: FASTA}
                - {label: Gcg, value: GCG}
                - {label: Genbank, value: GENBANK}
                - {label: Nbrf, value: NBRF}
                - {label: Pir, value: PIR}
                - {label: Raw, value: RAW}
                - {label: Swissprot, value: SWISSPROT}
                - {label: Gff, value: GFF}
        -   _type: InputProgramParameter
            comment: File for output features
            prompt: Name of the output feature file (e_outfeat)
            name: e_outfeat
            argpos: '7'
            format: {python: '("" , " -outfeat=" + str(value))[value is not None]'}
        -   _type: InputProgramParameter
            prompt: Choose the feature output format
            name: e_offormat_outfeat
            argpos: '8'
            format: {python: '("", " -offormat=" + str(value))[value is not None and
                    value!=vdef]'}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '9'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
        -   _type: OutputProgramParameter
            prompt: outseq_out option
            name: e_outseq_out
            filenames: {python: e_outseq}
            type: {_type: FormattedType, data_terms: 'EDAM_data:2044'}
        -   _type: OutputProgramParameter
            prompt: outfeat_out option
            name: e_outfeat_out
            filenames: {python: e_outfeat}
operations: ['EDAM_operation:0436']
topics: ['EDAM_topic:0109']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/checktrans.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: checktrans
command: {path: null, value: checktrans}
