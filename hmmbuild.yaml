_type: Program
name: hmmbuild
title: HMMBUILD
description: Build a profile HMM from an input multiple alignment
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: Aligned sequences File
        name: alignfile
        simple: true
        argpos: '30'
        format: {perl: '" $value"', python: '" "+str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1961']
            data_terms: EDAM_data:0863
    -   _type: InputProgramParameter
        comment: "The alphabet type (amino, DNA, or RNA) is autodetected by default,\
            \ by looking at the composition of the\n            msafile. Autodetection\
            \ is normally quite reliable, but occasionally alphabet type may be ambiguous\
            \ and\n            autodetection can fail (for instance, on tiny toy alignments\
            \ of just a few residues). To avoid this, or to\n            increase\
            \ robustness in automated analysis pipelines, you may specify the alphabet\
            \ type of msafile with\n            these options.Protein: Specify that\
            \ all sequences in seqfile are proteins. By default, alphabet type is\n\
            \                    autodetected from looking at the residue composition.DNA:\
            \ Specify that all sequences in seqfile are DNAs.RNA: Specify that all\
            \ sequences in seqfile are RNAs."
        prompt: Forcing an alphabet in input alignment
        name: alphabet
        simple: true
        argpos: '2'
        format: {perl: '(defined $value and $value ne $vdef)? " $value" : ""', python: '("",
                " " + str(value) )[ value is not None and value != vdef]'}
        type:
            _type: StringType
            default: 'null'
            options:
            - {label: Autodetection, value: 'null'}
            - {label: Protein, value: --amino}
            - {label: DNA, value: --dna}
            - {label: RNA, value: --rna}
    -   _type: InputProgramParameter
        name: hmm_textfile
        argpos: '20'
        format: {perl: '" $alignfile.hmm"', python: '" " + str(alignfile) + ".hmm"'}
        hidden: true
        type: {_type: StringType}
    -   _type: InputParagraph
        prompt: Output options
        name: output_options
        children:
        -   _type: InputProgramParameter
            comment: "Name the new profile. The default is to use the name of the\
                \ alignment (if one\n          is present in the msafile, or, failing\
                \ that, the name of the hmmfile. If msafile contains\n          more\
                \ than one alignment, -n doesn't work, and every alignment must have\
                \ a name\n          annotated in the msafile (as in Stockholm #=GF\
                \ ID annotation)."
            prompt: Name the HMM (-n)
            name: hmmname
            argpos: '1'
            format: {perl: '(defined $value) ? " -n $value" : ""', python: '( "" ,
                    " -n " + str(value) )[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "After each model is constructed, resave annotated, possibly\
                \ modified source alignments\n            to a file in Stockholm format.\
                \ The alignments are annotated with a\n            reference annotation\
                \ line indicating which columns were assigned as consensus,\n    \
                \        and sequences are annotated with what relative sequence weights\
                \ were assigned.\n            Some residues of the alignment may have\
                \ been shifted to accommodate restrictions\n            of the Plan7\
                \ profile architecture, which disallows transitions between insert\n\
                \            and delete states.."
            prompt: Re_save annotated, possibly modified MSA to 'file', in Stockholm
                format. (-O)
            name: re_save
            argpos: '1'
            format: {perl: '(defined $value)? " -O $value" : ""', python: '( "" ,
                    " -O " + str(value) )[ value is not None ]'}
            type: {_type: StringType}
    -   _type: InputParagraph
        comment: These options control how consensus columns are defined in an alignment.
        prompt: Alternative model construction strategies
        name: AlternativeConstruction
        children:
        -   _type: InputProgramParameter
            comment: "Define consensus columns as those that have a fraction >= symfrac\
                \ of residues\n            as opposed to gaps. (See the --symfrac\
                \ option.) This is the default."
            prompt: Quickly and heuristically determine the architecture of the model
                (fast)
            name: fast
            argpos: '1'
            format: {perl: '($value) ? " --fast" : ""', python: '( "" , " --fast"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "Enter a value >= 0 and <= 1. Define the residue fraction threshold\
                \ necessary \n              to define a consensus column\n       \
                \       when using the --fast option. The default is 0.5. The symbol\
                \ fraction in each\n              column is calculated after taking\
                \ relative sequence weighting into account, and ignoring\n       \
                \       gap characters corresponding to ends of sequence fragments\
                \ (as opposed\n              to internal insertions/deletions). \n\
                \              Setting this to 0.0 means that every alignment column\
                \ will be assigned\n\t\t\t  as consensus, which may be useful in some\
                \ cases. Setting it to 1.0\n\t          means that only columns that\
                \ have no gap characters at all will be\n              assigned as\
                \ consensus."
            prompt: Sets sym fraction controlling for the --fast model construction
                algorithm, (symfrac)
            name: symfrac
            format: {perl: '(defined $value and $value != $vdef) ? " --symfrac $value"
                    : ""', python: '( "" , " --symfrac " + str(value) )[ value is
                    not None and value !=vdef ]'}
            precond: fast
            type: {_type: FloatType, default: 0.5}
        -   _type: InputProgramParameter
            comment: "Enter a value >= 0 and <= 1. We only want to count terminal\
                \ gaps as deletions if the aligned sequence is known\n           to\
                \ be full-length, not if it is a fragment (for instance, because only\
                \ part of it was\n           sequenced). HMMER uses a simple rule\
                \ to infer fragments: if the sequence length\n           L is less\
                \ than a fraction x times the mean sequence length of all the sequences\n\
                \           in the alignment, then the sequence is handled as a fragment.\
                \ The default is 0.5."
            prompt: Tag sequence as a fragment, (fragthresh)
            name: fragthresh
            format: {perl: '(defined $value  and $value != $vdef) ? " --fragthresh
                    $value" : ""', python: '( "" , " --fragthresh " + str(value) )[
                    value is not None and value !=vdef ]'}
            type: {_type: FloatType, default: 0.5}
    -   _type: InputParagraph
        prompt: Advanced options
        name: advanced
        children:
        -   _type: InputProgramParameter
            comment: "HMMER uses an ad hoc sequence weighting algorithm to downweight\
                \ closely related sequences and upweight\n          distantly related\
                \ ones. This has the effect of making models less biased by uneven\
                \ phylogenetic\n          representation. For example, two identical\
                \ sequences would typically each receive half the weight that one\n\
                \          sequence would. These options control which algorithm gets\
                \ used.wnp: Use the Henikoff position-based sequence weighting scheme\
                \ [Henikoff and Henikoff,\n          J. Mol. Biol. 243:574, 1994].\
                \ This is the default.wgsc: Use the Gerstein/Sonnhammer/Chothia weighting\
                \ algorithm [Gerstein et al, J. Mol.\n          Biol. 235:1067, 1994].wblosum:\
                \ Use the same clustering scheme that was used to weight data in calculating\
                \ BLOSUM\n          subsitution matrices [Henikoff and Henikoff, Proc.\
                \ Natl. Acad. Sci 89:10915,\n          1992]. Sequences are single-linkage\
                \ clustered at an identity threshold (default\n          0.62; see\
                \ --wid) and within each cluster of c sequences, each sequence gets\
                \ relative\n          weight 1/c.wnone: No relative weights. All sequences\
                \ are assigned uniform weight"
            prompt: Alternative relative sequence weighting strategies
            name: relativeWeight
            format: {perl: '($value ne $vdef and $value ne ''infoWgiven'') ? " --$value"
                    : ""', python: '( "" , '' --''+ str(value) )[ value != vdef and
                    value != ''infoWgiven'' ]'}
            type:
                _type: StringType
                default: wpb
                options:
                - {label: Henikoff position-based weighting scheme (wpb), value: wpb}
                - {label: Gerstein/Sonnhammer/Chothia ad hoc sequence weighting algorithm
                        (wgsc), value: wgsc}
                - {label: BLOSUM filtering algorithm to weight the sequences (wblosum),
                    value: wblosum}
                - {label: Turn off all sequence weighting (wnone), value: wnone}
                - {label: Personal weights in file. Give file in next parameter, value: infoWgiven}
        -   _type: InputProgramParameter
            prompt: Personal weights in file
            name: wgiven
            format: {perl: '(defined $value) ? " --wgiven $value" : ""', python: '("",
                    "--wgiven " + str( value ))[value is not None]'}
            precond: {relativeWeight: infoWgiven}
        -   _type: InputProgramParameter
            comment: "Sets the identity threshold used by single-linkage clustering\
                \ when using --wblosum.\n            Invalid with any other weighting\
                \ scheme. Default is 0.62. Enter a value >= 0 and <= 1"
            prompt: Set identity cutoff for BLOSUM filtering algorithm option (wid)
            name: wid
            format: {perl: '(defined $value and $value != $vdef) ? " --wid $value"
                    : ""', python: '("", " --wid " + str(value))[value is not None
                    and value != vdef]'}
            precond:
                '#and':
                - {relativeWeight: wblosum}
                - {'#not': eset}
            type: {_type: FloatType, default: 0.62}
        -   _type: InputProgramParameter
            comment: 'After relative weights are determined, they are normalized to
                sum to a total effective sequence number,

                eff nseq. This number may be the actual number of sequences in the
                alignment, but it is almost always

                smaller than that. The default entropy weighting method (--eent) reduces
                the effective sequence number

                to reduce the information content (relative entropy, or average expected
                score on true homologs) per

                consensus position. The target relative entropy is controlled by a
                two-parameter function, where the two

                parameters are settable with --ere and --esigma.--eent: Adjust effective
                sequence number to achieve a specific relative entropy per position

                (see --ere). This is the default.--eclust: Set effective sequence
                number to the number of single-linkage clusters at a specific

                identity threshold (see --eid). This option is not recommended; it''s
                for experiments

                evaluating how much better --eent is.--enone: Turn off effective sequence
                number determination and just use the actual number

                of sequences. One reason you might want to do this is to try to maximize
                the

                relative entropy/position of your model, which may be useful for short
                models'
            prompt: Alternate effective sequence weighting strategies
            name: effectiveWeight
            format: {perl: '($value ne $vdef and $value ne ''turnOff'') ? " $value"
                    : ""', python: '( "" , " " +str(value) )[ value != vdef and value
                    != ''turnOff'']'}
            precond: {'#not': eset}
            type:
                _type: StringType
                default: --eent
                options:
                - {label: Adjust effective sequence weighting to achieve relative
                        entropy target (eent), value: --eent}
                - {label: Effective sequence weighting is weighting of single linkage
                        clusters (eclust), value: --eclust}
                - {label: 'No effective sequence weighting: just use number of sequence
                        (enone)', value: --enone}
                - {label: Personal setting of effective sequence weighting for all
                        models to value, value: turnOff}
        -   _type: InputProgramParameter
            comment: Explicitly set the effective sequence number for all models to
                value
            prompt: Set personal effective sequence weighting for all models to value
                (eset)
            name: eset
            format: {perl: '(defined $value) ? " --eset $value" : ""', python: '(
                    "" , " --eset " + str(value) )[ value is not None ]'}
            precond: {effectiveWeight: turnOff}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: "Set the minimum relative entropy/position target to value. Requires\
                \ --eent. Default\n              depends on the sequence alphabet;\
                \ for protein sequences, it is 0.59 bits/position."
            prompt: 'For personal adjustment of effective sequence weighting: set
                minimum relative entropy/position to value (ere)'
            name: ere
            format: {perl: '(defined $value) ? " --ere $value" : ""', python: '( ""
                    , " --ere " + str(value) )[ value is not None ]'}
            precond: {effectiveWeight: --eent}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: "Sets the minimum relative entropy contributed by an entire model\
                \ alignment, over\n            its whole length. This has the effect\
                \ of making short models have higher relative\n            entropy\
                \ per position than --ere alone would give. The default is 45.0 bits."
            prompt: 'For personal adjustment of effective sequence weighting: set
                sigma parameter to value (esigma)'
            name: esigma
            format: {perl: '(defined $value and $value!=$vdef) ? " --esigma $value"
                    : ""', python: '( "" , " --esigma " + str(value) )[ value is not
                    None and value !=vdef ]'}
            precond: {effectiveWeight: --eent}
            type: {_type: FloatType, default: 45.0}
        -   _type: InputProgramParameter
            comment: "Enter a value >= 0 and <= 1. Sets the fractional pairwise identity\
                \ cutoff used \n           by single linkage clustering with the --eclust\
                \ option. The default is 0.62."
            prompt: 'For single linkage clustering: set fractional identity cutoff
                to value (eid)'
            name: eid
            format: {perl: '(defined $value and $value!=$vdef) ? " --eid $value" :
                    ""', python: '( "" , " --eid " + str(value) )[ value is not None
                    and value !=vdef ]'}
            precond:
                '#and':
                - {effectiveWeight: --eclust}
                - {'#not': eset}
            type: {_type: FloatType, default: 0.62}
    -   _type: InputParagraph
        comment: "The location parameters for the expected score distributions for\
            \ MSV filter scores, \n        Viterbi filter scores, and Forward scores\
            \ require three short random sequence simulations."
        prompt: Control of E-value calibration
        name: ECalibration
        children:
        -   _type: InputProgramParameter
            comment: 'Enter a value > 0. Sets the sequence length in simulation that
                estimates the location parameter mu

                for MSV filter E-values. Default is 200.'
            prompt: Lengt of sequences for MSV Gumbel mu fit (EmL)
            name: EmL
            format: {perl: '(defined $value and $value!=$vdef) ? " --EmL $value" :
                    ""', python: '( "" , " --EmL " + str(value) )[ value is not None
                    and value !=vdef ]'}
            type: {_type: IntegerType, default: 200}
        -   _type: InputProgramParameter
            comment: 'Enter a value > 0. Sets the number of sequences in simulation
                that estimates the location parameter

                mu for MSV filter E-values. Default is 200.'
            prompt: Number of sequences for MSV Gumbel mu fit (EmN)
            name: EmN
            format: {perl: '(defined $value and $value!=$vdef) ? " --EmN $value" :
                    ""', python: '( "" , " --EmN " + str(value) )[ value is not None
                    and value !=vdef ]'}
            type: {_type: IntegerType, default: 200}
        -   _type: InputProgramParameter
            comment: 'Enter a value > 0. Sets the sequence length in simulation that
                estimates the location parameter mu

                for Viterbi filter E-values. Default is 200.'
            prompt: Lengt of sequences for Viterbi Gumbel mu fit (EvL)
            name: EvL
            format: {perl: '(defined $value and $value!=$vdef) ? " --EvL $value" :
                    ""', python: '( "" , " --EvL " + str(value) )[ value is not None
                    and value !=vdef ]'}
            type: {_type: IntegerType, default: 200}
        -   _type: InputProgramParameter
            comment: 'Enter a value > 0. Sets the number of sequences in simulation
                that estimates the location parameter

                mu for Viterbi filter E-values. Default is 200.'
            prompt: Number of sequences for Viterbi Gumbel mu fit (EvN)
            name: EvN
            format: {perl: '(defined $value and $value!=$vdef) ? " --EvN $value" :
                    ""', python: '( "" , " --EvN " + str(value) )[ value is not None
                    and value !=vdef ]'}
            type: {_type: IntegerType, default: 200}
        -   _type: InputProgramParameter
            comment: 'Enter a value > 0. Sets the sequence length in simulation that
                estimates the location parameter tau

                for Forward E-values. Default is 100.'
            prompt: Lengt of sequences for Forward exp tail tau fit (EfL)
            name: EfL
            format: {perl: '(defined $value and $value!=$vdef) ? " --EfL $value" :
                    ""', python: '( "" , " --EfL " + str(value) )[ value is not None
                    and value !=vdef ]'}
            type: {_type: IntegerType, default: 100}
        -   _type: InputProgramParameter
            comment: 'Enter a value > 0. Sets the number of sequences in simulation
                that estimates the location parameter

                tau for Forward E-values. Default is 200.'
            prompt: Number of sequences for Forward exp tail tau fit (EfN)
            name: EfN
            format: {perl: '(defined $value and $value!=$vdef) ? " --EfN $value" :
                    ""', python: '( "" , " --EfN " + str(value) )[ value is not None
                    and value !=vdef ]'}
            type: {_type: IntegerType, default: 200}
        -   _type: InputProgramParameter
            comment: 'Enter a value > 0 and < 1. Sets the tail mass fraction to fit
                in the simulation that estimates the location parameter

                tau for Forward evalues. Default is 0.04.'
            prompt: Tail mass for Forward exponential tail tau fit (Eft)
            name: Eft
            format: {perl: '(defined $value and $value!=$vdef) ? " --Eft $value" :
                    ""', python: '( "" , " --Eft " + str(value) )[ value is not None
                    and value !=vdef ]'}
            type: {_type: FloatType, default: 0.04}
    -   _type: InputParagraph
        prompt: Other options
        name: other
        children:
        -   _type: InputProgramParameter
            comment: "Seed the random number generator with the value, an integer\
                \ >= 0. If the value is nonzero,\n            any stochastic simulations\
                \ will be reproducible; the same command will give the\n         \
                \   same results. If the number is 0, the random number generator\
                \ is seeded arbitrarily, and\n            stochastic simulations will\
                \ vary from run to run of the same command. The default\n        \
                \    seed is 42."
            prompt: Set random number seed  (seed)
            name: seed
            format: {perl: '(defined $value and $value != $vdef) ? " --seed $value"
                    : ""', python: '( "" , " --seed " + str(value))[ value is not
                    None and value != vdef ]'}
            type: {_type: IntegerType, default: 42}
        -   _type: InputProgramParameter
            prompt: Use a Laplace +1 prior
            name: laplace
            format: {perl: '($value) ? " --laplace" : ""', python: '( "" , " --laplace
                    " )[ value ]'}
            type: {_type: BooleanType, default: false}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Hmm profile
        name: hmmfile_res
        filenames: {perl: '*.hmm', python: '"*.hmm"'}
    -   _type: OutputProgramParameter
        prompt: Alignment file
        name: re_save_file
        filenames: {perl: $re_save, python: re_save}
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1961']
            data_terms: EDAM_data:0863
operations: ['EDAM_operation:0296']
topics: ['EDAM_topics:0188']
public_name: hmmbuild
command: {path: null, value: hmmbuild}
