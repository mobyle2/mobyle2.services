_type: Program
name: edialign
title: edialign
description: Local multiple alignment of sequences
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequences option
            name: e_sequences
            simple: true
            argpos: '1'
            format: {python: '("", " -sequences=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
    -   _type: InputParagraph
        prompt: Additional section
        name: e_additional
        children:
        -   _type: InputProgramParameter
            comment: Nucleic acid sequence alignment mode (simple, translated or mixed)
            prompt: Nucleic acid sequence alignment mode
            name: e_nucmode
            argpos: '2'
            format: {python: '("", " -nucmode=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: n
                options:
                - {label: Simple, value: n}
                - {label: Translation, value: nt}
                - {label: Mixed alignments, value: ma}
        -   _type: InputProgramParameter
            prompt: Also consider the reverse complement
            name: e_revcomp
            argpos: '3'
            format: {python: '("", " -revcomp")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: By default overlap weights are used when Nseq =<35 but you can
                set this to 'yes' or 'no'
            prompt: Use overlap weights
            name: e_overlapw
            argpos: '4'
            format: {python: '("", " -overlapw=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: '1'
                options:
                - {label: Default (when nseq =< 35), value: '1'}
                - {label: 'Yes', value: '2'}
                - {label: 'No', value: '3'}
        -   _type: InputProgramParameter
            comment: Clustering method to construct sequence tree (UPGMA, minimum
                linkage or maximum linkage)
            prompt: Clustering method to construct sequence tree
            name: e_linkage
            argpos: '5'
            format: {python: '("", " -linkage=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: UPGMA
                options:
                - {label: Upgma, value: UPGMA}
                - {label: Maximum linkage, value: max}
                - {label: Minimum linkage, value: min}
        -   _type: InputProgramParameter
            prompt: Maximum fragment length (value greater than or equal to 0)
            name: e_maxfragl
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '6'
            format: {python: '("", " -maxfragl=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 40}
        -   _type: InputProgramParameter
            prompt: Consider only n-fragment pairs that start with two matches
            name: e_fragmat
            argpos: '7'
            format: {python: '("", " -fragmat")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Consider only p-fragment pairs if first amino acid or codon pair
                has similarity score of at least n (value greater than or equal to
                0)
            name: e_fragsim
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '8'
            format: {python: '("", " -fragsim=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 4}
        -   _type: InputProgramParameter
            prompt: Use iterative score
            name: e_itscore
            argpos: '9'
            format: {python: '("", " -itscore")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Threshold for considering diagonal for alignment (value greater
                than or equal to 0.0)
            name: e_threshold
            ctrl:
            -   message: Value greater than or equal to 0.0 is required
                test:
                    value: {'#gte': '0.0'}
            argpos: '10'
            format: {python: '("", " -threshold=" + str(value))[value is not None
                    and value!=vdef]'}
            type: {_type: FloatType, default: 0.0}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Replace unaligned characters by stars '*' rather then putting
                them in lowercase
            name: e_mask
            argpos: '11'
            format: {python: '("", " -mask")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Activate writing of stars instead of numbers
            name: e_dostars
            argpos: '12'
            format: {python: '("", " -dostars")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Put up to n stars '*' instead of digits 0-9 to indicate level
                of conservation (value greater than or equal to 0)
            name: e_starnum
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '13'
            format: {python: '("", " -starnum=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 4}
        -   _type: InputProgramParameter
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '14'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: edialign.e_outfile}
        -   _type: InputProgramParameter
            prompt: Name of the output sequence file (e_outseq)
            name: e_outseq
            argpos: '15'
            format: {python: '("" , " -outseq=" + str(value))[value is not None]'}
            type: {_type: StringType, default: edialign.e_outseq}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '16'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
        -   _type: OutputProgramParameter
            prompt: outseq_out option
            name: e_outseq_out
            filenames: {python: e_outseq}
operations: ['EDAM_operation:0495']
topics: ['EDAM_topic:0186']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/edialign.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: edialign
command: {path: null, value: edialign}
