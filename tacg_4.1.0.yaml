_type: Program
name: tacg
version: 4.1.0
title: TACG
description: Restriction Enzyme analysis
authors: Mangalam
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: DNA Sequence
        name: sequence
        simple: true
        argpos: '100'
        format: {perl: '" < $value "', python: '" < " + str( value ) + " "'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2977
    -   _type: InputParagraph
        prompt: Input options
        name: input_options
        children:
        -   _type: InputProgramParameter
            comment: Select  the beginning  of a subsequence  from a larger sequence
                file. The smallest sequence that tacg can handle is 4 bases, 10 for
                the ladders map (-l). This allows analysis of primers and linkers.
            prompt: Beginning of a subsequence in your sequence (-b)
            name: beginning
            simple: true
            format: {perl: '(defined $value)? " -b $value" : ""', python: '( "" ,
                    " -b " + str( value ) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: End of a subsequence in your sequence (-e)
            name: end
            simple: true
            format: {perl: '(defined $value)? " -e $value" : ""', python: '( "" ,
                    " -e " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Form (or topology) of DNA (-f)
            name: topology
            simple: true
            format: {perl: '(defined $value and $value ne $vdef)? " -f $value" : ""',
                python: '( "" , " -f " + str(value) )[ value is not None and value
                    != vdef]'}
            type:
                _type: StringType
                default: '1'
                options:
                - {label: Circular, value: '0'}
                - {label: Linear, value: '1'}
        -   _type: InputProgramParameter
            comment: The  pattern  matching  is adaptive; given a small window of
                nondegenerate sequence, the algorithm will match very fast; if degenerate  sequence  is  detected,  it  will
                switch  to a slower, iterative approach.  This results in speed that
                is proportional to degeneracy for most cases.
            prompt: Degeneracy flag - controls input and analysis of degenerate sequence
                input (-D)
            name: degeneracy
            format: {perl: '(defined $value and $value ne  $vdef)? " -D $value" :
                    ""', python: '( "" , " -D " + str(value) )[ value is not None
                    and value != vdef]'}
            type:
                _type: StringType
                default: '1'
                options:
                - {label: FORCES exclusion of degens in sequence; only 'acgtu' accepted
                        (0), value: '0'}
                - {label: Cut as NONdegen unless degen's found; then cut as '-D3'
                        (1), value: '1'}
                - {label: 'Degen''s OK; ignore in KEY, but match outside of KEY (2)',
                    value: '2'}
                - {label: 'Degen''s OK; expand in KEY, find only EXACT matches (3)',
                    value: '3'}
                - {label: 'Degen''s OK; expand in KEY, find ALL POSSIBLE matches (4)',
                    value: '4'}
        -   _type: InputProgramParameter
            prompt: Codon Usage table to use for translation (-C)
            name: codon
            format: {perl: '(defined $value and $value ne $vdef)? " -C $value" : ""',
                python: '( "" , " -C " + str(value) )[ value is not None and value
                    != vdef]'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Standard, value: '0'}
                - {label: Vertebrate Mitochondrial (1), value: '1'}
                - {label: Yeast Mitochondrial (2), value: '2'}
                - {label: 'Mold, Protozoan, and Coelenterate Mitochondrial and the
                        Mycoplasma/Spiroplasma (3)', value: '3'}
                - {label: Invertebrate Mitochondrial (4), value: '4'}
                - {label: 'Ciliate, Dasycladacean and Hexamita Nuclear (5)', value: '5'}
                - {label: Echinoderm Mitochondrial Code (6), value: '6'}
                - {label: Euplotid Nuclear (7), value: '7'}
                - {label: Bacterial (8), value: '8'}
                - {label: Alternative Yeast Nuclear (9), value: '9'}
                - {label: Ascidian Mitochondrial (10), value: '10'}
                - {label: Flatworm Mitochondrial (11), value: '11'}
                - {label: Blepharisma (12), value: '12'}
                - {label: Chloro Mitochondrial (13), value: '13'}
                - {label: Trematode Mitochondrial (14), value: '14'}
                - {label: Scenedes Mitochondrial (15), value: '15'}
                - {label: Thrausto Mitochondrial (16), value: '16'}
    -   _type: InputParagraph
        prompt: Output options
        name: output_options
        children:
        -   _type: InputProgramParameter
            prompt: Order the output by number of cuts/fragments (-c)
            name: order_by_cut
            format: {perl: '($value)? " -c" : ""', python: '( "" , " -c" )[ value
                    ]'}
            precond:
                '#or':
                -   print_fragments: {'#ne': '0'}
                - sites
                - ladder_map
                - gel_map
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: 'The number  is truncated to a # exactly divisible by 15 (-w
                100  will  be interpreted as -w 90) and actual printed output will
                be about 20 characters wider. Also applies to output of the ladder
                and gel maps, so if you are trying to  get  more accuracy  and  your  output
                device can display small fonts, you may want to use this flag to widen
                the output.'
            prompt: Output width (-w)
            name: width
            format: {perl: '(defined $value and $value != $vdef)? " -w $value" : ""',
                python: '( "" , " -w " + str(value) )[ value is not None and value
                    != vdef]'}
            type: {_type: IntegerType, default: 60}
        -   _type: InputProgramParameter
            prompt: Histogram output (-G)
            name: graphic
            format: {perl: '(defined $value)? " -G$binsize,$value" : ""', python: '(
                    "" , " -G" + str(binsize) +"," + str(value) )[ value is not None
                    ]'}
            precond:
                binsize: {'#ne': None}
            type:
                _type: StringType
                default: X
                options:
                - {label: Horizontal X axis (X), value: X}
                - {label: Vertical Y axis (Y), value: Y}
                - {label: Long output (L), value: L}
        -   _type: InputProgramParameter
            comment: N bases for which hits should be pooled (integer)
            prompt: Step size in histogram
            name: binsize
            format: {perl: '""', python: '""'}
            precond: graphic
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: Controls the output for sequences (in a  collection)  that  have  no  hits  for  the
                options  selected.
            prompt: Controls the output for sequences (-i)
            name: idonly
            format: {perl: '(defined $value and $value ne  $vdef)? " -i $value" :
                    ""', python: '( "" , " -i " + str(value) )[ value is not None
                    and value != vdef]'}
            type:
                _type: StringType
                default: '-1'
                options:
                - {label: No control, value: '-1'}
                - {label: ID line and normal output regardless of hits (0), value: '0'}
                - {label: BOTH ID line and normal output are printed ONLY IF there
                        are hits (1), value: '1'}
                - {label: ONLY ID line is  printed  if there are hits (2), value: '2'}
        -   _type: InputProgramParameter
            prompt: Generates  HTML  tags (-H)
            name: html
            format: {perl: '($value)? " -H" : ""', python: '( "" , " -H")[value]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Generates  a  postscript plasmid map (--ps)
            name: ps
            format: {perl: '($value)? " --ps" : ""', python: '( "" , " --ps")[value]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Enzymes Selection options
        name: selection_options
        children:
        -   _type: InputProgramParameter
            prompt: Maximum number of cuts allowed in sequence (-M)
            name: max_cut
            format: {perl: '(defined $value)? " -M $value" : ""', python: '( "" ,
                    " -M " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Minimum number of cuts in sequence for the enzyme to be selected
                (-m)
            name: min_cut
            format: {perl: '(defined $value)? " -m $value" : ""', python: '( "" ,
                    " -m " + str(value) )[ value is not None ]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: The 'magnitude' of the recognition sequence depends on the number
                of defined bases that make up the site. Degenerate bases can also
                contribute:acgt each count '1' magnitude pointyrwsmk each count '1/2'
                magnitude pointbdhu each count '1/4' magnitude pointn doesn't count
                at allThose enzymes sequences' patterns that 'sum' to the equivalent
                of at least the given magnitude pass the testThe values are upwardly
                inclusive (5=5,6,7,8 6=6,7,8 ...)
            prompt: Select enzymes by magnitude of recognition site (-n)
            name: magnitude
            argpos: '2'
            format: {perl: '(defined $value and $value ne $vdef)? " -n $value" : ""',
                python: '( "" , " -n " + str(value) )[ value is not None and value
                    != vdef]'}
            type:
                _type: StringType
                default: '3'
                options:
                - {label: '3', value: '3'}
                - {label: '4', value: '4'}
                - {label: '5', value: '5'}
                - {label: '6', value: '6'}
                - {label: '7', value: '7'}
                - {label: '8', value: '8'}
        -   _type: InputProgramParameter
            prompt: Select enzymes by overhang generated (-o)
            name: overhang
            format: {perl: '(defined $value and $value ne $vdef)? " -o $value" : ""',
                python: '( "" , " -o " + str(value) )[ value is not None and value
                    != vdef]'}
            type:
                _type: StringType
                default: '1'
                options:
                - {label: 5' overhang (5), value: '5'}
                - {label: 3' overhang (3), value: '3'}
                - {label: Blunt (no overhang) (0), value: '0'}
                - {label: All (1), value: '1'}
    -   _type: InputParagraph
        prompt: Analyses
        name: analyses
        children:
        -   _type: InputProgramParameter
            comment: Prints  the  summary  of site information, describing how many  times   each
                pattern matches the sequence.  Those that match zero times are shown
                first.  In Ver >2, only those that match at least once are shown in
                the second part (the 0 matchers are  not reiterated)
            prompt: Summary of site information (-s)
            name: summary
            format: {perl: '($value)? " -s" : ""', python: '( "" , " -s" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Print/sort table of fragments (-F)
            name: print_fragments
            format: {perl: '(defined $value and $value ne $vdef)? " -F $value" : ""',
                python: '( "" , " -F " + str(value) )[ value is not None and value
                    != vdef]'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Don't print fragments (0), value: '0'}
                - {label: Fragments printed in order of generation (unsorted) (1),
                    value: '1'}
                - {label: 'Fragments sorted by size, smallest to largest (2)', value: '2'}
                - {label: Both (3), value: '3'}
        -   _type: InputProgramParameter
            prompt: Table of actual cut sites (-S)
            name: sites
            format: {perl: '($value)? " -S 1" : ""', python: '( "" , " -S 1" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Specify if you want a ladder map of selected enzymes, much like
                the GCG MAPPLOT output.  Also appends a summary of those enzymes that
                match a few times.  The number of matches that is included in the  summary  is  length-sensitive  in  the  distributed
                source  code.
            prompt: Ladder map of selected enzymes (-l)
            name: ladder_map
            format: {perl: '($value)? " -l" : ""', python: '( "" , " -l" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Print a pseudo-graphic gel map (-g)
            name: gel_map
            format: {perl: '($value)? " -g $cutoff" : ""', python: '( "" , " -g "
                    + str(cutoff) )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: You can cut off any size in 10^n increments (as you might want
                to cut off very large fragments if you were doing chromosomal digests).
            prompt: Low-end cutoff in number of bases for gel map (>= 10)
            name: cutoff
            format: {perl: '""', python: '""'}
            precond: gel_map
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputParagraph
            prompt: Linear map
            name: linear_map_options
            children:
            -   _type: InputProgramParameter
                comment: 'This spews the most output (about 10x  the  #  of input  characters)
                    and depending on what other options are specified, can be of moderate
                    to very  little use. If you want the co-translation, you''ll have
                    to specify it via the -T flag below.  The Linear map also no longer
                    shows ALL the  patterns  that match from the pattern file.  It
                    now obeys the same filtering rules that the Sites, Fragments,
                    Ladder Map and other analyses do.'
                prompt: Specify if you want linear map (-L)
                name: linear_map
                format: {perl: '($value)? " -L" : ""', python: '( "" , " -L" )[ value
                        ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: Requests frames 1, 1-3, or 1-6 to be cotranslated with the
                    Linear Map using 1  or  3 letter codes.
                prompt: Linear co-translation (-T)
                name: translation
                format: {perl: '($value)? " -T $translation_frames,$three_letter"
                        : ""', python: '( "" , " -T " + str(translation_frames) +
                        "," + str(three_letter) )[ value ]'}
                precond:
                    '#and':
                    - linear_map
                    -   three_letter: {'#ne': None}
                    -   translation_frames: {'#ne': None}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                prompt: Translation in how many frames
                name: translation_frames
                precond: translation
                mandatory: true
                type:
                    _type: StringType
                    default: '1'
                    options:
                    - {label: 1 frame, value: '1'}
                    - {label: 3 frames, value: '3'}
                    - {label: 6 frames, value: '6'}
            -   _type: InputProgramParameter
                prompt: Translation code ( 1 or 3-letter)
                name: three_letter
                precond: translation
                type:
                    _type: StringType
                    default: '1'
                    options:
                    - {label: 1-letter, value: '1'}
                    - {label: 3-letter, value: '3'}
        -   _type: InputParagraph
            prompt: Open Reading Frames
            name: orf_options
            children:
            -   _type: InputProgramParameter
                prompt: Do an ORF analysis (-O)
                name: orf
                format: {perl: '($value)? " -O $frame,$min_size" : ""', python: '(
                        "" , " -O " + str(frame)+","+ str(min_size) )[ value ]'}
                precond:
                    '#and':
                    -   frame: {'#ne': None}
                    -   min_size: {'#ne': None}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                prompt: Frames to search
                name: frame
                format: {perl: '""', python: '""'}
                precond: orf
                mandatory: true
            -   _type: InputProgramParameter
                prompt: Min ORF size
                name: min_size
                format: {perl: '""', python: '""'}
                precond: orf
                mandatory: true
                type: {_type: IntegerType}
        -   _type: InputParagraph
            prompt: Pattern Search
            name: pattern_search_options
            children:
            -   _type: InputProgramParameter
                prompt: Do a pattern search (-p)
                name: pattern_search
                format: {perl: '($value)? " -p $Name,$pattern,$errors" : ""', python: '(
                        "" , " -p " + str(Name)+","+ str(pattern) +"," + str(errors)
                        )[ value ]'}
                precond:
                    '#and':
                    -   Name: {'#ne': None}
                    -   pattern: {'#ne': None}
                    -   errors: {'#ne': None}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                prompt: Pattern (<30 IUPAC character)
                name: pattern
                format: {perl: '""', python: '""'}
                precond: pattern_search
                type: {_type: StringType}
            -   _type: InputProgramParameter
                prompt: Max number of errors that are tolerated (<6) (-p)
                name: errors
                format: {perl: '""', python: '""'}
                precond: pattern_search
                type: {_type: IntegerType, default: 0}
            -   _type: InputProgramParameter
                prompt: Label of pattern
                name: Name
                format: {perl: '""', python: '""'}
                precond: pattern_search
                type: {_type: StringType, default: pattern1}
            -   _type: InputParagraph
                prompt: Search for spatial relationships between factors (-P)
                name: proximity_options
                children:
                -   _type: InputProgramParameter
                    comment: Use  this  option to search for spacial relationships
                        between factors, 2 at a time (up to a total of 10).
                    prompt: Do a proximity search
                    name: proximity
                    format: {perl: '($value)? " -P $nameA,$distance,$nameB" : ""',
                        python: '( "" , " -P " + str(nameA)+"," + str(distance)+ ","
                            + str(nameB) )[ value ]'}
                    precond:
                        '#and':
                        -   nameA: {'#ne': None}
                        -   distance: {'#ne': None}
                        -   nameB: {'#ne': None}
                    type: {_type: BooleanType, default: false}
                -   _type: InputProgramParameter
                    comment: 'Distance specification: [+-][lg]Dist_Lo[-Dist_Hi+ NameA
                        is DOWNSTREAM of NameB (default is either)- NameA is UPSTREAM
                        of NameB (ditto)l NameA is LESS THAN Dist_Lo from NameB (default)g
                        NameA is GREATER THAN Dist_Lo from NameB'
                    prompt: Distance between factors
                    name: distance
                    format: {perl: '""', python: '""'}
                    precond: proximity
                    mandatory: true
                    type: {_type: StringType}
                -   _type: InputProgramParameter
                    comment: NameA must be enzymes names (Rebase db)
                    prompt: Name of first factor (nameA)
                    name: nameA
                    format: {perl: '""', python: '""'}
                    precond: proximity
                    mandatory: true
                    type: {_type: StringType}
                -   _type: InputProgramParameter
                    comment: NameB must be enzymes names (Rebase db)
                    prompt: Name of second factor (nameB)
                    name: nameB
                    format: {perl: '""', python: '""'}
                    precond: proximity
                    mandatory: true
                    type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Tacg output file
        name: outfile
        filenames: {perl: '"tacg.out"', python: '"tacg.out"'}
        precond: {'#not': html}
        output_type: stdout
    -   _type: OutputProgramParameter
        prompt: Postscript file
        name: psfile
        filenames: {perl: '"*.ps"', python: '"*.ps"'}
        precond: ps
    -   _type: OutputProgramParameter
        prompt: Html file
        name: htmlfile
        filenames: {perl: '"*.html"', python: '"*.html"'}
        precond: html
operations: ['EDAM_operation:2478']
topics: ['EDAM_topic:0640']
documentation_links: ['http://bioweb2.pasteur.fr/docs/tacg/tacg4.0.main.html']
homepage_links: ['http://tacg.sourceforge.net/']
public_name: tacg
command: {path: null, value: tacg}
source_links: ['http://sourceforge.net/projects/tacg/files/']
