_type: Program
name: showfeat
title: showfeat
description: Display features of a sequence in pretty format
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
    -   _type: InputParagraph
        prompt: Additional section
        name: e_additional
        children:
        -   _type: InputProgramParameter
            comment: "By default any feature source in the feature table is shown.\
                \ You can set this to match any feature source you wish to  show.\
                \ \n  The source name is usually either the name of the program that\
                \  detected the feature or it is the feature table (eg: EMBL) that\
                \  the feature came from. \n  The source may be wildcarded by using\
                \ '*'. \n  If you wish to show more than one source, separate their\
                \ names  with the character '|', eg: \n  gene* | embl"
            prompt: Source of feature to display
            name: e_sourcematch
            argpos: '2'
            format: {python: '("", " -sourcematch=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "By default any feature type in the feature table is shown. You\
                \ can set this to match any feature type you wish to show. \n  See\
                \ http://www.ebi.ac.uk/embl/WebFeat/ for a list of the EMBL  feature\
                \ types and see Appendix A of the Swissprot user manual in  http://www.expasy.org/sprot/userman.html\
                \ for a list of the Swissprot  feature types. \n  The type may be\
                \ wildcarded by using '*'. \n  If you wish to show more than one type,\
                \ separate their names with  the character '|', eg: \n  *UTR | intron"
            prompt: Type of feature to display
            name: e_typematch
            argpos: '3'
            format: {python: '("", " -typematch=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Tags are the types of extra values that a feature may have.\
                \ For example in the EMBL feature table, a 'CDS' type of feature \
                \ may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                \ '/evidence', '/exception', '/function', '/gene',  '/label', '/map',\
                \ '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo',\
                \ '/standard_name', '/translation',  '/transl_except', '/transl_table',\
                \ or '/usedin'. Some of these  tags also have values, for example\
                \ '/gene' can have the value of  the gene name. \n  By default any\
                \ feature tag in the feature table is shown. You can  set this to\
                \ match any feature tag you wish to show. \n  The tag may be wildcarded\
                \ by using '*'. \n  If you wish to show more than one tag, separate\
                \ their names with  the character '|', eg: \n  gene | label"
            prompt: Tag of feature to display
            name: e_tagmatch
            argpos: '4'
            format: {python: '("", " -tagmatch=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Tag values are the values associated with a feature tag. Tags\
                \ are the types of extra values that a feature may have. For  example\
                \ in the EMBL feature table, a 'CDS' type of feature may  have the\
                \ tags '/codon', '/codon_start', '/db_xref', '/EC_number',  '/evidence',\
                \ '/exception', '/function', '/gene', '/label', '/map',  '/note',\
                \ '/number', '/partial', '/product', '/protein_id',  '/pseudo', '/standard_name',\
                \ '/translation', '/transl_except',  '/transl_table', or '/usedin'.\
                \ Only some of these tags can have  values, for example '/gene' can\
                \ have the value of the gene name.  By default any feature tag value\
                \ in the feature table is shown.  You can set this to match any feature\
                \ tag value you wish to show. \n  The tag value may be wildcarded\
                \ by using '*'. \n  If you wish to show more than one tag value, separate\
                \ their names  with the character '|', eg: \n  pax* | 10"
            prompt: Value of feature tags to display
            name: e_valuematch
            argpos: '5'
            format: {python: '("", " -valuematch=" + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Sorting features
            name: e_sort
            argpos: '6'
            format: {python: '("", " -sort=" + str(value))[value is not None and value!=vdef]'}
            type:
                _type: StringType
                default: start
                options:
                - {label: Sort by source, value: source}
                - {label: Sort by start position, value: start}
                - {label: Sort by type, value: type}
                - {label: No sorting done, value: nosort}
        -   _type: InputProgramParameter
            prompt: Join coding regions together
            name: e_joinfeatures
            argpos: '7'
            format: {python: '("", " -joinfeatures")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "Regions to annotate by marking. \n If this is left blank, then\
                \ no annotation is added. \n  A set of regions is specified by a set\
                \ of pairs of positions  followed by optional text. \n  The positions\
                \ are integers. \n  They are followed by any text (but not digits\
                \ when on the  command-line). \n  Examples of region specifications\
                \ are: \n  24-45 new domain 56-78 match to Mouse \n  1-100 First part\
                \ 120-156 oligo \n  A file of ranges to annotate (one range per line)\
                \ can be specified  as '@filename'."
            prompt: 'Regions to mark (eg: 4-57 promoter region 78-94 first exon)'
            name: e_annotation
            argpos: '8'
            format: {python: '("", " -annotation=" + str(value))[value is not None]'}
            type: {_type: StringType}
    -   _type: InputParagraph
        prompt: Advanced section
        name: e_advanced
        children:
        -   _type: InputProgramParameter
            prompt: Use html formatting
            name: e_html
            argpos: '9'
            format: {python: '("", " -html")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the ID name
                of the sequence.
            prompt: Show sequence id
            name: e_id
            argpos: '10'
            format: {python: '(" -noid", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the description
                of the sequence.
            prompt: Show description
            name: e_description
            argpos: '11'
            format: {python: '(" -nodescription", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the scale
                line.
            prompt: Show scale line
            name: e_scale
            argpos: '12'
            format: {python: '(" -noscale", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "You can expand (or contract) the width of the ASCII-character\
                \ graphics display of the positions of the features  using this value.\
                \ \n  For example, a width of 80 characters would cover a standard\
                \ page  width and a width a 10 characters would be nearly unreadable.\
                \ \n  If the width is set to less than 4, the graphics lines and the\
                \  scale line will not be displayed."
            prompt: Width of graphics lines (value greater than or equal to 0)
            name: e_width
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '13'
            format: {python: '("", " -width=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 60}
        -   _type: InputProgramParameter
            comment: "If this is set, then features from the same source and of the\
                \ same type and sense are all printed on the same line. For  instance\
                \ if there are several features from the EMBL feature table  (ie.\
                \ the same source) which are all of type 'exon' in the same  sense,\
                \ then they will all be displayed on the same line. This  makes it\
                \ hard to distinguish overlapping features. \n  If this is set to\
                \ false then each feature is displayed on a  separate line making\
                \ it easier to distinguish where features start  and end."
            prompt: Display features with the same type on one line
            name: e_collapse
            argpos: '14'
            format: {python: '("", " -collapse")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display forward sense
                features.
            prompt: Display forward sense features
            name: e_forward
            argpos: '15'
            format: {python: '(" -noforward", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display reverse sense
                features.
            prompt: Display reverse sense features
            name: e_reverse
            argpos: '16'
            format: {python: '(" -noreverse", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display unknown sense
                features. (ie. features with no directionality - all protein  features
                are of this type and some nucleic features (for example,  CG-rich
                regions)).
            prompt: Display unknown sense features
            name: e_unknown
            argpos: '17'
            format: {python: '(" -nounknown", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this if you wish to display the strand of the features. Protein
                features are always directionless (indicated by '0'),  forward is
                indicated by '+' and reverse is '-'.
            prompt: Display strand of features
            name: e_strand
            argpos: '18'
            format: {python: '("", " -strand")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "Set this if you wish to display the origin of the features.\
                \ \n  The source name is usually either the name of the program that\
                \  detected the feature or it is the name of the feature table (eg:\
                \  EMBL) that the feature came from."
            prompt: Display source of features
            name: e_origin
            argpos: '19'
            format: {python: '("", " -origin")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: 'Set this if you wish to display the start and end position of
                the features. If several features are being displayed on the  same
                line, then the start and end positions will be joined by a  comma,
                for example: ''189-189,225-225''.'
            prompt: Display position of features
            name: e_position
            argpos: '20'
            format: {python: '("", " -position")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the type of
                the features.
            prompt: Display type of features
            name: e_type
            argpos: '21'
            format: {python: '(" -notype", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the tags and
                values of the features.
            prompt: Display tags of features
            name: e_tags
            argpos: '22'
            format: {python: '("", " -tags")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set this to be false if you do not wish to display the tag values
                of the features. If this is set to be false, only the tag  names will
                be displayed. If the tags are not displayed, then the  values will
                not be displayed. The value of the 'translation' tag  is never displayed
                as it is often extremely long.
            prompt: Display tag values of features
            name: e_values
            argpos: '23'
            format: {python: '(" -novalues", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: By default if any tag/value pair in a feature matches the specified
                tag and value, then all the tags/value pairs of that  feature will
                be displayed. If this is set to be true, then only  those tag/value
                pairs in a feature that match the specified tag  and value will be
                displayed.
            prompt: Only display the matching tags
            name: e_stricttags
            argpos: '24'
            format: {python: '("", " -stricttags")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '25'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: outfile.showfeat}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '26'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
operations: ['EDAM_operation:0564']
topics: ['EDAM_topic:0160', 'EDAM_topic:0092']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/showfeat.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: showfeat
command: {path: null, value: showfeat}
