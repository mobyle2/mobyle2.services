_type: Program
name: dnadist
title: dnadist
description: Compute distance matrix from nucleotide sequences
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: dnadist
        argpos: '0'
        format: {perl: '"dnadist <dnadist.params"', python: '"dnadist <dnadist.params"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: The input file must contained aligned sequences in PHYLIP format
            obtained by sequence alignment programs.
        prompt: Alignment File
        name: infile
        ctrl:
        -   message: the name of this data can't be "infile" or "outfile"
            test:
                value:
                    '#nin': [infile, outfile]
        simple: true
        argpos: '-10'
        format: {perl: '"ln -s $infile infile && "', python: '"ln -s " + str( infile
                ) + " infile && "'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1955']
            data_terms: EDAM_data:1383
    -   _type: InputParagraph
        prompt: Dnadist options
        name: dnadist_opt
        children:
        -   _type: InputProgramParameter
            prompt: Distance (D)
            name: distance
            argpos: '1'
            type: {_type: StringType, default: F84}
            paramfile: dnadist.params
        -   _type: InputProgramParameter
            comment: "The T option in this program does not stand for Threshold, but\
                \ instead is the Transition/transversion option.\n             The\
                \ user is prompted for a real number greater than 0.0, as the expected\
                \ ratio of transitions to transversions. \n             Note that\
                \ this is not the ratio of the first to the second kinds of events,\
                \ but the resulting expected ratio of transitions to transversions.\
                \ \n             The exact relationship between these two quantities\
                \ depends on the frequencies in the base pools. \n             The\
                \ default value of the T parameter if you do not use the T option\
                \ is 2.0."
            prompt: Transition/transversion ratio (T)
            name: ratio
            ctrl:
            -   message: Transition/transversion ratio (T) must be a real number greater
                    than 0.0
                test:
                    value: {'#gte': '0.0'}
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "T\\n$value\\n"
                    : ""', python: '( "" , "T\n"+ str( value )+"\n" )[value is not
                    None and value != vdef ]'}
            precond:
                '#or':
                - {distance: F84}
                - {distance: K}
            type: {_type: FloatType, default: 2.0}
            paramfile: dnadist.params
        -   _type: InputProgramParameter
            prompt: Gamma distributed rates across sites (G)
            name: gamma
            argpos: '5'
            precond:
                '#or':
                - {distance: F84}
                - {distance: K}
                - {distance: JC}
            type: {_type: StringType, default: 'No'}
            paramfile: dnadist.params
        -   _type: InputProgramParameter
            comment: In gamma distribution parameters, this is 1/(square root of alpha)
            prompt: Coefficient of variation of substitution rate among sites (must
                be positive) (if Gamma)
            name: variation_coeff
            argpos: '1010'
            format: {perl: '(defined $value) ? "$value\\n" : ""', python: '( "" ,
                    str( value ) + "\n" )[ value is not None ]'}
            precond:
                gamma: {'#ne': 'No'}
            mandatory: true
            type: {_type: FloatType}
            paramfile: dnadist.params
        -   _type: InputProgramParameter
            prompt: Fraction of invariant sites (if Gamma)
            name: invariant_sites
            argpos: '1011'
            format: {perl: '(defined $value) ? "$value\\n" : ""', python: '( "" ,
                    str( value ) + "\n" )[ value is not None ]'}
            precond: {gamma: GI}
            mandatory: true
            type: {_type: FloatType}
            paramfile: dnadist.params
        -   _type: InputParagraph
            comment: These must add to 1
            prompt: Base frequencies for A, C, G, T/U (if not empirical)
            name: ACGT_frequencies
            precond: {distance: F84}
            children:
            -   _type: InputProgramParameter
                prompt: Use empirical base frequencies (F)
                name: empirical_frequencies
                argpos: '1'
                type: {_type: BooleanType, default: false}
                paramfile: dnadist.params
            -   _type: InputProgramParameter
                prompt: Base frequencies for A
                name: A_frequency
                argpos: '2'
                format: {perl: '""', python: '""'}
                precond: {'#not': empirical_frequencies}
                mandatory: true
                type: {_type: FloatType, default: 0.25}
            -   _type: InputProgramParameter
                prompt: Base frequencies for C
                name: C_frequency
                argpos: '2'
                format: {perl: '""', python: '""'}
                precond: {'#not': empirical_frequencies}
                mandatory: true
                type: {_type: FloatType, default: 0.25}
            -   _type: InputProgramParameter
                prompt: Base frequencies for G
                name: G_frequency
                argpos: '2'
                format: {perl: '""', python: '""'}
                precond: {'#not': empirical_frequencies}
                mandatory: true
                type: {_type: FloatType, default: 0.25}
            -   _type: InputProgramParameter
                prompt: Base frequencies for T/U
                name: T_frequency
                argpos: '2'
                format: {perl: '""', python: '""'}
                precond: {'#not': empirical_frequencies}
                mandatory: true
                type: {_type: FloatType, default: 0.25}
            -   _type: InputProgramParameter
                name: base_frequencies
                argpos: '2'
                format: {perl: '"F\\n$A_frequency $C_frequency $G_frequency $T_frequency\\n"',
                    python: '"F\n" + str( A_frequency ) + " " + str( C_frequency )
                        + " " + str( G_frequency ) + " " + str( T_frequency ) + "\n"'}
                precond: {'#not': empirical_frequencies}
                hidden: true
                type: {_type: FloatType}
                paramfile: dnadist.params
    -   _type: InputParagraph
        prompt: Weight options
        name: weight_opt
        children:
        -   _type: InputProgramParameter
            prompt: Use weights for sites (W)
            name: weights
            argpos: '1'
            format: {perl: '($value) ? "W\\n" : ""', python: '( "" , "W\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnadist.params
        -   _type: InputProgramParameter
            comment: "It selects a set of sites to be analyzed, ignoring the others.\
                \ \n            The sites selected are those with weight 1.\n    \
                \        The weights in it are a simple string of digits. \n     \
                \       Blanks in the weightfile are skipped over and ignored, and\
                \ the weights can continue to a new line."
            prompt: Weights file
            name: weights_file
            ctrl:
            -   message: the name of this data can't be "infile" or "outfile"
                test:
                    value:
                        '#nin': [infile, outfile]
            argpos: '-1'
            format: {perl: '(defined $value) ? "ln -s $weights_file weights && " :
                    ""', python: '( "" , " ln -s " + str( weights_file ) + " weights
                    && " )[ value is not None]'}
            precond: weights
            mandatory: true
    -   _type: InputParagraph
        prompt: Bootstrap options
        name: bootstrap
        children:
        -   _type: InputProgramParameter
            comment: By selecting this option, the bootstrap will be performed on
                your sequence file. So you don't need to perform a separated seqboot
                before.Don't give an already bootstrapped file to the program, this
                won't work!
            prompt: Perform a bootstrap before analysis
            name: seqboot
            simple: true
            argpos: '-5'
            format: {perl: '($value) ? "seqboot < seqboot.params && mv outfile seqboot.outfile
                    && rm infile  && ln -s seqboot.outfile infile && " : ""', python: '(
                    "" , "seqboot < seqboot.params && mv outfile seqboot.outfile &&
                    rm infile && ln -s seqboot.outfile infile && " )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "1. The bootstrap. Bootstrapping was invented by Bradley Efron\
                \ in 1979, and its use in phylogeny estimation was introduced by me\
                \ (Felsenstein, 1985b). It involves creating a new data set by sampling\
                \ N characters randomly with replacement, so that the resulting data\
                \ set has the same size as the original, but some characters have\
                \ been left out and others are duplicated. The random variation of\
                \ the results from analyzing these bootstrapped data sets can be shown\
                \ statistically to be\n              typical of the variation that\
                \ you would get from collecting new data sets. The method assumes\
                \ that the characters evolve independently, an assumption that may\
                \ not be realistic for many kinds of data.2. Delete-half-jackknifing.\
                \ This alternative to the bootstrap involves sampling a random half\
                \ of the characters, and including them in the data but dropping the\
                \ others. The resulting data sets are half the size of the original,\
                \ and no characters are duplicated. The random variation from doing\
                \ this should be very similar to that obtained from the bootstrap.\
                \ The method is advocated by Wu (1986).3. Permuting species for each\
                \ characters. This method of resampling (well, OK, it may not be best\
                \ to call it resampling) was introduced by Archie (1989) and Faith\
                \ (1990; see also Faith and Cranston, 1991). It involves permuting\
                \ the columns of the data matrix separately. This produces data matrices\
                \ that have the same number and kinds of characters but no taxonomic\
                \ structure. It is used for different purposes than the bootstrap,\
                \ as it tests not the variation around an estimated tree but the hypothesis\
                \ that there is no taxonomic structure in the data: if a statistic\
                \ such as number of steps is significantly smaller in the actual data\
                \ than it is in replicates that are permuted, then we can argue that\
                \ there is some taxonomic structure in the data (though perhaps it\
                \ might be just the presence of aa pair of sibling species).4. Permuting\
                \ characters order. This simply permutes the order of the characters,\
                \ the same reordering being applied to all species. For many methods\
                \ of tree inference this will make no difference to the outcome (unless\
                \ one has rates of evolution correlated among adjacent sites). It\
                \ is included as a possible step in carrying out a permutation test\
                \ of homogeneity of characters (such as the Incongruence Length Difference\
                \ test).5. Permuting characters separately for each species. This\
                \ is a method introduced by Steel, Lockhart, and Penny (1993) to permute\
                \ data so as to destroy all phylogenetic structure, while keeping\
                \ the base composition of each species the same as before. It shuffles\
                \ the character order separately for each species."
            prompt: Resampling methods (J)
            name: Method
            simple: true
            argpos: '1'
            precond: seqboot
            mandatory: true
            type: {_type: StringType, default: bootstrap}
            paramfile: seqboot.params
        -   _type: InputProgramParameter
            prompt: Random number seed (must be odd)
            name: seqboot_seed
            simple: true
            argpos: '1000'
            format: {perl: '"$value\\n"', python: str( value ) +"\n"}
            precond: seqboot
            mandatory: true
            type: {_type: IntegerType}
            paramfile: seqboot.params
        -   _type: InputProgramParameter
            prompt: How many replicates
            name: replicates
            simple: true
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "R\\n$value\\n"
                    : ""', python: '( "" , "R\n" + str( value ) + "\n" )[ value is
                    not None and value != vdef ]'}
            precond: seqboot
            mandatory: true
            type: {_type: IntegerType, default: 100}
            paramfile: seqboot.params
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"y\\n"', python: '"y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: dnadist.params
    -   _type: InputProgramParameter
        name: terminal_type
        argpos: '-1'
        format: {perl: '"0\\n"', python: '"0\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: dnadist.params
    -   _type: InputProgramParameter
        name: multiple_dataset
        argpos: '1'
        format: {perl: '"M\\nD\\n$replicates\\n"', python: '"M\nD\n" + str( replicates
                ) + str("\n")'}
        precond:
            '#and':
            - seqboot
            -   replicates: {'#gt': '1'}
        hidden: true
        type: {_type: StringType}
        paramfile: dnadist.params
    -   _type: InputProgramParameter
        name: seqboot_confirm
        argpos: '100'
        format: {perl: '"y\\n"', python: '"y\n"'}
        precond: seqboot
        hidden: true
        type: {_type: StringType}
        paramfile: seqboot.params
    -   _type: InputProgramParameter
        name: seqboot_terminal_type
        argpos: '-1'
        format: {perl: '"0\\n"', python: '"0\n"'}
        precond: seqboot
        hidden: true
        type: {_type: StringType}
        paramfile: seqboot.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Outfile
        name: outfile
        filenames: {perl: '"dnadist.outfile"', python: '"dnadist.outfile"'}
        type: {_type: FormattedType, data_terms: 'EDAM_data:0870'}
    -   _type: OutputProgramParameter
        prompt: seqboot outfile
        name: seqboot_out
        filenames: {perl: '"seqboot.outfile"', python: '"seqboot.outfile"'}
        precond: seqboot
comment: 'This program uses nucleotide sequences to compute a distance matrix, under
    four different models of nucleotide substitution. It can also

    compute a table of similarity between the nucleotide sequences. The distance for
    each pair of species estimates the total branch length between the two species,
    and can be used in the distance matrix programs FITCH, KITSCH or NEIGHBOR.'
operations: ['EDAM_operation:0289']
topics: ['EDAM_topic:0084']
documentation_links: ['http://bioweb2.pasteur.fr/docs/phylip/doc/dnadist.html']
public_name: dnadist
command: {path: null, value: null}
