_type: Program
name: growthpred
version: '1.07'
title: growthpred
description: Sequence-based Prediction of Minimum Generation Times for Bacteria and
    Archaea
authors: S. Vieira-Silva, E. Rocha
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        comment: Use a set of example files (E. coli K12) to run the program.The expected
            results depending on the choosen option and the example files are shown
            in the program help pages (end of the form).
        prompt: Run with example data (-e)
        name: example
        argpos: '4'
        format: {python: '( "" , " -e " )[value]'}
        type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Input section
        name: input
        children:
        -   _type: InputProgramParameter
            comment: Set of genes under purifying selection for codon usage.
            prompt: Enter sequences of highly expressed genes (-f)
            name: hsequence
            format: {python: '( "" , " -f " + str( value ) + " " )[value is not None]'}
            precond:
                '#and':
                - {'#not': example}
                - {'#not': b}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:2977
        -   _type: InputProgramParameter
            prompt: Retrieve ribosomal protein genes by blast (-b)
            name: b
            format: {python: '( "" , " -b")[value]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Set of control genes with near random codon usage.
            prompt: Enter sequences of non-highly expressed genes/Complete genome
                (-g)
            name: nhsequence
            format: {python: '( "" , " -g " + str( value ) + " " )[value is not None]'}
            precond: {'#not': example}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:2977
        -   _type: InputProgramParameter
            comment: You need to precise to the program if your sequences are metagenome
                or mixed organisms sequences.
            prompt: Mixed organisms sequences
            name: typeg
            format: {python: '( "" , " -m" )[value]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Remove from sequences
        name: codon_remove
        children:
        -   _type: InputProgramParameter
            prompt: First codon (-s)
            name: fc
            format: {python: '( " -s " , "" )[value!=vdef]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Last codon (-S)
            name: lc
            format: {python: '( " -S " , "" )[value]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Options
        name: options
        children:
        -   _type: InputProgramParameter
            prompt: Choose genetic code (-c)
            name: geneticcode
            format: {python: '" -c " + str( value )'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Universal, value: '0'}
                - {label: Yeast Mitochondrial, value: '1'}
                - {label: Vertebrate Mitochondrial, value: '2'}
                - {label: Mold/Protozoan/Mycoplasma/Spiroplasma, value: '3'}
                - {label: Invertebrate Mitochondrial, value: '4'}
                - {label: Candida cylindracea, value: '5'}
                - {label: Ciliate, value: '6'}
                - {label: Euplotes, value: '7'}
                - {label: Echinoderm/Flatworm Mitochondrial, value: '8'}
        -   _type: InputProgramParameter
            prompt: Recover file with ribosomal protein genes retrieved by blast or
                given as input (-r)
            name: rfiles
            format: {python: '( "" , " -r")[value]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Recover file with codon usage bias indexes for each gene (-i)
            name: ifiles
            format: {python: '( "" , " -i")[value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Estimate optimal growth temperature (-t)
            name: autotemp
            format: {python: '( "" , " -t")[value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Enter optimal growth temperature (Celsius) (-T)
            name: temp
            format: {python: '( "" , " -T " + str( value ) )[value is not None and
                    value != vdef]'}
            precond: {'#not': autotemp}
            type: {_type: IntegerType, default: 36}
        -   _type: InputProgramParameter
            prompt: Outfile name (-o)
            name: outfile
            format: {python: '( "" , " -o " + str(value))[ value is not None ]'}
            type: {_type: StringType, default: outfile}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Prediction results
        name: res
        filenames: {python: '"*.results"'}
    -   _type: OutputProgramParameter
        prompt: Prediction error(s)
        name: err
        filenames: {python: '"*.errors"'}
    -   _type: OutputProgramParameter
        prompt: Codon usage bias indexes for each gene
        name: cubs
        filenames: {python: '"*.cub"'}
        precond: ifiles
    -   _type: OutputProgramParameter
        prompt: Ribosomal protein genes retrieved by blast
        name: ribs
        filenames: {python: '"*.ribs"'}
        precond: rfiles
comment: "This application predicts the minimum generation time for a bacterial or\
    \ archaeal organism based on  its codon usage bias intensity (CUB). \n    \tThe\
    \ CUB index is calculated given two input sets of sequences: 1) highly expressed\
    \ genes 2) other genes. \n    \tThe application runs 1000 bootstraps and outputs\
    \ the average and the standard deviation of the predictions."
operations: ['EDAM_operation:0286']
topics: ['EDAM_topic:3053']
references:
- {doi: null, label: '<html:a xmlns:html="http://www.w3.org/1999/xhtml" href="ftp://ftp.pasteur.fr/pub/gensoft/projects/growthpred/"
        target="ftp">The program sources and Example files are downloadable here.</html:a>',
    url: null}
- {doi: null, label: 'Vieira-Silva S,  Rocha EPC, 2010 The Systemic Imprint of Growth
        and Its Uses in Ecological (Meta)Genomics. PLoS Genet 6(1): e1000808. doi:10.1371/journal.pgen.1000808',
    url: null}
documentation_links: ['http://bioweb2.pasteur.fr/docs/growthpred/growthpred.pdf']
public_name: growthpred
command: {path: null, value: growthpred}
source_links: ['ftp://ftp.pasteur.fr/pub/GenSoft/projects/growthpred/']
