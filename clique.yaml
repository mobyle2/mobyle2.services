_type: Program
name: clique
title: clique
description: Compatibility Program
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: clique
        argpos: '0'
        format: {perl: '"clique < clique.params"', python: '"clique < clique.params"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        prompt: Input File
        name: infile
        simple: true
        argpos: '-10'
        format: {perl: '"ln -s $infile infile && "', python: '"ln -s "+ str( infile
                ) + " infile && "'}
        precond:
            infile: {'#ne': infile}
        mandatory: true
    -   _type: InputParagraph
        prompt: Clique options
        name: clique_opt
        children:
        -   _type: InputProgramParameter
            comment: "There should also be, in the input file after the numbers of\
                \ species and characters, an A on the first line of the file. There\
                \ must also be, before the character data, a line or lines giving\
                \ the ancestral states for each character. It will look like the data\
                \ for a species (the ancestor). It must start with the letter A in\
                \ the first column. There then follow enough characters or blanks\
                \ to complete the full length of a species name (e. g. ANCESTOR).\
                \ Then the states which are\n              ancestral for the individual\
                \ characters follow. These may be 0, 1 or ?, the latter indicating\
                \ that the ancestral state is unknown.Examples:ANCESTOR 0010011"
            prompt: Use ancestral states in input file (A)
            name: use_ancestral_state
            argpos: '1'
            format: {perl: '($value) ? "A\\n" : ""', python: '( "" , "A\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            prompt: Specify minimum clique size? (C)
            name: spec_min_clique_size
            argpos: '3'
            format: {perl: '($value) ? "C\\n$min_clique_size\\n" : ""', python: '(
                    "" , "C\n"+ str( min_clique_size ) + "\n")[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            comment: This option indicates that you wish to specify a minimum clique
                size and print out all cliques (and their associated trees) greater
                than or equal to than that size.
            prompt: Minimum clique size
            name: min_clique_size
            argpos: '2'
            format: {perl: '""', python: '""'}
            precond: spec_min_clique_size
            mandatory: true
            type: {_type: IntegerType}
            paramfile: clique.params
    -   _type: InputParagraph
        prompt: Bootstrap options
        name: bootstrap
        children:
        -   _type: InputProgramParameter
            prompt: Analyze multiple data sets (M)
            name: multiple_dataset
            argpos: '10'
            format: {perl: '($value) ? "M\\nD\\n$datasets_number\\n" : ""', python: '(
                    "" , "M\nD\n"+ str( datasets_number ) +"\n" )[ value ]'}
            precond: {'#not': multiple_dataweights}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            prompt: How many data sets (D)
            name: datasets_number
            argpos: '9'
            format: {perl: '""', python: '""'}
            precond: multiple_dataset
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Compute a consensus tree
            name: consense
            argpos: '10'
            format: {perl: '($value )? " && cp infile clique.infile &&  cp clique.outtree
                    intree && consense <consense.params && mv outtree consense.outtree
                    && mv outfile consense.outfile" : ""', python: '( "", " && cp
                    infile clique.infile &&  cp clique.outtree intree && consense
                    <consense.params && mv outtree consense.outtree && mv outfile
                    consense.outfile" )[ value ]'}
            precond:
                '#and': [multiple_dataset, print_treefile]
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Weigth options
        name: weigths
        children:
        -   _type: InputProgramParameter
            prompt: Sites weighted? (W)
            name: site_weigthed
            argpos: '19'
            format: {perl: '( $value ) ? "W\\n" : ""', python: '( "" , "W\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            prompt: Analyze multiple data Weigths (M)
            name: multiple_dataweights
            argpos: '20'
            format: {perl: '($value) ? "M\\nW\\n$dataweights_number\\n" : ""', python: '(
                    "" , "M\nW\n"+ str( dataweights_number ) +"\n" )[ value ]'}
            precond: {'#not': multiple_dataset}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            prompt: How many sets of weights?
            name: dataweights_number
            argpos: '21'
            format: {perl: '""', python: '""'}
            precond: multiple_dataweights
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Weight file
            name: weigth_file
            argpos: '-20'
            format: {perl: '" ln -s $value weights && "', python: '" ln -s " + str(
                    value ) +" weights && "'}
            precond:
                '#or': [site_weigthed, multiple_dataweights]
            mandatory: true
    -   _type: InputParagraph
        prompt: Output options
        name: output
        children:
        -   _type: InputProgramParameter
            prompt: Print out compatibility matrix (3)
            name: print_matrix
            argpos: '1'
            format: {perl: '($value) ? "3\\n" : ""', python: '( "" , "3\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            comment: Tells the program to print a semi-graphical picture of the tree
                in the outfile.
            prompt: Print out tree (4)
            name: print_tree
            argpos: '1'
            format: {perl: '($value) ? "" : "4\\n"', python: '( "4\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            comment: Tells the program to save the tree in a treefile (a standard
                representation of trees where the tree is specified by a nested pairs
                of parentheses, enclosing names and separated by commas).
            prompt: Write out trees onto tree file (5)
            name: print_treefile
            argpos: '1'
            format: {perl: '($value) ? "" : "5\\n"', python: '( "5\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
        -   _type: InputProgramParameter
            prompt: Print out the data at start of run (1)
            name: printdata
            argpos: '1'
            format: {perl: '($value) ? "1\\n" : ""', python: '( "" , "1\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: clique.params
    -   _type: InputParagraph
        prompt: Other options
        name: other_options
        children:
        -   _type: InputProgramParameter
            prompt: Outgroup root (O)
            name: outgroup
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "O\\n$value\\n"
                    : ""', python: '("" , "O\\n%s\\n" % str(value) )[ value is not
                    None and value != vdef ]'}
            type: {_type: IntegerType, default: 1}
            paramfile: clique.params
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: clique.params
    -   _type: InputProgramParameter
        name: terminal_type
        argpos: '-1'
        format: {perl: '"0\\n"', python: '"0\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: clique.params
    -   _type: InputProgramParameter
        name: consense_confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputProgramParameter
        name: consense_terminal_type
        argpos: '-2'
        format: {perl: '"T\\n"', python: '"T\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Output file
        name: outfile
        filenames: {perl: '"clique.outfile"', python: '"clique.outfile"'}
    -   _type: OutputProgramParameter
        prompt: Output tree
        name: treefile
        filenames: {perl: '"clique.outtree"', python: '"clique.outtree"'}
        precond: print_treefile
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
    -   _type: OutputProgramParameter
        prompt: Consense output file
        name: consense_outfile
        filenames: {perl: '"consense.outfile"', python: '"consense.outfile"'}
        precond: consense
    -   _type: OutputProgramParameter
        prompt: Consense output tree
        name: consense_treefile
        filenames: {perl: '"consense.outtree"', python: '"consense.outtree"'}
        precond: consense
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
comment: 'This program uses the compatibility method for unrooted two-state characters
    to obtain the largest cliques of characters and the trees

    which they suggest.'
operations: ['EDAM_operation:0546']
topics: ['EDAM_topic:0084']
documentation_links: ['http://bioweb2.pasteur.fr/docs/phylip/doc/clique.html']
public_name: clique
command: {path: null, value: null}
