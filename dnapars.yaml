_type: Program
name: dnapars
title: dnapars
description: DNA Parsimony Program
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: dnapars
        argpos: '0'
        format: {perl: '"dnapars <dnapars.params"', python: '"dnapars <dnapars.params"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: The input file must contained aligned sequences in PHYLIP format
            obtained by sequence alignment programs.
        prompt: Alignment File (infile)
        name: infile
        ctrl:
        -   message: the name of this data can't be "infile","outfile","outtree","intree"
            test:
                value:
                    '#nin': [outfile, infile, outtree, intree]
        simple: true
        argpos: '-10'
        format: {perl: '"ln -s $infile infile && "', python: '"ln -s " + str( infile
                ) + " infile && "'}
        precond:
            infile: {'#ne': infile}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1955']
            data_terms: EDAM_data:1383
    -   _type: InputParagraph
        prompt: Parsimony options
        name: dnapars_opt
        children:
        -   _type: InputProgramParameter
            prompt: Use Threshold parsimony (T)
            name: use_threshold
            argpos: '2'
            format: {perl: '($value) ? "T\\n$threshold\\n" : ""', python: '( "" ,
                    "T\n" + str( threshold ) + "\n" )[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            comment: 'Thresholds less than or equal to 1.0 do not have any meaning
                and should not be used: they will result in a tree dependent only
                on the input order of species and not at all on the data'
            prompt: Value for threshold parsimony
            name: threshold
            argpos: '3'
            precond: use_threshold
            mandatory: true
            type: {_type: IntegerType}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            prompt: Use Transversion parsimony (N)
            name: use_transversion
            argpos: '5'
            format: {perl: '($value) ? "N\\n" : ""', python: '( "" , "N\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
    -   _type: InputParagraph
        prompt: Bootstrap options ( multiple dataset )
        name: bootstrap
        children:
        -   _type: InputProgramParameter
            comment: By selecting this option, the bootstrap will be performed on
                your sequence file. So you don't need to perform a separated seqboot
                before.Don't give an already bootstrapped file to the program, this
                won't work!You can't use "Randomize options" and "Bootstrap options"
                at the same time.
            prompt: Perform a bootstrap before analysis
            name: seqboot
            simple: true
            argpos: '-5'
            format: {perl: '($value) ? "seqboot <seqboot.params && mv outfile seqboot.outfile
                    && rm infile  && ln -s seqboot.outfile infile && " : ""', python: '(
                    "" , "seqboot <seqboot.params && mv outfile seqboot.outfile &&
                    rm infile  && ln -s seqboot.outfile infile && " )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "1. The bootstrap. Bootstrapping was invented by Bradley Efron\
                \ in 1979, and its use in phylogeny estimation was introduced by me\
                \ (Felsenstein, 1985b). It involves creating a new data set by sampling\
                \ N characters randomly with replacement, so that the resulting data\
                \ set has the same size as the original, but some characters have\
                \ been left out and others are duplicated. The random variation of\
                \ the results from analyzing these bootstrapped data sets can be shown\
                \ statistically to be\n              typical of the variation that\
                \ you would get from collecting new data sets. The method assumes\
                \ that the characters evolve independently, an assumption that may\
                \ not be realistic for many kinds of data.2. Delete-half-jackknifing.\
                \ This alternative to the bootstrap involves sampling a random half\
                \ of the characters, and including them in the data but dropping the\
                \ others. The resulting data sets are half the size of the original,\
                \ and no characters are duplicated. The random variation from doing\
                \ this should be very similar to that obtained from the bootstrap.\
                \ The method is advocated by Wu (1986).3. Permuting species for each\
                \ characters. This method of resampling (well, OK, it may not be best\
                \ to call it resampling) was introduced by Archie (1989) and Faith\
                \ (1990; see also Faith and Cranston, 1991). It involves permuting\
                \ the columns of the data matrix separately. This produces data matrices\
                \ that have the same number and kinds of characters but no taxonomic\
                \ structure. It is used for different purposes than the bootstrap,\
                \ as it tests not the variation around an estimated tree but the hypothesis\
                \ that there is no taxonomic structure in the data: if a statistic\
                \ such as number of steps is significantly smaller in the actual data\
                \ than it is in replicates that are permuted, then we can argue that\
                \ there is some taxonomic structure in the data (though perhaps it\
                \ might be just the presence of aa pair of sibling species).4. Permuting\
                \ characters order. This simply permutes the order of the characters,\
                \ the same reordering being applied to all species. For many methods\
                \ of tree inference this will make no difference to the outcome (unless\
                \ one has rates of evolution correlated among adjacent sites). It\
                \ is included as a possible step in carrying out a permutation test\
                \ of homogeneity of characters (such as the Incongruence Length Difference\
                \ test).5. Permuting characters separately for each species. This\
                \ is a method introduced by Steel, Lockhart, and Penny (1993) to permute\
                \ data so as to destroy all phylogenetic structure, while keeping\
                \ the base composition of each species the same as before. It shuffles\
                \ the character order separately for each species."
            prompt: Resampling methods (J)
            name: Method
            simple: true
            argpos: '1'
            precond: seqboot
            mandatory: true
            type: {_type: StringType, default: bootstrap}
            paramfile: seqboot.params
        -   _type: InputProgramParameter
            prompt: How many replicates (R)
            name: replicates
            simple: true
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "R\\n$value\\n"
                    : ""', python: '( "" , "R\n" + str( value ) +"\n" )[ value is
                    not None and value != vdef ]'}
            precond: seqboot
            type: {_type: IntegerType, default: 100}
            paramfile: seqboot.params
        -   _type: InputProgramParameter
            prompt: Random number seed (must be odd)
            name: seqboot_seed
            simple: true
            argpos: '1010'
            format: {perl: '"$value\\n"', python: str( value ) + "\n"}
            precond: seqboot
            mandatory: true
            type: {_type: IntegerType}
            paramfile: seqboot.params
        -   _type: InputProgramParameter
            prompt: Number of times to jumble
            name: seqboot_times2jumble
            simple: true
            precond: seqboot
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            name: multiple_dataset
            argpos: '1'
            format: {perl: '"M\\nD\\n$replicates\\n$seqboot_seed\\n$times2jumble\\n"',
                python: '"M\nD\n" + str( replicates ) + "\n" + str(seqboot_seed) +
                    "\n"+ str( seqboot_times2jumble ) + "\n"'}
            precond: seqboot
            hidden: true
            type: {_type: StringType}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            name: bootconfirm
            argpos: '1000'
            format: {perl: '"Y\\n"', python: '"Y\n"'}
            precond: seqboot
            hidden: true
            type: {_type: StringType}
            paramfile: seqboot.params
        -   _type: InputProgramParameter
            name: bootterminal_type
            argpos: '-1'
            format: {perl: '"0\\n"', python: '"0\n"'}
            precond: seqboot
            hidden: true
            type: {_type: StringType}
            paramfile: seqboot.params
        -   _type: InputProgramParameter
            prompt: Compute a consensus tree
            name: consense
            simple: true
            argpos: '100'
            format: {perl: '($value) ? " && cp infile dnapars.infile &&  cp dnapars.outtree
                    intree && consense <consense.params && mv outtree consense.outtree
                    && mv outfile consense.outfile" : ""', python: '( "" , " && cp
                    infile dnapars.infile && cp dnapars.outtree intree && consense
                    <consense.params && mv outtree consense.outtree && mv outfile
                    consense.outfile" )[ value ]'}
            precond:
                '#and': [seqboot, print_treefile]
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        comment: Use these options only if you have only one data set
        prompt: Randomize options ( one dataset )
        name: jumble_opt
        children:
        -   _type: InputProgramParameter
            prompt: Randomize (jumble) input order (J)
            name: jumble
            argpos: '20'
            format: {perl: '($value and not $seqboot )? "J\\n$jumble_seed\\n$jumble_times\\n"
                    : ""', python: '( "" , "J\n" + str( jumble_seed ) + "\n" + str(
                    jumble_times ) +"\n" )[ value and not seqboot ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            prompt: Random number seed for jumble (must be odd)
            name: jumble_seed
            precond: jumble
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Number of times to jumble
            name: jumble_times
            precond: jumble
            mandatory: true
            type: {_type: IntegerType, default: 1}
    -   _type: InputParagraph
        prompt: User tree options
        name: user_tree_opt
        children:
        -   _type: InputProgramParameter
            comment: 'To give your tree to the program, you must normally put it in
                the alignment file, after the sequences, preceded by a line indicating
                how many trees you give.Here, this will be automatically appended:
                just give a treefile and the number of trees in it.'
            prompt: 'Use User tree (default: no, search for best tree) (U)'
            name: user_tree
            argpos: '1'
            format: {perl: '($value)? "U\\n" : ""', python: '( "" , "U\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            comment: Give a tree whenever the infile does not already contain the
                tree.
            prompt: User Tree file
            name: tree_file
            ctrl:
            -   message: the name of this data can't be "infile","outfile","outtree","intree"
                test:
                    value:
                        '#nin': [outfile, infile, outtree, intree]
            argpos: '-1'
            format: {perl: '(defined $value) ? "ln -s $tree_file intree; " : ""',
                python: '( "" , "ln -s " + str( tree_file ) + " intree; " )[ value
                    is not None ]'}
            precond: user_tree
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1910']
                data_terms: EDAM_data:0872
    -   _type: InputParagraph
        prompt: Weight options
        name: weight_opt
        children:
        -   _type: InputProgramParameter
            prompt: Use weights for sites (W)
            name: weights
            argpos: '1'
            format: {perl: '($value) ? "W\\n" : ""', python: '( "" , "W\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            prompt: Weights file
            name: weights_file
            ctrl:
            -   message: the name of this data can't be "infile","outfile","outtree","intree"
                test:
                    value:
                        '#nin': [outfile, infile, outtree, intree]
            argpos: '-1'
            format: {perl: '(defined $value) ? "ln -s $weights_file weights; " : ""',
                python: '( "" , "ln -s " + str( weights_file ) + " weights; " )[ value
                    is not None ]'}
            precond: weights
            mandatory: true
    -   _type: InputParagraph
        prompt: Output options
        name: output
        children:
        -   _type: InputProgramParameter
            comment: Tells the program to print a semi-graphical picture of the tree
                in the outfile.
            prompt: Print out tree (3)
            name: print_tree
            argpos: '1'
            format: {perl: '($value) ? "" : "3\\n"', python: '( "3\n" , "")[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            prompt: Print out steps in each site (4)
            name: print_steps
            argpos: '1'
            format: {perl: '($value) ? "4\\n" : ""', python: '( "" , "4\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            prompt: Print sequences at all nodes of tree (5)
            name: print_sequences
            argpos: '1'
            format: {perl: '($value) ? "5\\n" : ""', python: '( "" , "5\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            comment: Tells the program to save the tree in a tree file (outtree) (a
                standard representation of trees where the tree is specified by a
                nested pairs of parentheses, enclosing names and separated by commas).
            prompt: Write out trees onto tree file (6)
            name: print_treefile
            argpos: '1'
            format: {perl: '($value) ? "" : "6\\n"', python: '( "6\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
        -   _type: InputProgramParameter
            prompt: Print out the data at start of run (1)
            name: printdata
            argpos: '1'
            format: {perl: '($value) ? "1\\n" : ""', python: '( "" , "1\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: dnapars.params
    -   _type: InputParagraph
        prompt: Other options
        name: other_options
        children:
        -   _type: InputProgramParameter
            comment: The O (Outgroup) option specifies which species is to have the
                root of the tree be on the line leading to it.For example, if the
                outgroup is a species "Mouse" then the root of the tree will be placed
                in the middle of the branch which is connected to this species, with
                Mouse branching off on one side of the root and the lineage leading
                to the rest of the tree on the other.This option is toggle on by choosing
                the number of the outgroup (the species being taken in the numerical
                order that they occur in the input file).Outgroup-rooting will not
                be attempted  if it is a user-defined tree, despite your invoking
                the option.When it is used, the tree as printed out is still listed
                as being an unrooted tree, though the outgroup is connected to the
                bottommost node so that it is easy to visually convert the tree into
                rooted form.
            prompt: Outgroup species (J)
            name: outgroup
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "O\\n$value\\n"
                    : ""', python: '( "" , "O\n" + str( value ) + "\n" )[ value is
                    not None and value != vdef ]'}
            type: {_type: IntegerType, default: 1}
            paramfile: dnapars.params
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: dnapars.params
    -   _type: InputProgramParameter
        name: terminal_type
        argpos: '-1'
        format: {perl: '"0\\n"', python: '"0\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: dnapars.params
    -   _type: InputProgramParameter
        name: consense_confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputProgramParameter
        name: consense_terminal_type
        argpos: '-2'
        format: {perl: '"T\\n"', python: '"T\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputProgramParameter
        name: consense_outgroup
        argpos: '1000'
        format: {perl: '"O\\n$outgroup\\n"', python: '"O\n" + str( outgroup ) + "\n"'}
        precond:
            '#and':
            - consense
            - outgroup
            -   outgroup: {'#gt': '1'}
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Outfile
        name: outfile
        filenames: {perl: dnapars.outfile, python: '''dnapars.outfile'''}
    -   _type: OutputProgramParameter
        prompt: Tree file
        name: treefile
        filenames: {perl: dnapars.outtree, python: '''dnapars.outtree'''}
        precond: print_treefile
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
    -   _type: OutputProgramParameter
        prompt: seqboot outfile
        name: seqboot_out
        filenames: {perl: '"seqboot.outfile"', python: '"seqboot.outfile"'}
        precond: seqboot
    -   _type: OutputProgramParameter
        prompt: Consense outfile
        name: consense_outfile
        filenames: {perl: '"consense.outfile"', python: '"consense.outfile"'}
        precond: consense
    -   _type: OutputProgramParameter
        prompt: Consense tree file
        name: consense_treefile
        filenames: {perl: '"consense.outtree"', python: '"consense.outtree"'}
        precond: consense
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
comment: This   program  carries  out   unrooted  parsimony (analogous to Wagner trees)
    (Eck and Dayhoff, 1966; Kluge and Farris, 1969) on DNA sequences.  The method
    of Fitch (1971) is used to count the number of changes of base needed on a given
    tree.
operations: ['EDAM_operation:0545']
topics: ['EDAM_topic:0084']
documentation_links: ['http://bioweb2.pasteur.fr/docs/phylip/doc/dnapars.html']
public_name: dnapars
command: {path: null, value: null}
