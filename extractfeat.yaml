!mobyle/program
name: extractfeat
title: extractfeat
description: Extract features from sequence(s)
inputs: !mobyle/inputparagraph
    children:
    - !mobyle/inputprogramparagraph
        prompt: Input section
        name: input
        children:
        - !mobyle/inputprogramparameter
            prompt: Sequence option
            format: ("", " -sequence=" + str(value))[value is not None]
            simple: true
            argpos: 1
            mandatory: true
            name: sequence
            command: false
            type: !mobyle/formattedtype
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188']
                data_terms: ['EDAM_data:2044']
    - !mobyle/inputprogramparagraph
        prompt: Additional section
        name: additional
        children:
        - !mobyle/inputprogramparameter
            comment: If this value is greater than 0 then that number of bases or
                residues before the feature are included in the extracted  sequence.
                This allows you to get the context of the feature. If  this value
                is negative then the start of the extracted sequence  will be this
                number of bases/residues before the end of the  feature. So a value
                of '10' will start the extraction 10  bases/residues before the start
                of the sequence, and a value of  '-10' will start the extraction 10
                bases/residues before the end  of the feature. The output sequence
                will be padded with 'N' or 'X'  characters if the sequence starts
                after the required start of the  extraction.
            prompt: Amount of sequence before feature to extract
            format: ("", " -before=" + str(value))[value is not None and value!=vdef]
            argpos: 2
            name: before
            command: false
            type: !mobyle/integertype {default: 0}
        - !mobyle/inputprogramparameter
            comment: If this value is greater than 0 then that number of bases or
                residues after the feature are included in the extracted  sequence.
                This allows you to get the context of the feature. If  this value
                is negative then the end of the extracted sequence will  be this number
                of bases/residues after the start of the feature.  So a value of '10'
                will end the extraction 10 bases/residues after  the end of the sequence,
                and a value of '-10' will end the  extraction 10 bases/residues after
                the start of the feature. The  output sequence will be padded with
                'N' or 'X' characters if the  sequence ends before the required end
                of the extraction.
            prompt: Amount of sequence after feature to extract
            format: ("", " -after=" + str(value))[value is not None and value!=vdef]
            argpos: 3
            name: after
            command: false
            type: !mobyle/integertype {default: 0}
        - !mobyle/inputprogramparameter
            comment: "By default any feature source in the feature table is shown.\
                \ You can set this to match any feature source you wish to  show.\
                \ \n  The source name is usually either the name of the program that\
                \  detected the feature or it is the feature table (eg: EMBL) that\
                \  the feature came from. \n  The source may be wildcarded by using\
                \ '*'. \n  If you wish to show more than one source, separate their\
                \ names  with the character '|', eg: \n  gene* | embl"
            prompt: Source of feature to display
            format: ("", " -source=" + str(value))[value is not None]
            argpos: 4
            name: source
            command: false
            type: !mobyle/stringtype {}
        - !mobyle/inputprogramparameter
            comment: "By default every feature in the feature table is extracted.\
                \ You can set this to be any feature type you wish to extract. \n\
                \  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the EMBL \
                \ feature types and see the Uniprot user manual in  http://www.uniprot.org/manual/sequence_annotation\
                \  for a list of the Uniprot feature types. \n  The type may be wildcarded\
                \ by using '*'. \n  If you wish to extract more than one type, separate\
                \ their names  with the character '|', eg: \n  *UTR | intron"
            prompt: Type of feature to extract
            format: ("", " -type=" + str(value))[value is not None]
            argpos: 5
            name: type
            command: false
            type: !mobyle/stringtype {}
        - !mobyle/inputprogramparameter
            comment: By default any feature type in the feature table is extracted.
                You can set this to match any feature sense you wish. 0  - any sense,
                1 - forward sense, -1 - reverse sense
            prompt: Sense of feature to extract
            format: ("", " -sense=" + str(value))[value is not None and value!=vdef]
            argpos: 6
            name: sense
            command: false
            type: !mobyle/integertype {default: 0}
        - !mobyle/inputprogramparameter
            comment: Minimum score of feature to extract (see also maxscore)
            prompt: Minimum score of feature to extract
            format: ("", " -minscore=" + str(value))[value is not None and value!=vdef]
            argpos: 7
            name: minscore
            command: false
            type: !mobyle/floattype {default: 0.0}
        - !mobyle/inputprogramparameter
            comment: "Maximum score of feature to extract. \n If both minscore and\
                \ maxscore are zero (the default),  then any score is ignored"
            prompt: Maximum score of feature to extract
            format: ("", " -maxscore=" + str(value))[value is not None and value!=vdef]
            argpos: 8
            name: maxscore
            command: false
            type: !mobyle/floattype {default: 0.0}
        - !mobyle/inputprogramparameter
            comment: "Tags are the types of extra values that a feature may have.\
                \ For example in the EMBL feature table, a 'CDS' type of feature \
                \ may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                \ '/evidence', '/exception', '/function', '/gene',  '/label', '/map',\
                \ '/note', '/number', '/partial', '/product',  '/protein_id', '/pseudo',\
                \ '/standard_name', '/translation',  '/transl_except', '/transl_table',\
                \ or '/usedin'. Some of these  tags also have values, for example\
                \ '/gene' can have the value of  the gene name. \n  By default any\
                \ feature tag in the feature table is extracted. You  can set this\
                \ to match any feature tag you wish to show. \n  The tag may be wildcarded\
                \ by using '*'. \n  If you wish to extract more than one tag, separate\
                \ their names  with the character '|', eg: \n  gene | label"
            prompt: Tag of feature to extract
            format: ("", " -tag=" + str(value))[value is not None]
            argpos: 9
            name: tag
            command: false
            type: !mobyle/stringtype {}
        - !mobyle/inputprogramparameter
            comment: "Tag values are the values associated with a feature tag. Tags\
                \ are the types of extra values that a feature may have. For  example\
                \ in the EMBL feature table, a 'CDS' type of feature may  have the\
                \ tags '/codon', '/codon_start', '/db_xref', '/EC_number',  '/evidence',\
                \ '/exception', '/function', '/gene', '/label', '/map',  '/note',\
                \ '/number', '/partial', '/product', '/protein_id',  '/pseudo', '/standard_name',\
                \ '/translation', '/transl_except',  '/transl_table', or '/usedin'.\
                \ Only some of these tags can have  values, for example '/gene' can\
                \ have the value of the gene name.  By default any feature tag value\
                \ in the feature table is shown.  You can set this to match any feature\
                \ tag value you wish to show. \n  The tag value may be wildcarded\
                \ by using '*'. \n  If you wish to show more than one tag value, separate\
                \ their names  with a space or the character '|', eg: \n  pax* | 10"
            prompt: Value of feature tags to extract
            format: ("", " -value=" + str(value))[value is not None]
            argpos: 10
            name: value
            command: false
            type: !mobyle/stringtype {}
    - !mobyle/inputprogramparagraph
        prompt: Output section
        name: output
        children:
        - !mobyle/inputprogramparameter
            comment: Some features, such as CDS (coding sequence) and mRNA are composed
                of introns concatenated together. There may be other  forms of 'joined'
                sequence, depending on the feature table. If  this option is set TRUE,
                then any group of these features will be  output as a single sequence.
                If the 'before' and 'after'  qualifiers have been set, then only the
                sequence before the first  feature and after the last feature are
                added.
            prompt: Output introns etc. as one sequence
            format: ("", " -join")[ bool(value) ]
            argpos: 11
            name: join
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparameter
            comment: To aid you in identifying the type of feature that has been output,
                the type of feature is added to the start of the  description of the
                output sequence. Sometimes the description of a  sequence is lost
                in subsequent processing of the sequences file,  so it is useful for
                the type to be a part of the sequence ID name.  If you set this to
                be TRUE then the name is added to the ID name  of the output sequence.
            prompt: Append type of feature to output sequence name
            format: ("", " -featinname")[ bool(value) ]
            argpos: 12
            name: featinname
            command: false
            type: !mobyle/booleantype {default: false}
        - !mobyle/inputprogramparameter
            comment: "To aid you in identifying some further properties of a feature\
                \ that has been output, this lets you specify one or more  tag names\
                \ that should be added to the output sequence Description  text, together\
                \ with their values (if any). For example, if this is  set to be 'gene',\
                \ then if any output feature has the tag (for  example) '/gene=BRCA1'\
                \ associated with it, then the text  '(gene=BRCA1)' will be added\
                \ to the Description line. Tags are the  types of extra values that\
                \ a feature may have. For example in the  EMBL feature table, a 'CDS'\
                \ type of feature may have the tags  '/codon', '/codon_start', '/db_xref',\
                \ '/EC_number', '/evidence',  '/exception', '/function', '/gene',\
                \ '/label', '/map', '/note',  '/number', '/partial', '/product', '/protein_id',\
                \ '/pseudo',  '/standard_name', '/translation', '/transl_except',\
                \  '/transl_table', or '/usedin'. Some of these tags also have  values,\
                \ for example '/gene' can have the value of the gene name. \n  By\
                \ default no feature tag is displayed. You can set this to match \
                \ any feature tag you wish to show. \n  The tag may be wildcarded\
                \ by using '*'. \n  If you wish to extract more than one tag, separate\
                \ their names  with the character '|', eg: \n  gene | label"
            prompt: Feature tag names to add to the description
            format: ("", " -describe=" + str(value))[value is not None]
            argpos: 13
            name: describe
            command: false
            type: !mobyle/stringtype {}
        - !mobyle/inputprogramparameter
            prompt: Name of the output sequence file (outseq)
            format: ("" , " -outseq=" + str(value))[value is not None]
            argpos: 14
            name: outseq
            command: false
            type: !mobyle/stringtype {default: extractfeat.outseq}
        - !mobyle/inputprogramparameter
            prompt: Choose the sequence output format
            format: ("", " -osformat=" + str(value))[value is not None and value!=vdef]
            argpos: 15
            name: osformat_outseq
            command: false
            type: !mobyle/stringtype
                default: FASTA
                options:
                - {label: Embl, value: EMBL}
                - {label: Fasta, value: FASTA}
                - {label: Gcg, value: GCG}
                - {label: Genbank, value: GENBANK}
                - {label: Nbrf, value: NBRF}
                - {label: Pir, value: PIR}
                - {label: Raw, value: RAW}
                - {label: Swissprot, value: SWISSPROT}
    - !mobyle/inputprogramparameter
        prompt: Turn off any prompting
        format: '" -auto -stdout"'
        argpos: 16
        name: auto
        command: false
        hidden: true
        type: !mobyle/stringtype {}
outputs: !mobyle/outputparagraph
    children:
    - !mobyle/outputprogramparagraph
        prompt: Output section
        name: output
        children:
        - !mobyle/outputprogramparameter
            prompt: Outseq_out option
            filenames: outseq
            name: outseq_out
            type: !mobyle/formattedtype
                data_terms: ['EDAM_data:2044']
    - !mobyle/outputprogramparameter
        prompt: Standard output
        filenames: '"extractfeat.out"'
        name: stdout
        output_type: stdout
        type: !mobyle/formattedtype
            data_terms: ['EDAM_data:2048']
    - !mobyle/outputprogramparameter
        prompt: Standard error
        filenames: '"extractfeat.err"'
        name: stderr
        type: !mobyle/formattedtype
            data_terms: ['EDAM_data:2048']
operations: ['EDAM_operation:0254']
topics: ['EDAM_topic:0160', 'EDAM_topic:0220']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/extractfeat.html', 'http://emboss.sourceforge.net/docs/themes']
command: extractfeat
env: {}
