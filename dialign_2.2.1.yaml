_type: Program
name: dialign
version: 2.2.1
title: DIALIGN
description: DNA and protein sequence alignment based on segment-to-segment comparison
authors: Morgenstern, Dress, Werner
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: Sequences
        name: sequence
        simple: true
        argpos: '100'
        format: {perl: '" $value"', python: '" " + str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2044
    -   _type: InputProgramParameter
        prompt: Nucleic acid or protein alignment (-n)
        name: protein_dna
        simple: true
        argpos: '2'
        format: {perl: '(defined $value and $value ne $vdef) ? " -n" : ""', python: '(
                ""  , " -n" )[ value is not None and value != vdef]'}
        mandatory: true
        type:
            _type: StringType
            default: p
            options:
            - {label: Protein (p), value: p}
            - {label: Nucleic (n), value: n}
    -   _type: InputParagraph
        prompt: Others options
        name: dialign_opt
        children:
        -   _type: InputProgramParameter
            prompt: Threshold (-thr)
            name: threshold
            format: {perl: '(defined $value and $value != $vdef) ? " -thr $value"
                    : ""', python: '( ""  , " -thr " + str(value) )[ value is not
                    None and value != vdef]'}
            type: {_type: FloatType, default: 0.0}
        -   _type: InputProgramParameter
            comment: '"maximum or minimum linkage" clustering used to construct sequence
                tree (instead of UPGMA).'
            prompt: Clustering type used to construct sequence tree
            name: cluster
            format: {perl: '(defined $value and $value ne $vdef) ? " -$value" : ""',
                python: '( ""  , " -" +str(value) )[ value is not None and value !=vdef]'}
            type:
                _type: StringType
                default: 'null'
                options:
                - {label: UPGMA, value: 'null'}
                - {label: Maximum linkage (-max_link), value: max_link}
                - {label: Minimum linkage (-min_link), value: min_link}
        -   _type: InputProgramParameter
            comment: "iterative scoring scheme (fragment scores are based on\n   \
                \              conditional probabilities given the previously aligned\n\
                \                 fragments. I.e. the probability of a fragment --\
                \ and\n                 therefore its score -- is not based on the\
                \ probability\n                 of random occurrence in the input\
                \ sequences but rather on\n                 the probability of occurrence\
                \ between those fragments\n                 that have already been\
                \ accepted in previous iteration\n                 steps)."
            prompt: Iterative scoring scheme (-it)
            name: iterative
            format: {perl: '($value) ? " -it" : ""', python: '( ""  , " -it" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "overlap weights switched off (by default,\n                \
                \ overlap weights are used if up to 35 sequences are\n           \
                \      aligned). This option speeds up the alignment but may lead\n\
                \                 to reduced alignment quality."
            prompt: Overlap weights (-iw)
            name: overlap
            format: {perl: '($value) ? " -iw" : ""', python: '( ""  , " -iw" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputParagraph
            prompt: DNA options
            name: dna_opt
            precond: {protein_dna: n}
            children:
            -   _type: InputProgramParameter
                comment: Input sequences are nucleic acid sequences and `nucleic acid
                    segments' are translated to `peptide segments'.
                prompt: Translation of nucleotide diagonals into peptide diagonals
                    (-nt)
                name: translation
                format: {perl: '($value) ? " -nt" : ""', python: '( ""  , " -nt" )[
                        value ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: If segments are translated, not only the `Watson strand'
                    but also the `Crick strand' is looked at
                prompt: Strand to looked at Watson and Crick strands (-cs)
                name: translation_strand
                format: {perl: '($value) ? " -cs" : ""', python: '( ""  , " -cs" )[
                        value ]'}
                precond:
                    '#or': [translation, mix]
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: '`mixed alignments'' consisting of P-fragments and N-fragments
                    if nucleic acid sequences are aligned.'
                prompt: Mixed alignments (-ma)
                name: mix
                format: {perl: '($value) ? " -ma" : ""', python: '( ""  , " -ma" )[
                        value ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: "Non-translated nucleic acid fragments are taken\n      \
                    \           into account only if they start with at least two\
                    \ matches.\n                 Speeds up DNA alignment at the expense\
                    \ of sensitivity."
                prompt: Dna alignment speed up (-ds)
                name: speed
                format: {perl: '($value) ? " -ds" : ""', python: '( ""  , " -ds" )[
                        value ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: "combines the following options:\n                 -ma, -it,\
                    \ -thr 2, -lmax 30, -smin 8, -nta, -ff,\n                 -fop,\
                    \ -ff, -cs, -ds, -pst"
                prompt: Long genomic sequences (-lgs)
                name: long_genomic
                format: {perl: '($value) ? " -lgs" : ""', python: '( ""  , " -lgs"
                        )[ value ]'}
                precond: {'#not': long_genomic_pep}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: Like "-lgs" but with all segment pairs assessed at the  peptide
                    level (rather than 'mixed alignments' as with the"-lgs" option).
                    Therefore faster than -lgs but not very sensitive for non-coding
                    regions.
                prompt: Long genomic sequences (-lfs_t)
                name: long_genomic_pep
                format: {perl: '($value) ? " -lgs_t" : ""', python: '( ""  , " -lgs_t"
                        )[ value ]'}
                precond: {'#not': long_genomic}
                type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Output options
        name: output_options
        children:
        -   _type: InputProgramParameter
            comment: 'The number of `*'' characters below the alignment reflects the
                degree of local similarity among sequences. More precisely: They represent
                the sum of `weights'' of diagonals connecting residues at the respective
                position.By default, no stars are used but numbers between 0 and 9,
                instead.'
            prompt: Maximum number of * characters representing degree similarity
                (-stars)
            name: max_simil
            format: {perl: '(defined $value) ? " -stars $value" : ""', python: '(
                    ""  , " -stars " + str(value) )[ value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: residues not belonging to selected fragments are replaced by
                `*' characters in output alignment (rather than being printed in lower-case
                characters)
            prompt: Mask not aligned residues (-mask)
            name: mask
            format: {perl: '($value) ? " -mask" : ""', python: '( ""  , " -mask" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: Be aware that only upper-case letters are regarded to be aligned
                in fasta output file.
            prompt: Alignment in fasta format (-fa)
            name: fasta
            format: {perl: '($value) ? " -fa" : ""', python: '( ""  , " -fa" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Output file
        name: ali
        filenames: {perl: '"*.cw"', python: '"*.cw"'}
    -   _type: OutputProgramParameter
        prompt: fasta alignment file
        name: fasta_alignment
        filenames: {perl: '"*.fa"', python: '"*.fa"'}
        precond: fasta
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:0863
operations: ['EDAM_operation:0492']
topics: ['EDAM_topic:0182']
references:
- {doi: null, label: 'B. Morgenstern (1999). DIALIGN 2: improvement of the segment-to-segment
        approach to multiple sequence alignment. Bioinformatics 15, 211 - 218.', url: null}
homepage_links: ['http://dialign.gobics.de/']
public_name: dialign
command: {path: null, value: dialign}
source_links: ['http://dialign.gobics.de/download/']
