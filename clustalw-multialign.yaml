_type: Program
name: clustalw-multialign
title: 'Clustalw: Multiple alignment'
description: Do full multiple alignment
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Data Input
        name: input
        children:
        -   _type: InputProgramParameter
            prompt: Sequences File ( a file containing several sequences ) (-infile)
            name: sequences_input
            simple: true
            argpos: '1'
            format: {perl: '" -infile=$value"', python: '" -infile=" + str( value
                    )'}
            precond:
                '#or':
                - {'#not': alignment_input}
                -   '#and': [sequences_input, alignment_input]
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200', 'EDAM_format:1948', 'EDAM_format:1927',
                    'EDAM_format:1935', 'EDAM_format:3312', 'EDAM_format:2188']
                data_terms: EDAM_data:2044
        -   _type: InputProgramParameter
            comment: "When the sequences are aligned (all sequences\n            \
                \  have the same length and at least one sequence has at least one\n\
                \              gap)"
            prompt: Aligned sequences
            name: alignment_input
            simple: true
            format: {perl: '" -infile=$value"', python: '" -infile=" + str( value
                    )'}
            precond:
                '#or':
                - {'#not': sequences_input}
                -   '#and': [sequences_input, alignment_input]
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1982', 'EDAM_format:2200']
                data_terms: EDAM_data:0863
    -   _type: InputParagraph
        prompt: General settings
        name: general
        children:
        -   _type: InputProgramParameter
            comment: 'slow: by dynamic programming (slow but accurate)fast: method
                of Wilbur and Lipman (extremely fast but approximate)'
            prompt: Toggle Slow/Fast pairwise alignments (-quicktree)
            name: quicktree
            simple: true
            format: {perl: '($value eq "fast") ? " -quicktree" : ""', python: '( ""
                    , " -quicktree")[ value == "fast"]'}
            mandatory: true
            type:
                _type: StringType
                default: slow
                options:
                - {label: Slow, value: slow}
                - {label: Fast, value: fast}
        -   _type: InputProgramParameter
            prompt: Protein or DNA (-type)
            name: typeseq
            format: {perl: '(defined $value) ? " -type=$value" : ""', python: '("",
                    " -type="+str(value))[value is not None]'}
            type:
                _type: StringType
                default: auto
                options:
                - {label: Automatic, value: auto}
                - {label: Protein, value: protein}
                - {label: DNA, value: dna}
    -   _type: InputParagraph
        comment: Multiple alignments are carried out in 3 stages :1) all sequences
            are compared to each other (pairwise alignments);2) a dendrogram (like
            a phylogenetic tree) is constructed, describing the approximate groupings
            of the sequences by similarity (stored in a file).3) the final multiple
            alignment is carried out, using the dendrogram as a guide.Pairwise alignment
            parameters control the speed/sensitivity of the initial alignments.Multiple
            alignment parameters control the gaps in the final multiple alignments.
        prompt: Multiple Alignments parameters
        name: multalign
        children:
        -   _type: InputProgramParameter
            prompt: Gap opening penalty (-gapopen)
            name: gapopen
            format: {perl: '(defined $value and $value != $vdef) ? " -gapopen=$value"
                    : ""', python: '( "" , " -gapopen=" + str( value ))[ value is
                    not None and value != vdef ]'}
            type: {_type: FloatType, default: 10.0}
        -   _type: InputProgramParameter
            prompt: Gap extension penalty (-gapext)
            name: gapext
            format: {perl: '(defined $value and $value != $vdef) ? " -gapext=$value"
                    : ""', python: '( "" , " -gapext=" + str( value ))[ value is not
                    None and value != vdef ]'}
            type: {_type: FloatType, default: 0.2}
        -   _type: InputProgramParameter
            comment: "End gap separation treats end gaps just\n\t\tlike internal gaps\
                \ for the purposes of avoiding gaps that\n\t\tare too close (set by\
                \ GAP SEPARATION DISTANCE above). If\n\t\tyou turn this off, end gaps\
                \ will be ignored for this\n\t\tpurpose. This is useful when you wish\
                \ to align fragments\n\t\twhere the end gaps are not biologically\
                \ meaningful."
            prompt: No end gap separation penalty (-endgaps)
            name: endgaps
            format: {perl: '($value) ? " -endgaps" : ""', python: '( "" ," -endgaps"
                    )[ value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "Gap separation distance tries to decrease\n\t\tthe chances of\
                \ gaps being too close to each other. Gaps\n\t\tthat are less than\
                \ this distance apart are penalised more\n\t\tthan other gaps. This\
                \ does not prevent close gaps; it makes\n\t\tthem less frequent, promoting\
                \ a block-like appearance of\n\t\tthe alignment."
            prompt: Gap separation penalty range (-gapdist)
            name: gapdist
            format: {perl: '(defined $value and $value != $vdef) ? " -gapdist=$value"
                    : ""', python: '( "" , " -gapdist=" + str( value ))[ value is
                    not None and value != vdef]'}
            type: {_type: IntegerType, default: 8}
        -   _type: InputProgramParameter
            comment: "Delays the alignment of the most distantly\n\t\trelated sequences\
                \ until after the most closely related\n\t\tsequences have been aligned.\
                \ The setting shows the percent\n\t\tidentity level required to delay\
                \ the addition of a\n\t\tsequence; sequences that are less identical\
                \ than this level\n\t\tto any other sequences will be aligned later."
            prompt: 'Delay divergent sequences : % ident. for delay (-maxdiv)'
            name: maxdiv
            format: {perl: '(defined $value and $value != $vdef) ? " -maxdiv=$value"
                    : ""', python: '( "" , " -maxdiv=" + str( value ))[ value is not
                    None and value != vdef ]'}
            type: {_type: IntegerType, default: 30}
        -   _type: InputProgramParameter
            prompt: File for new guide tree (-newtree)
            name: newtree
            format: {perl: '(defined $value) ? " -newtree=$value" : ""', python: '(
                    "" , " -newtree=" + str( value ))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: You can give a previously computed tree (.dnd file) - on the
                same data
            prompt: File for old guide tree (-usetree)
            name: usetree
            format: {perl: '(defined $value) ? " -usetree=$value" : ""', python: '(
                    "" ," -usetree=" + str( value ))[value is not None]'}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1910']
                data_terms: EDAM_data:0872
        -   _type: InputParagraph
            prompt: Protein parameters
            name: multalign_prot
            precond: {typeseq: protein}
            children:
            -   _type: InputProgramParameter
                comment: "There are three 'in-built' series of weight\n\t\tmatrices\
                    \ offered. Each consists of several matrices which\n\t\twork differently\
                    \ at different evolutionary distances. To\n\t\tsee the exact details,\
                    \ read the documentation. Crudely, we\n\t\tstore several matrices\
                    \ in memory, spanning the full range\n\t\tof amino acid distance\
                    \ (from almost identical sequences to\n\t\thighly divergent ones).\
                    \ For very similar sequences, it is\n\t\tbest to use a strict\
                    \ weight matrix which only gives a high\n\t\tscore to identities\
                    \ and the most favoured conservative\n\t\tsubstitutions. For more\
                    \ divergent sequences, it is\n\t\tappropriate to use 'softer'\
                    \ matrices which give a high\n\t\tscore to many other frequent\
                    \ substitutions.BLOSUM (Henikoff). These matrices appear to\n\t\
                    \tbe the best available for carrying out data base similarity\n\
                    \t\t(homology searches). The matrices used are: Blosum80, 62,\n\
                    \t\t40 and 30.The Gonnet Pam 250 matrix has been reported\n\t\t\
                    as the best single matrix for alignment, if you only choose\n\t\
                    \tone matrix. Our experience with profile database searches\n\t\
                    \tis that the Gonnet series is unambiguously superior to the\n\
                    \t\tBlosum series at high divergence. However, we did not get\n\
                    \t\tthe series to perform systematically better than the Blosum\n\
                    \t\tseries in Clustal W (communication of the authors).PAM (Dayhoff).\
                    \ These have been extremely\n\t\twidely used since the late '70s.\
                    \ We use the PAM 120, 160,\n\t\t250 and 350 matrices."
                prompt: Protein weight matrix (-matrix)
                name: matrix
                format: {perl: '(defined $value and $value ne $vdef) ? " -matrix=$value"
                        : ""', python: '("", " -matrix="+str(value))[value is not
                        None and value!=vdef]'}
                type:
                    _type: StringType
                    default: gonnet
                    options:
                    - {label: Gonnet series, value: gonnet}
                    - {label: BLOSUM series, value: blosum}
                    - {label: PAM series, value: pam}
                    - {label: Identity matrix, value: id}
            -   _type: InputProgramParameter
                prompt: Negative values in matrix ? (-negative)
                name: negative
                format: {perl: '($value) ? " -negative" : ""', python: '( "" , " -negative"
                        )[ value ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: "Residue specific penalties are amino acid\n\t\tspecific\
                    \ gap penalties that reduce or increase the gap\n\t\topening penalties\
                    \ at each position in the alignment or\n\t\tsequence. As an example,\
                    \ positions that are rich in glycine\n\t\tare more likely to have\
                    \ an adjacent gap than positions that\n\t\tare rich in valine.Table\
                    \ of residue specific gap modification\n\t\tfactors:A 1.13 M 1.29C\
                    \ 1.13 N 0.63D 0.96 P 0.74E 1.31 Q 1.07F 1.20 R 0.72G 0.61 S 0.76H\
                    \ 1.00 T 0.89I 1.32 V 1.25K 0.96 Y 1.00L 1.21 W 1.23The values\
                    \ are normalised around a mean value of 1.0 for H. The lower the\
                    \ value, the greater the chance of having an adjacent gap. These\
                    \ are derived from the original table of relative frequencies\
                    \ of gaps adjacent to each residue (12) by subtraction from 2.0."
                prompt: Residue specific gaps off (-nopgap)
                name: pgap
                format: {perl: '($value) ? " -nopgap" : ""', python: '( "" , " -nopgap"
                        )[ value ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                comment: "Hydrophilic gap penalties are used to\n\t\tincrease the\
                    \ chances of a gap within a run (5 or more\n\t\tresidues) of hydrophilic\
                    \ amino acids; these are likely to\n\t\tbe loop or random coil\
                    \ regions where gaps are more\n\t\tcommon. The residues that are\
                    \ 'considered' to be\n\t\thydrophilic are set by menu item 3."
                prompt: Hydrophilic gaps off (-nohgap)
                name: hgap
                format: {perl: '($value) ? " -nohgap" : ""', python: '( "" , " -nohgap"
                        )[ value ]'}
                type: {_type: BooleanType, default: false}
            -   _type: InputProgramParameter
                prompt: Hydrophilic residues list (-hgapresidues)
                name: hgapresidues
                format: {perl: '($value and $value ne $vdef) ? " -hgapresidues=\\"$value\\""
                        : ""', python: '( '''' , '' -hgapresidues="%s"'' % str(value)
                        )[ value and value != vdef ]'}
        -   _type: InputParagraph
            prompt: DNA parameters
            name: multalign_dna
            precond: {typeseq: dna}
            children:
            -   _type: InputProgramParameter
                comment: "1) IUB. This is the default scoring matrix\n\t\tused by\
                    \ BESTFIT for the comparison of nucleic acid\n\t\tsequences. X's\
                    \ and N's are treated as matches to any IUB\n\t\tambiguity symbol.\
                    \ All matches score 1.9; all mismatches for\n\t\tIUB symbols score\
                    \ 0.2) CLUSTALW(1.6). The previous system used\n\t\tby ClustalW,\
                    \ in which matches score 1.0 and mismatches\n\t\tscore 0. All\
                    \ matches for IUB symbols also score 0."
                prompt: DNA weight matrix (-dnamatrix)
                name: dnamatrix
                format: {perl: '(defined $value and $value ne $vdef) ? " -dnamatrix=$value"
                        : ""', python: '("", " -dnamatrix=" + str(value))[value is
                        not None and value!=vdef]'}
                type:
                    _type: StringType
                    default: iub
                    options:
                    - {label: IUB, value: iub}
                    - {label: CLUSTALW, value: clustalw}
            -   _type: InputProgramParameter
                comment: "A weight of\n\t\tzero means that the transitions are scored\
                    \ as mismatches; a\n\t\tweight of 1 gives transitions the full\
                    \ match score. For\n\t\tdistantly related DNA sequences, the weight\
                    \ should be near\n\t\tto zero; for closely related sequences it\
                    \ can be useful to\n\t\tassign a higher score."
                prompt: Transitions weight (between 0 and 1) (-transweight)
                name: transweight
                format: {perl: '(defined $value and $value != $vdef) ? " -transweight=$value"
                        : ""', python: '( "" , " -transweight=" + str( value ) )[
                        value is not None and value != vdef ]'}
                type: {_type: FloatType, default: 0.5}
    -   _type: InputParagraph
        comment: "These similarity scores are calculated from fast,\n\t  approximate,\
            \ global alignments, which are controlled by 4\n\t  parameters. 2 techniques\
            \ are used to make these alignments very\n\t  fast: 1) only exactly matching\
            \ fragments (k-tuples) are\n\t  considered; 2) only the 'best' diagonals\
            \ (the ones with most\n\t  k-tuple matches) are used."
        prompt: Fast Pairwise Alignments parameters
        name: fastpw
        precond: {quicktree: fast}
        children:
        -   _type: InputProgramParameter
            comment: 'K-TUPLE SIZE: This is the size of exactly matching fragment
                that is used. INCREASE for speed (max= 2 for proteins; 4 for DNA),
                DECREASE for sensitivity. For longer sequences (e.g. >1000 residues)
                you may need to increase the default.'
            prompt: Word size (-ktuple)
            name: ktuple
            argpos: '2'
            format: {perl: '(defined $value and $value != $vdef) ? " -ktuple=$value"
                    : ""', python: '( "" , " -ktuple=" + str( value ) )[value is not
                    None and value != vdef ]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            comment: "The number of k-tuple matches on each\n\t\tdiagonal (in an imaginary\
                \ dot-matrix plot) is\n\t\tcalculated. Only the best ones (with most\
                \ matches) are used\n\t\tin the alignment. This parameter specifies\
                \ how\n\t\tmany. Decrease for speed; increase for sensitivity."
            prompt: Number of best diagonals (-topdiags)
            name: topdiags
            format: {perl: '(defined $value and $value != $vdef) ? " -topdiags=$value"
                    : ""', python: '( "" , " -topdiags=" + str( value ))[value is
                    not None and value != vdef ]'}
            type: {_type: IntegerType, default: 5}
        -   _type: InputProgramParameter
            comment: "WINDOW SIZE: This is the number of\n\t\tdiagonals around each\
                \ of the 'best' diagonals that will be\n\t\tused. Decrease for speed;\
                \ increase for sensitivity"
            prompt: Window around best diags (-window)
            name: window
            format: {perl: '(defined $value and $value != $vdef) ? " -window=$value"
                    : ""', python: '( "" , " -window=" + str( value ) )[ value is
                    not None and value != vdef ]'}
            type: {_type: IntegerType, default: 5}
        -   _type: InputProgramParameter
            comment: "This is a penalty for each gap in the fast\n\t\talignments.\
                \ It has little affect on the speed or\n\t\tsensitivity except for\
                \ extreme values."
            prompt: Gap penalty (-pairgap)
            name: pairgap
            format: {perl: '(defined $value and $value != $vdef) ? " -pairgap=$value"
                    : ""', python: '( "" , " -pairgap=" + str( value ))[ value is
                    not None and value != vdef ]'}
            type: {_type: FloatType, default: 3.0}
        -   _type: InputProgramParameter
            prompt: Percent or absolute score ? (-score)
            name: score
            format: {perl: '(defined $value and $value ne $vdef) ? " -score=$value"
                    : ""', python: '( "" , " -score=" +str( value ) )[value is not
                    None or value != vdef]'}
            type:
                _type: StringType
                default: percent
                options:
                - {label: Percent, value: percent}
                - {label: Absolute, value: absolute}
    -   _type: InputParagraph
        comment: "These parameters do not have any affect on the\n\t  speed of the\
            \ alignments. They are used to give initial alignments\n\t  which are\
            \ then rescored to give percent identity scores. These %\n\t  scores are\
            \ the ones which are displayed on the screen. The scores\n\t  are converted\
            \ to distances for the trees."
        prompt: Slow Pairwise Alignments parameters
        name: slowpw
        precond: {quicktree: slow}
        children:
        -   _type: InputProgramParameter
            prompt: Gap opening penalty (-pwgapopen)
            name: pwgapopen
            format: {perl: '(defined $value and $value != $vdef) ? " -pwgapopen=$value"
                    : ""', python: '( "" , " -pwgapopen=" + str( value ) )[ value
                    is not None and value != vdef ]'}
            type: {_type: FloatType, default: 10.0}
        -   _type: InputProgramParameter
            prompt: Gap extension penalty (-pwgapext)
            name: pwgapext
            format: {perl: '(defined $value and $value != $vdef) ? " -pwgapext=$value"
                    : ""', python: '( "" , " -pwgapext=" + str( value ) )[ value is
                    not None and value != vdef ]'}
            type: {_type: FloatType, default: 0.1}
        -   _type: InputParagraph
            prompt: Protein parameters
            name: slowpw_prot
            precond: {typeseq: protein}
            children:
            -   _type: InputProgramParameter
                comment: "The scoring table which describes the\n\t\tsimilarity of\
                    \ each amino acid to each other. For DNA, an\n\t\tidentity matrix\
                    \ is used.BLOSUM (Henikoff). These matrices appear to\n\t\tbe\
                    \ the best available for carrying out data base similarity\n\t\
                    \t(homology searches). The matrices used are: Blosum80, 62,\n\t\
                    \t40 and 30.The Gonnet Pam 250 matrix has been reported\n\t\t\
                    as the best single matrix for alignment, if you only choose\n\t\
                    \tone matrix. Our experience with profile database searches\n\t\
                    \tis that the Gonnet series is unambiguously superior to the\n\
                    \t\tBlosum series at high divergence. However, we did not get\n\
                    \t\tthe series to perform systematically better than the Blosum\n\
                    \t\tseries in Clustal W (communication of the authors).PAM (Dayhoff).\
                    \ These have been extremely\n\t\twidely used since the late '70s.\
                    \ We use the PAM 120, 160,\n\t\t250 and 350 matrices."
                prompt: Protein weight matrix (-pwmatrix)
                name: pwmatrix
                format: {perl: '(defined $value and $value ne $vdef) ? " -pwmatrix=$value"
                        : ""', python: '( "" , " -pwmatrix=" + str(value) )[value
                        is not None and value != vdef ]'}
                type:
                    _type: StringType
                    default: gonnet
                    options:
                    - {label: BLOSUM30 (Henikoff), value: blosum}
                    - {label: Gonnet 250, value: gonnet}
                    - {label: PAM350 (Dayhoff), value: pam}
                    - {label: Identity matrix, value: id}
        -   _type: InputParagraph
            prompt: DNA parameters
            name: slowpw_dna
            precond: {typeseq: dna}
            children:
            -   _type: InputProgramParameter
                comment: "For DNA, a single matrix (not a series) is\n\t\tused. Two\
                    \ hard-coded matrices are available:1) IUB. This is the default\
                    \ scoring matrix\n\t\tused by BESTFIT for the comparison of nucleic\
                    \ acid\n\t\tsequences. X's and N's are treated as matches to any\
                    \ IUB\n\t\tambiguity symbol. All matches score 1.9; all mismatches\
                    \ for\n\t\tIUB symbols score 0.2) CLUSTALW(1.6). The previous\
                    \ system used\n\t\tby ClustalW, in which matches score 1.0 and\
                    \ mismatches\n\t\tscore 0. All matches for IUB symbols also score\
                    \ 0."
                prompt: DNA weight matrix (-pwdnamatrix)
                name: pwdnamatrix
                format: {perl: '(defined $value and $value ne $vdef) ? " -pwdnamatrix=$value"
                        : ""', python: '( "" , " -pwdnamatrix=" + str(value) )[ value
                        is not None and value != vdef ]'}
                type:
                    _type: StringType
                    default: iub
                    options:
                    - {label: IUB, value: iub}
                    - {label: CLUSTALW, value: clustalw}
    -   _type: InputParagraph
        prompt: Output parameters
        name: outputparam
        children:
        -   _type: InputProgramParameter
            prompt: Output format (-output)
            name: outputformat
            format: {perl: '(defined $value ) ? " -output=$value" : ""', python: '(
                    "" , " -output=" + str( value) )[ value is not None ]'}
            type:
                _type: StringType
                default: 'null'
                options:
                - {label: CLUSTAL, value: 'null'}
                - {label: FASTA, value: FASTA}
                - {label: GCG, value: GCG}
                - {label: GDE, value: GDE}
                - {label: PHYLIP, value: PHYLIPI}
                - {label: PIR, value: PIR}
                - {label: NEXUS, value: NEXUS}
        -   _type: InputProgramParameter
            prompt: Output sequence numbers in the output file (for clustalw output
                only) (-seqnos)
            name: seqnos
            format: {perl: '(defined $value and $value != $vdef) ? " -seqnos=on" :
                    ""', python: '( "" , " -seqnos=on")[ value is not None and value
                    != vdef]'}
            precond:
                outputformat: {'#eq': None}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Result order (-outorder)
            name: outorder
            format: {perl: '(defined $value and $value ne $vdef) ? " -outorder=$value"
                    : ""', python: '( "" , " -outorder=" + str(value))[ value is not
                    None and value != vdef ]'}
            type:
                _type: StringType
                default: aligned
                options:
                - {label: Input, value: input}
                - {label: Aligned, value: aligned}
        -   _type: InputProgramParameter
            prompt: Sequence alignment file name (-outfile)
            name: outfile
            format: {perl: '(defined $value) ? " -outfile=$value" : ""', python: '(
                    "" , " -outfile=" + str( value))[ value is not None ]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            prompt: Upper case (for GDE output only) (-case)
            name: gde_lower
            argpos: '2'
            format: {perl: '($value) ? " -case=upper" : ""', python: '( "" , " -case=upper"
                    )[ value ]'}
            precond: {outputformat: GDE}
            type: {_type: BooleanType, default: false}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        comment: Multiple alignments are carried out in 3 stages :1) all sequences
            are compared to each other (pairwise alignments);2) a dendrogram (like
            a phylogenetic tree) is constructed, describing the approximate groupings
            of the sequences by similarity (stored in a file).3) the final multiple
            alignment is carried out, using the dendrogram as a guide.Pairwise alignment
            parameters control the speed/sensitivity of the initial alignments.Multiple
            alignment parameters control the gaps in the final multiple alignments.
        prompt: Multiple Alignments parameters
        name: multalign
        children:
        -   _type: OutputProgramParameter
            prompt: Output tree
            name: newtreefile
            filenames: {perl: $newtree, python: newtree}
            precond:
                newtree: {'#ne': None}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1910']
                data_terms: EDAM_data:0872
    -   _type: OutputParagraph
        prompt: Output parameters
        name: outputparam
        children:
        -   _type: OutputProgramParameter
            comment: 'In the conservation line output in the clustal format alignment
                file, three characters are used:''*'' indicates positions which have
                a single, fully conserved residue.'':'' indicates that one of the
                following ''strong'' groups is fully conserved (STA,NEQK,NHQK,NDEQ,QHRK,MILV,MILF,HY,FYW).''.''
                indicates that one of the following ''weaker'' groups is fully conserved
                (CSA,ATV,SAG,STNK,STPA,SGND,SNDEQK,NDEQHK,NEQHRK,FVLIM,HFY).These
                are all the positively scoring groups that occur in the Gonnet Pam250

                matrix. The strong and weak groups are defined as strong score >0.5
                and weak

                score =<0.5 respectively.'
            prompt: Alignment file
            name: clustalaligfile
            filenames: {perl: '(defined $outfile)? "$outfile":"*.aln"', python: '("*.aln",
                    str(outfile))[outfile is not None]'}
            precond:
                outputformat: {'#eq': None}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1982']
                data_terms: EDAM_data:0863
        -   _type: OutputProgramParameter
            prompt: Alignment file
            name: aligfile
            filenames: {perl: '(defined $outfile)? ( $outputformat eq ''GCG'' )? (
                    $outputformat eq ''PHYLIPI'' )?"$outfile":"*.msf" : "*.phy" :
                    "*.nxs"', python: '{ "FASTA":"*.fasta", "NEXUS": "*.nxs", "PHYLIPI":
                    "*.phy" , ''GCG'': ''*.msf'' }[outputformat ]'}
            precond:
                outputformat:
                    '#in': [FASTA, NEXUS, GCG, PHYLIPI]
            type: {_type: FormattedType, data_terms: 'EDAM_data:0863'}
        -   _type: OutputProgramParameter
            prompt: Sequences file
            name: seqfile
            filenames: {perl: '(defined $outfile)? ( $outputformat eq ''GDE'' )? (
                    $outputformat eq ''PIR'' )?"$outfile":"*.gde" : "*.pir" : "*.fasta"',
                python: '((("*.fasta","*.pir")[outputformat == ''PIR''],"*.gde")[outputformat
                    == ''GDE''],str(outfile))[outfile is not None]'}
            precond:
                outputformat:
                    '#in': [GDE, PIR]
            type: {_type: FormattedType, data_terms: 'EDAM_data:2044'}
        -   _type: OutputProgramParameter
            prompt: Tree file
            name: dndfile
            filenames: {perl: '"*.dnd"', python: '"*.dnd"'}
            precond:
                newtree: {'#eq': None}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1910']
                data_terms: EDAM_data:0872
operations: ['EDAM_operation:0492']
topics: ['EDAM_topic:0182']
public_name: clustalw-multialign
command: {path: null, value: clustalw -align}
