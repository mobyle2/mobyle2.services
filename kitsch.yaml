_type: Program
name: kitsch
title: kitsch
description: Fitch-Margoliash and Least Squares Methods with Evolutionary Clock
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: kitsch
        argpos: '0'
        format: {perl: '"kitsch <kitsch.params"', python: '"kitsch <kitsch.params"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: "Give a file containing a distance matrix\n\t  obtained by distance\
            \ matrix programs like prodist or\n\t  dnadist"
        prompt: Distances matrix File
        name: infile
        simple: true
        argpos: '-5'
        format: {perl: '"ln -s $infile infile && "', python: '"ln -s " + str(infile)
                + " infile && "'}
        precond:
            infile: {'#ne': infile}
        mandatory: true
        type: {_type: FormattedType, data_terms: 'EDAM_data:0870'}
    -   _type: InputParagraph
        prompt: Fitch options
        name: fitch_options
        children:
        -   _type: InputProgramParameter
            prompt: Program method (D)
            name: Method
            argpos: '1'
            type: {_type: StringType, default: F}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            prompt: Negative branch lengths allowed (-)
            name: negative_branch
            argpos: '1'
            format: {perl: '($value) ? "-\\n" : ""', python: '( "" , "-\n")[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            comment: For the Fitch-Margoliash method, which is the default method
                with this program, P is 2.0. For the Cavalli-Sforza and Edwards least
                squares method it should be set to 0 (so that the denominator is always
                1). An intermediate method is also available in which P is 1.0, and
                any other value of P, such as 4.0 or -2.3, can also be used. This
                generates a whole family of methods.Please read the documentation
                (man distance).
            prompt: Power (P)
            name: power
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "P\\n$value\\n"
                    : ""', python: '( "" , "P\n" +str( value ) +"\n")[ value is not
                    None and vdef != value ]'}
            type: {_type: FloatType, default: 2.0}
            paramfile: kitsch.params
    -   _type: InputParagraph
        prompt: Randomize options
        name: jumble_options
        children:
        -   _type: InputProgramParameter
            prompt: Randomize (jumble) input order (J)
            name: jumble
            argpos: '20'
            format: {perl: '($value) ? "J\\n$jumble_seed\\n$jumble_number\\n" : ""',
                python: '( "" , "J\n" + str( jumble_seed ) + "\n"+str( jumble_number
                    )+ "\n")[ value ]'}
            precond: {'#not': user_tree}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            prompt: Random number seed (must be odd)
            name: jumble_seed
            argpos: '19'
            format: {perl: '""', python: '""'}
            precond: jumble
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Number of times to jumble
            name: jumble_number
            argpos: '19'
            format: {perl: '""', python: '""'}
            precond: jumble
            type: {_type: IntegerType, default: 1}
    -   _type: InputParagraph
        prompt: Bootstrap options
        name: bootstrap
        children:
        -   _type: InputProgramParameter
            prompt: Analyze multiple data sets (M)
            name: multiple
            argpos: '10'
            format: {perl: '($value) ? "M\\n$numtiple_number\\n$multiple_seed\\n"
                    : ""', python: '( "" , "M\n"+str(multiple_number)+"\n"+str(multiple_seed)+"\n")[
                    value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            prompt: How many data sets
            name: multiple_number
            argpos: '9'
            format: {perl: '""', python: '""'}
            precond: multiple
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Random number seed (must be odd)
            name: multiple_seed
            argpos: '19'
            format: {perl: '""', python: '""'}
            precond: multiple
            mandatory: true
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Compute a consensus tree
            name: consense
            argpos: '10'
            format: {perl: '($value) ? " && cp infile kitsch.infile &&  cp kitsch.outtree
                    intree && consense <consense.params && mv outtree consense.outtree
                    && mv outfile consense.outfile" : ""', python: '("" , " && cp
                    infile kitsch.infile &&  cp kitsch.outtree intree && consense
                    <consense.params && mv outtree consense.outtree && mv outfile
                    consense.outfile" )[ value ]'}
            precond:
                '#and': [multiple, print_treefile]
            type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        name: consense_confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputProgramParameter
        name: consense_terminal_type
        argpos: '-2'
        format: {perl: '"T\\n"', python: '"T\n"'}
        precond: consense
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputParagraph
        prompt: User tree options
        name: user_tree_opt
        children:
        -   _type: InputProgramParameter
            comment: The U (User Tree) option requires a bifurcating tree, unlike
                FITCH, which requires an unrooted tree with a trifurcation at its
                base.If a tree with a trifurcation at the base is by mistake fed into
                the U option of KITSCH then some of its species (the entire rightmost
                furc, in fact) will be ignored and too small a tree read in. This
                should result in an error message and the program should stop.It is
                important to understand the difference between the User Tree formats
                for KITSCH and FITCH. You may want to use RETREE to convert a user
                tree that is suitable for FITCH into one suitable for KITSCH or vice
                versa.
            prompt: 'Use User tree (default: No, search for best tree) (U)'
            name: user_tree
            argpos: '1'
            format: {perl: '($value) ? "U\\n" : ""', python: '( "" , "U\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            comment: Note that the User Trees (used by option U) must be rooted trees
                (with a bifurcation at their base). If you take a user tree from FITCH
                and try to evaluate it in KITSCH, it must first be rooted. This can
                be done using RETREE
            prompt: User Tree file
            name: tree_file
            argpos: '-1'
            format: {perl: '(defined $value) ? "cat $tree_file >> intree && " : ""',
                python: '( "" , "cat "+ str( value ) +" >> intree && " ) [ value is
                    not None ]'}
            precond: user_tree
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1910']
                data_terms: EDAM_data:0872
    -   _type: InputParagraph
        prompt: Output options
        name: output
        children:
        -   _type: InputProgramParameter
            comment: Tells the program to print a semi-graphical picture of the tree
                in the outfile.
            prompt: Print out tree (3)
            name: print_tree
            argpos: '1'
            format: {perl: '($value) ? "" : "3\\n"', python: '( "3\n" ,"" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            comment: Tells the program to save the tree in a treefile (a standard
                representation of trees where the tree is specified by a nested pairs
                of parentheses, enclosing names and separated by commas).
            prompt: Write out trees onto tree file (4)
            name: print_treefile
            argpos: '1'
            format: {perl: '($value) ? "" : "4\\n"', python: '( "4\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            prompt: Print out the data at start of run (1)
            name: printdata
            argpos: '1'
            format: {perl: '($value)? "1\\n" : ""', python: '("", "1\n" )[ value ]'}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
    -   _type: InputParagraph
        prompt: Other options
        name: other_options
        children:
        -   _type: InputProgramParameter
            prompt: Matrix format
            name: triangular
            argpos: '1'
            type: {_type: StringType, default: square}
            paramfile: kitsch.params
        -   _type: InputProgramParameter
            comment: If the S (subreplication) option is in effect, the above degrees
                of freedom must be modified by noting that N is not n(n-1)/2 but is
                the sum of the numbers of replicates of all cells in the distance
                matrix read in, which may be either square or triangular. A further
                explanation of the statistical test of the clock is given in a paper
                of mine (Felsenstein, 1986).
            prompt: Subreplicates (S)
            name: subreplicates
            argpos: '1'
            format: {perl: '($value) ? "S\\n" : ""', python: '( "" , "S\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: kitsch.params
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: kitsch.params
    -   _type: InputProgramParameter
        name: terminal_type
        argpos: '-1'
        format: {perl: '"0\\n"', python: '"0\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: kitsch.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Consense output file
        name: consense_outfile
        filenames: {perl: '"consense.outfile"', python: '"consense.outfile"'}
        precond: consense
    -   _type: OutputProgramParameter
        prompt: Consense tree file
        name: consense_treefile
        filenames: {perl: '"consense.outtree"', python: '"consense.outtree"'}
        precond: consense
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
    -   _type: OutputProgramParameter
        prompt: Kitsch output file
        name: outfile
        filenames: {perl: '"kitsch.outfile"', python: '"kitsch.outfile"'}
    -   _type: OutputProgramParameter
        prompt: Kitch tree file
        name: treefile
        filenames: {perl: '"kitsch.outtree"', python: '"kitsch.outtree"'}
        precond: print_treefile
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
comment: "This program carries out the Fitch-Margoliash\n\tand Least Squares methods,\
    \ plus a variety of others of the\n\tsame family, with the assumption that all\
    \ tip species are\n\tcontemporaneous, and that there is an evolutionary clock\
    \ (in\n\teffect, a molecular clock). This means that branches of the\n\ttree cannot\
    \ be of arbitrary length, but are constrained so\n\tthat the total length from\
    \ the root of the tree to any species\n\tis the same."
operations: ['EDAM_operation:0546']
topics: ['EDAM_topic:0084']
documentation_links: ['http://bioweb2.pasteur.fr/docs/phylip/doc/kitsch.html']
public_name: kitsch
command: {path: null, value: null}
