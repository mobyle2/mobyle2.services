_type: Program
name: bl2seq
title: BL2SEQ
description: Comparison between two sequences with Blast (NCBI)
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        prompt: Blast initiation
        name: blast_init
        argpos: '1'
        format: {perl: '"bl2seq"', python: '"bl2seq"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: '- Blastp compares amino acid query sequences- Blastn compares nucleotide
            query sequences- tBlastx compares translated a nucleotide sequence and
            an amino acid sequence- tBlastn compares an amino acid sequence translated
            and a nucleotide sequence- tBlastx compares translated nucleotide sequences'
        prompt: Blast program (-p)
        name: bl2seq
        simple: true
        argpos: '2'
        format: {perl: '" -p $value"', python: '" -p " + str(value)'}
        mandatory: true
        type:
            _type: StringType
            default: 'null'
            options:
            - {label: Choose a program, value: 'null'}
            - {label: Blastp (protein/protein), value: blastp}
            - {label: Blastn (nucleotide/nucleotide), value: blastn}
            - {label: Blastx (translated nucleotide/ protein), value: blastx}
            - {label: tBlastn (protein/translated nucleotide), value: tblastn}
            - {label: tBlastx (translated nucleotide/translated nucleotide), value: tblastx}
    -   _type: InputProgramParameter
        prompt: First sequence (-i)
        name: first_sequence
        simple: true
        argpos: '3'
        format: {perl: '" -i $value"', python: '" -i " + str( value )'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2044
    -   _type: InputProgramParameter
        comment: Location on query sequence
        prompt: Start of required region in first query sequence (-I)
        name: first_start_region
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        prompt: End of required region in first sequence (-I)
        name: first_end_region
        argpos: '3'
        format: {perl: '(defined $value) ? " -I \"$first_start_region $value\"" :
                " -I \"$first_start_region\""', python: '( '' -I "%s "'' % (str(first_start_region)),
                '' -I "%s %s"'' % (str(first_start_region), str(value)))[value is
                not None]'}
        precond:
            first_start_region: {'#ne': None}
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        prompt: Second sequence (-j)
        name: second_sequence
        simple: true
        argpos: '4'
        format: {perl: '" -j $value"', python: '" -j " + str(value)'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:2200']
            data_terms: EDAM_data:2044
    -   _type: InputProgramParameter
        prompt: Start of required region in second sequence (-J)
        name: second_start_region
        argpos: '4'
        type: {_type: IntegerType}
    -   _type: InputProgramParameter
        prompt: End of required region in second sequence (-J)
        name: second_end_region
        argpos: '4'
        format: {perl: '(defined $value) ? " -J \"$second_start_region $value\"" :
                " -J \"$second_region\""', python: '( '' -J "%s "'' % (str(second_start_region)),
                '' -J "%s %s"'' % (str(second_start_region), str(value)))[value is
                not None]'}
        precond:
            second_start_region: {'#ne': None}
        type: {_type: IntegerType}
    -   _type: InputParagraph
        prompt: Scoring options
        name: scoring_opt
        children:
        -   _type: InputProgramParameter
            comment: 'Default: 5 for blastn; 10 for blastp, blastx and 11 for tblastn'
            prompt: Cost to open a gap (-G)
            name: open_a_gap
            format: {perl: '(defined $value) ? " -G $value" : ""', python: '("" ,
                    " -G "+str(value) )[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: 'Default: 2 for blastn; 1 for blastp, blastx and tblastnLimited
                values for gap existence and extension are supported for these programs.Existence
                -- Extension:BLOSUM909 -- 2, 8 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 --
                1, 9 -- 1BLOSUM8025 -- 2, 13 -- 2, 9 -- 2, 8 -- 2, 7 -- 2, 6 -- 211
                -- 1, 10 -- 1, 9 -- 1BLOSUM6211 -- 2, 10 -- 2, 9 -- 2, 8 -- 2, 7 --
                2, 6 -- 213 -- 1, 12 -- 1, 11 -- 1, 10 -- 1, 9 -- 1BLOSUM4513 -- 3,
                12 -- 3, 11 -- 3, 10 -- 316 -- 2, 15 -- 2, 14 -- 2, 13 -- 2, 12 --
                219 -- 1, 18 -- 1, 17 -- 1, 16 -- 1PAM307 -- 2, 6 -- 2, 5 -- 210 --
                1, 9 -- 1, 8 -- 1PAM708 -- 2, 7 -- 2, 6 -- 211 -- 1, 10 -- 1, 9 --
                1'
            prompt: Cost to extend a gap (-E)
            name: extend_a_gap
            format: {perl: '(defined $value) ? " -E $value" : ""', python: '("" ,
                    " -E "+str(value) )[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputParagraph
            prompt: Protein penalty (not for blastn)
            name: scoring_blast
            precond:
                bl2seq: {'#ne': blastn}
            children:
            -   _type: InputProgramParameter
                prompt: Similarity matrix (-M)
                name: matrix
                format: {perl: '(defined $value and $value ne $vdef) ? " -M $value"
                        : ""', python: '("" , " -M "+str(value) )[value is not None
                        and value != vdef]'}
                type:
                    _type: StringType
                    default: BLOSUM62
                    options:
                    - {label: BLOSUM90, value: BLOSUM90}
                    - {label: BLOSUM80, value: BLOSUM80}
                    - {label: BLOSUM62, value: BLOSUM62}
                    - {label: BLOSUM50, value: BLOSUM50}
                    - {label: BLOSUM45, value: BLOSUM45}
                    - {label: PAM30, value: PAM30}
                    - {label: PAM70, value: PAM70}
                    - {label: PAM250, value: PAM250}
        -   _type: InputParagraph
            prompt: Blastn penalty
            name: scoring_blastn
            precond: {bl2seq: blastn}
            children:
            -   _type: InputProgramParameter
                prompt: Penalty for a nucleotide mismatch (-q)
                name: mismatch
                format: {perl: '(defined $value and $value != $vdef) ? " -q $value"
                        : ""', python: '("" , " -q "+str(value) )[value is not None
                        and value != vdef]'}
                type: {_type: IntegerType, default: -3}
            -   _type: InputProgramParameter
                prompt: Reward for a nucleotide match (-r)
                name: match
                format: {perl: '(defined $value and $value != $vdef) ? " -r $value"
                        : ""', python: '("" , " -r "+str(value) )[value is not None
                        and value != vdef]'}
                type: {_type: IntegerType, default: 1}
    -   _type: InputParagraph
        comment: "Mask off segments of the query sequence that have low compositional\
            \ complexity, as determined by the SEG program of Wootton & Federhen (Computers\
            \ and Chemistry, 1993) or, for BLASTN, by the DUST program of Tatusov\
            \ and Lipman (in preparation). Filtering can eliminate statistically significant\
            \ but biologically uninteresting reports from the blast output (e.g.,\
            \ hits against common acidic-, basic- or proline-rich regions), leaving\
            \ the more biologically interesting regions of the query\n          sequence\
            \ available for specific matching against database sequences.Filtering\
            \ is only applied to the query sequence (or its translation products),\
            \ not to database sequences. Default filtering is DUST for BLASTN, SEG\
            \ for other programs. It is not unusual for nothing at all to be masked\
            \ by SEG, when applied to sequences in SWISS-PROT, so filtering should\
            \ not be expected to always yield an effect. Furthermore, in some cases,\
            \ sequences are masked in their entirety, indicating that the statistical\
            \ significance of any matches reported against the unfiltered\n      \
            \    query sequence should be suspect."
        prompt: Filtering and masking options
        name: filter_opt
        children:
        -   _type: InputProgramParameter
            prompt: Filter or Masking query sequence (DUST with blastn, SEG with others)
                (-F)
            name: filter
            format: {perl: '($value) ? "" : " -F F"', python: '(" -F F" , "")[ value
                    ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: A coiled-coiled filter, based on the work of Lupas et al. (Science,
                vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al.,
                J Gen Virol, vol. 76, pp. 2923-32 (1995))
            prompt: Filtering options (Filter must be true)
            name: other_filters
            precond:
                '#and':
                - filter
                -   other_masking: {'#eq': None}
            type: {_type: StringType, default: 'null'}
        -   _type: InputProgramParameter
            comment: 'A coiled-coiled filter, based on the work of Lupas et al. (Science,
                vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al.,
                J Gen Virol, vol. 76, pp. 2923-32 (1995)).It is possible to specify
                that the masking should only be done during the process of building
                the initial words .If the -U option (to mask any lower-case sequence
                in the input FASTA file) is used and one does not wish any other filtering,
                but does wish to mask when building the lookup tables then one should
                specify: -F ''m'''
            prompt: Masking options (Filter must be true)
            name: other_masking
            precond:
                '#and':
                - {filter: '1'}
                -   other_filters: {'#eq': None}
            type: {_type: StringType, default: 'null'}
        -   _type: InputProgramParameter
            comment: This option specifies that any lower-case letters in the input
                FASTA file should be masked.
            prompt: Use lower case filtering (-U)
            name: lower_case
            format: {perl: '($value) ? " -U T" : ""', python: '("", " -U T")[value]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Selectivity options
        name: selectivity_opt
        children:
        -   _type: InputProgramParameter
            comment: "The statistical significance threshold for reporting matches\
                \ against database sequences; the default value is 10, such that 10\
                \ matches are expected to be found merely by chance, according to\
                \ the stochastic model of Karlin and Altschul (1990). If the statistical\
                \ significance ascribed to a match is greater than the EXPECT threshold,\
                \ the match will not be reported. Lower EXPECT thresholds are more\
                \ stringent, leading to fewer chance matches being reported. Fractional\
                \ values are\n              acceptable."
            prompt: Expected value (-e)
            name: Expect
            simple: true
            format: {perl: '(defined $value and $value != $vdef) ? " -e $value" :
                    ""', python: '("" , " -e "+str(value) )[value is not None and
                    value != vdef]'}
            type: {_type: FloatType, default: 10.0}
        -   _type: InputProgramParameter
            comment: Use words of size N.Zero invokes default behaviorDefault values:-
                11 for blastn- 3 for others
            prompt: Word Size (-W)
            name: word_size
            format: {perl: '(defined $value) ? " -W $value" : ""', python: '("" ,
                    " -W "+str(value) )[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            comment: This is the value that control the path graph region explored
                by Blast during a gapped extension (Xg in the NAR paper) (default
                for blastp is 15).Default values:- 30 for blastn- 0 for tblastx- 15
                for others
            prompt: X dropoff value for gapped alignment (-X)
            name: dropoff_extent
            format: {perl: '(defined $value) ? " -X $value" : ""', python: '("" ,
                    " -X "+str(value))[value is not None]'}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: Use zero for the real size
            prompt: Effective length of the search space (-Y)
            name: eff_len
            format: {perl: '(defined $value) " -Y $value" : ""', python: '("" , "
                    -Y "+str(value) )[value is not None]'}
            type: {_type: IntegerType}
        -   _type: InputProgramParameter
            prompt: Perform or not gapped alignment (not available with tblastx) (-g)
            name: gapped_alig
            format: {perl: '($value) ? "" : " -g F "', python: '(" -g F " , "")[value]'}
            precond:
                bl2seq: {'#ne': tblastx}
            type: {_type: BooleanType, default: false}
    -   _type: InputParagraph
        prompt: Translation options
        name: translation_opt
        precond:
            bl2seq:
                '#in': [blastx, tblastx, tblastn]
        children:
        -   _type: InputProgramParameter
            prompt: Query strand to search against second sequence (for blastx, tblastx
                or tblastn) (-S)
            name: strand
            simple: true
            format: {perl: '(defined $value and $value ne $vdef) ? " -S $value" :
                    ""', python: '( "" , " -S " + str(value) )[ value is not None
                    and value!= vdef]'}
            mandatory: true
            type:
                _type: StringType
                default: '3'
                options:
                - {label: Top (1), value: '1'}
                - {label: Bottom (2), value: '2'}
                - {label: Both (3), value: '3'}
    -   _type: InputParagraph
        prompt: Output options
        name: output_opt
        children:
        -   _type: InputProgramParameter
            prompt: Output format (-D)
            name: outformat
            format: {perl: '(defined $value and $value ne $vdef) ? "" : "-D $value"',
                python: '( "" , " -D " + str( value ) )[ value is not None and value
                    != vdef]'}
            type:
                _type: StringType
                default: '0'
                options:
                - {label: Traditional (0), value: '0'}
                - {label: Tabulated (1), value: '1'}
outputs: {_type: OutputParagraph}
operations: ['EDAM_operation:0493']
topics: ['EDAM_topic:0182']
public_name: bl2seq
command: {path: null, value: null}
