_type: Program
name: twofeat
title: twofeat
description: Finds neighbouring pairs of features in sequence(s)
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1927', 'EDAM_format:2200', 'EDAM_format:1935',
                    'EDAM_format:1936', 'EDAM_format:1948', 'EDAM_format:1948', 'EDAM_format:1957',
                    'EDAM_format:2188', 'EDAM_format:2305']
                data_terms: EDAM_data:2044
        -   _type: InputParagraph
            prompt: First feature options
            name: e_afeaturesection
            children:
            -   _type: InputProgramParameter
                comment: "By default any feature source in the feature table is allowed.\
                    \ You can set this to match any feature source you wish  to allow.\
                    \ \n  The source name is usually either the name of the program\
                    \ that  detected the feature or it is the feature table (eg: EMBL)\
                    \ that  the feature came from. \n  The source may be wildcarded\
                    \ by using '*'. \n  If you wish to allow more than one source,\
                    \ separate their names  with the character '|', eg: \n  gene*\
                    \ | embl"
                prompt: Source of first feature
                name: e_asource
                argpos: '2'
                format: {python: '("", " -asource=" + str(value))[value is not None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: "By default every feature in the feature table is allowed.\
                    \ You can set this to be any feature type you wish to allow. \n\
                    \  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the  EMBL\
                    \ feature types and see Appendix A of the Swissprot user  manual\
                    \ in http://www.expasy.org/sprot/userman.html  for a list of the\
                    \ Swissprot feature types. \n  The type may be wildcarded by using\
                    \ '*'. \n  If you wish to allow more than one type, separate their\
                    \ names  with the character '|', eg: \n  *UTR | intron"
                prompt: Type of first feature
                name: e_atype
                simple: true
                argpos: '3'
                format: {python: '("", " -atype=" + str(value))[value is not None]'}
                mandatory: true
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: By default any feature sense is allowed. You can set this
                    to match the required sense.
                prompt: Sense of first feature
                name: e_asense
                argpos: '4'
                format: {python: '("", " -asense=" + str(value))[value is not None
                        and value!=vdef]'}
                type:
                    _type: StringType
                    default: '0'
                    options:
                    - {label: Any sense, value: '0'}
                    - {label: Forward sense, value: +}
                    - {label: Reverse sense, value: '-'}
            -   _type: InputProgramParameter
                comment: If this is greater than or equal to the maximum score, then
                    any score is allowed.
                prompt: Minimum score of first feature
                name: e_aminscore
                argpos: '5'
                format: {python: '("", " -aminscore=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: If this is less than or equal to the maximum score, then
                    any score is permitted.
                prompt: Maximum score of first feature
                name: e_amaxscore
                argpos: '6'
                format: {python: '("", " -amaxscore=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: "Tags are the types of extra values that a feature may have.\
                    \ For example in the EMBL feature table, a 'CDS' type of  feature\
                    \ may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                    \ '/evidence', '/exception', '/function', '/gene',  '/label',\
                    \ '/map', '/note', '/number', '/partial', '/product',  '/protein_id',\
                    \ '/pseudo', '/standard_name', '/translation',  '/transl_except',\
                    \ '/transl_table', or '/usedin'. Some of these  tags also have\
                    \ values, for example '/gene' can have the value of  the gene\
                    \ name. \n  By default any feature tag in the feature table is\
                    \ allowed. You  can set this to match any feature tag you wish\
                    \ to allow. \n  The tag may be wildcarded by using '*'. \n  If\
                    \ you wish to allow more than one tag, separate their names  with\
                    \ the character '|', eg: \n  gene | label"
                prompt: Tag of first feature
                name: e_atag
                argpos: '7'
                format: {python: '("", " -atag=" + str(value))[value is not None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: "Tag values are the values associated with a feature tag.\
                    \ Tags are the types of extra values that a feature may have.\
                    \ For  example in the EMBL feature table, a 'CDS' type of feature\
                    \ may  have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                    \ '/evidence', '/exception', '/function', '/gene',  '/label',\
                    \ '/map', '/note', '/number', '/partial', '/product',  '/protein_id',\
                    \ '/pseudo', '/standard_name', '/translation',  '/transl_except',\
                    \ '/transl_table', or '/usedin'. Only some of  these tags can\
                    \ have values, for example '/gene' can have the  value of the\
                    \ gene name. By default any feature tag value in the  feature\
                    \ table is allowed. You can set this to match any feature  tag\
                    \ value you wish to allow. \n  The tag value may be wildcarded\
                    \ by using '*'. \n  If you wish to allow more than one tag value,\
                    \ separate their  names with the character '|', eg: \n  pax* |\
                    \ 10"
                prompt: Value of first feature's tags
                name: e_avalue
                argpos: '8'
                format: {python: '("", " -avalue=" + str(value))[value is not None]'}
                type: {_type: StringType}
        -   _type: InputParagraph
            prompt: Second feature options
            name: e_bfeaturesection
            children:
            -   _type: InputProgramParameter
                comment: "By default any feature source in the feature table is allowed.\
                    \ You can set this to match any feature source you wish  to allow.\
                    \ \n  The source name is usually either the name of the program\
                    \ that  detected the feature or it is the feature table (eg: EMBL)\
                    \ that  the feature came from. \n  The source may be wildcarded\
                    \ by using '*'. \n  If you wish to allow more than one source,\
                    \ separate their names  with the character '|', eg: \n  gene*\
                    \ | embl"
                prompt: Source of second feature
                name: e_bsource
                argpos: '9'
                format: {python: '("", " -bsource=" + str(value))[value is not None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: "By default every feature in the feature table is allowed.\
                    \ You can set this to be any feature type you wish to allow. \n\
                    \  See http://www.ebi.ac.uk/embl/WebFeat/ for a list of the  EMBL\
                    \ feature types and see Appendix A of the Swissprot user  manual\
                    \ in http://www.expasy.org/sprot/userman.html  for a list of the\
                    \ Swissprot feature types. \n  The type may be wildcarded by using\
                    \ '*'. \n  If you wish to allow more than one type, separate their\
                    \ names  with the character '|', eg: \n  *UTR | intron"
                prompt: Type of second feature
                name: e_btype
                simple: true
                argpos: '10'
                format: {python: '("", " -btype=" + str(value))[value is not None]'}
                mandatory: true
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: By default any feature sense is allowed. You can set this
                    to match the required sense.
                prompt: Sense of second feature
                name: e_bsense
                argpos: '11'
                format: {python: '("", " -bsense=" + str(value))[value is not None
                        and value!=vdef]'}
                type:
                    _type: StringType
                    default: '0'
                    options:
                    - {label: Any sense, value: '0'}
                    - {label: Forward sense, value: +}
                    - {label: Reverse sense, value: '-'}
            -   _type: InputProgramParameter
                comment: If this is greater than or equal to the maximum score, then
                    any score is allowed.
                prompt: Minimum score of second feature
                name: e_bminscore
                argpos: '12'
                format: {python: '("", " -bminscore=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: If this is less than or equal to the maximum score, then
                    any score is permitted.
                prompt: Maximum score of second feature
                name: e_bmaxscore
                argpos: '13'
                format: {python: '("", " -bmaxscore=" + str(value))[value is not None
                        and value!=vdef]'}
                type: {_type: FloatType, default: 0.0}
            -   _type: InputProgramParameter
                comment: "Tags are the types of extra values that a feature may have.\
                    \ For example in the EMBL feature table, a 'CDS' type of  feature\
                    \ may have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                    \ '/evidence', '/exception', '/function', '/gene',  '/label',\
                    \ '/map', '/note', '/number', '/partial', '/product',  '/protein_id',\
                    \ '/pseudo', '/standard_name', '/translation',  '/transl_except',\
                    \ '/transl_table', or '/usedin'. Some of these  tags also have\
                    \ values, for example '/gene' can have the value of  the gene\
                    \ name. \n  By default any feature tag in the feature table is\
                    \ allowed. You  can set this to match any feature tag you wish\
                    \ to allow. \n  The tag may be wildcarded by using '*'. \n  If\
                    \ you wish to allow more than one tag, separate their names  with\
                    \ the character '|', eg: \n  gene | label"
                prompt: Tag of second feature
                name: e_btag
                argpos: '14'
                format: {python: '("", " -btag=" + str(value))[value is not None]'}
                type: {_type: StringType}
            -   _type: InputProgramParameter
                comment: "Tag values are the values associated with a feature tag.\
                    \ Tags are the types of extra values that a feature may have.\
                    \ For  example in the EMBL feature table, a 'CDS' type of feature\
                    \ may  have the tags '/codon', '/codon_start', '/db_xref',  '/EC_number',\
                    \ '/evidence', '/exception', '/function', '/gene',  '/label',\
                    \ '/map', '/note', '/number', '/partial', '/product',  '/protein_id',\
                    \ '/pseudo', '/standard_name', '/translation',  '/transl_except',\
                    \ '/transl_table', or '/usedin'. Only some of  these tags can\
                    \ have values, for example '/gene' can have the  value of the\
                    \ gene name. By default any feature tag value in the  feature\
                    \ table is allowed. You can set this to match any feature  tag\
                    \ value you wish to allow. \n  The tag value may be wildcarded\
                    \ by using '*'. \n  If you wish to allow more than one tag value,\
                    \ separate their  names with the character '|', eg: \n  pax* |\
                    \ 10"
                prompt: Value of second feature's tags
                name: e_bvalue
                argpos: '15'
                format: {python: '("", " -bvalue=" + str(value))[value is not None]'}
                type: {_type: StringType}
        -   _type: InputParagraph
            prompt: Feature relation options
            name: e_featurerelationsection
            children:
            -   _type: InputProgramParameter
                comment: "This allows you to specify the allowed overlaps of the features\
                    \ A and B. \n  You can allow any or no overlaps, specify that\
                    \ they must or must  not overlap, that one must or must not be\
                    \ wholly enclosed  within another feature."
                prompt: Type of overlap required
                name: e_overlap
                argpos: '16'
                format: {python: '("", " -overlap=" + str(value))[value is not None
                        and value!=vdef]'}
                type:
                    _type: StringType
                    default: A
                    options:
                    - {label: Any, value: A}
                    - {label: Overlap required, value: O}
                    - {label: No overlaps are allowed, value: 'NO'}
                    - {label: Overlap required but not within, value: NW}
                    - {label: A must be all  within b, value: AW}
                    - {label: B must be all within a, value: BW}
            -   _type: InputProgramParameter
                comment: If this is greater or equal to 'maxrange', then no min or
                    max range is specified
                prompt: The minimum distance between the features
                name: e_minrange
                simple: true
                argpos: '17'
                format: {python: '("", " -minrange=" + str(value))[value is not None
                        and value!=vdef]'}
                mandatory: true
                type: {_type: IntegerType, default: 0}
            -   _type: InputProgramParameter
                comment: If this is less than or equal to 'minrange', then no min
                    or max range is specified
                prompt: The maximum distance between the features
                name: e_maxrange
                simple: true
                argpos: '18'
                format: {python: '("", " -maxrange=" + str(value))[value is not None
                        and value!=vdef]'}
                mandatory: true
                type: {_type: IntegerType, default: 0}
            -   _type: InputProgramParameter
                comment: This allows you to specify the positions from which the allowed
                    minimum or maximum distance between the features is  measured
                prompt: Positions from which to measure the distance
                name: e_rangetype
                argpos: '19'
                format: {python: '("", " -rangetype=" + str(value))[value is not None
                        and value!=vdef]'}
                type:
                    _type: StringType
                    default: N
                    options:
                    - {label: From nearest ends, value: N}
                    - {label: From left ends, value: L}
                    - {label: From right ends, value: R}
                    - {label: From furthest ends, value: F}
            -   _type: InputProgramParameter
                comment: This allows you to specify the required sense that the two
                    features must be on. This is ignored (always 'Any') when  looking
                    at protein sequence features.
                prompt: Sense of the features
                name: e_sense
                argpos: '20'
                format: {python: '("", " -sense=" + str(value))[value is not None
                        and value!=vdef]'}
                type:
                    _type: StringType
                    default: A
                    options:
                    - {label: Any sense, value: A}
                    - {label: Same sense, value: S}
                    - {label: Opposite sense, value: O}
            -   _type: InputProgramParameter
                comment: This allows you to specify the required order of the two
                    features. The order is measured from the start positions of the  features.
                    This criterion is always applied despite the specified  overlap
                    type required.
                prompt: Order of the features
                name: e_order
                argpos: '21'
                format: {python: '("", " -order=" + str(value))[value is not None
                        and value!=vdef]'}
                type:
                    _type: StringType
                    default: A
                    options:
                    - {label: Any, value: A}
                    - {label: Feature a then feature b, value: AB}
                    - {label: Feature b then feature a, value: BA}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            comment: If you set this to be true, then the two features themselves
                will be written out. If it is left as false, then a  single feature
                will be written out covering the two features you  found.
            prompt: Do you want the two features written out individually
            name: e_twoout
            argpos: '22'
            format: {python: '("", " -twoout")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: If you have specified that the pairs of features that are found
                should be reported as one feature in the ouput, then you can  specify
                the 'type' name of the new feature here. By default every  feature
                in the feature table is allowed. See  http://www.ebi.ac.uk/embl/WebFeat/
                for a list of the EMBL  feature types and see Appendix A of the Swissprot
                user manual in  http://www.expasy.org/sprot/userman.html for a list
                of the Swissprot  feature types. If you specify an invalid feature
                type name, then  the default name 'misc_feature' is used.
            prompt: Name of the output new feature
            name: e_typeout
            argpos: '23'
            format: {python: '("", " -typeout=" + str(value))[value is not None and
                    value!=vdef]'}
            precond: {'#not': e_twoout}
            type: {_type: StringType, default: misc_feature}
        -   _type: InputProgramParameter
            prompt: Name of the report file
            name: e_outfile
            argpos: '24'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: twofeat.report}
        -   _type: InputProgramParameter
            prompt: Choose the report output format
            name: e_rformat_outfile
            argpos: '25'
            format: {python: '("", " -rformat=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: TABLE
                options:
                - {label: Dasgff, value: DASGFF}
                - {label: Dbmotif, value: DBMOTIF}
                - {label: Diffseq, value: DIFFSEQ}
                - {label: Embl, value: EMBL}
                - {label: Excel, value: EXCEL}
                - {label: Feattable, value: FEATTABLE}
                - {label: Genbank, value: GENBANK}
                - {label: Gff, value: GFF}
                - {label: Listfile, value: LISTFILE}
                - {label: Motif, value: MOTIF}
                - {label: Nametable, value: NAMETABLE}
                - {label: Pir, value: PIR}
                - {label: Regions, value: REGIONS}
                - {label: Seqtable, value: SEQTABLE}
                - {label: Simple, value: SIMPLE}
                - {label: Srs, value: SRS}
                - {label: Swiss, value: SWISS}
                - {label: Table, value: TABLE}
                - {label: Tagseq, value: TAGSEQ}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '26'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
            precond:
                e_rformat_outfile:
                    '#in': [DASGFF, DBMOTIF, DIFFSEQ, EMBL, EXCEL, FEATTABLE, GENBANK,
                        GFF, LISTFILE, MOTIF, NAMETABLE, PIR, REGIONS, SEQTABLE, SIMPLE,
                        SRS, SWISS, TABLE, TAGSEQ]
operations: ['EDAM_operation:0255']
topics: ['EDAM_topic:0160']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/twofeat.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: twofeat
command: {path: null, value: twofeat}
