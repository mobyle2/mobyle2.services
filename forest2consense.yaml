_type: Program
name: forest2consense
title: forest2consense
description: Consensus tree "list processor"
authors: Eric Deveaud
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        comment: Input is a tree file which contains a series of trees in the Newick
            standard form
        prompt: First series of trees in file (intree)
        name: infile1
        simple: true
        argpos: '2'
        format: {perl: '" $value "', python: '" %s " % value'}
        mandatory: true
        type: {_type: FormattedType, data_terms: 'EDAM_data:0872'}
    -   _type: InputProgramParameter
        comment: Input is a tree file which contains a series of trees in the Newick
            standard form
        prompt: Second series of trees in file (intree)
        name: infile2
        simple: true
        argpos: '3'
        format: {perl: '" $value "', python: '" %s " % value'}
        mandatory: true
        type: {_type: FormattedType, data_terms: 'EDAM_data:0872'}
    -   _type: InputProgramParameter
        comment: the map file contains the mapping between short IDs that may have
            been used for tree generation and the real entry names
        prompt: Map file
        name: map_file
        argpos: '1'
        format: {perl: '" -m $value"', python: '" -m " + str(value)'}
    -   _type: InputProgramParameter
        prompt: Consensus type
        name: type
        type: {_type: StringType, default: MRE}
        paramfile: params
    -   _type: InputParagraph
        prompt: Output options
        name: output
        children:
        -   _type: InputProgramParameter
            comment: Tells the program to print a semi-graphical picture of the tree
                in the outfile.
            prompt: Print out tree (3)
            name: print_tree
            argpos: '1'
            format: {perl: '($value) ? "" : "3\\n"', python: '( "3\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: params
        -   _type: InputProgramParameter
            comment: Tells the program to save the tree in a treefile (a standard
                representation of trees where the tree is specified by a nested pairs
                of parentheses, enclosing names and separated by commas).
            prompt: Write out trees onto tree file (4)
            name: print_treefile
            argpos: '1'
            format: {perl: '($value) ? "" : "4\\n"', python: '( "4\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: params
        -   _type: InputProgramParameter
            prompt: Print out the data at start of run (1)
            name: printdata
            argpos: '1'
            format: {perl: '($value) ? "1\\n" : ""', python: '( "" , "1\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: params
    -   _type: InputParagraph
        prompt: Other options
        name: other_options
        children:
        -   _type: InputProgramParameter
            prompt: Outgroup species (O)
            name: outgroup
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "O\\n$value\\n"
                    : ""', python: '( "" , "O\n"+ str( value ) +"\n" )[ value is not
                    None and value != vdef ]'}
            type: {_type: IntegerType, default: 1}
            paramfile: params
        -   _type: InputProgramParameter
            prompt: Trees to be treated as rooted (R)
            name: rooted
            argpos: '1'
            format: {perl: '($value) ? "R\\n" : ""', python: '( "" , "R\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: params
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: params
    -   _type: InputProgramParameter
        name: terminal_type
        argpos: '-1'
        format: {perl: '"T\\n"', python: '"T\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Consense tree files
        name: treefile
        filenames: {perl: '"$infile1-$infile2-*.outtree"', python: '"%s-%s-*.outtree"
                % (infile1,infile2)'}
        precond: print_treefile
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
    -   _type: OutputProgramParameter
        prompt: Consense output files
        name: outfile
        filenames: {perl: '"$infile1-$infile2-*.outfile"', python: '"%s-%s-*.outfile"
                % (infile1,infile2)'}
comment: forest2consense processes two files containing lists of trees, and, for each
    of the possible combinations between the a tree of file 1 and a tree of file 2,
    a consensus tree using PHYLIP's consense package. tree leaves IDs renaming is
    processed using nw_rename
operations: ['EDAM_operation:0326']
topics: ['EDAM_topic:0084']
public_name: forest2consense
command: {path: null, value: forest2consense.py}
