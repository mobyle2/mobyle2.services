_type: Program
name: abiview
title: abiview
description: Display the trace in an ABI sequencer file
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            prompt: Abi sequencing trace file
            name: e_infile
            simple: true
            argpos: '1'
            format: {python: '("", " -infile=" + str(value))[value is not None]'}
            mandatory: true
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            prompt: Name of the output sequence file (e_outseq)
            name: e_outseq
            argpos: '2'
            format: {python: '("" , " -outseq=" + str(value))[value is not None]'}
        -   _type: InputProgramParameter
            prompt: Choose the sequence output format
            name: e_osformat_outseq
            argpos: '3'
            format: {python: '("", " -osformat=" + str(value))[value is not None and
                    value!=vdef]'}
        -   _type: InputProgramParameter
            prompt: Choose the e_graph output format
            name: e_graph
            simple: true
            argpos: '4'
            format: {python: '(" -graph=" + str(vdef), " -graph=" + str(value))[value
                    is not None and value!=vdef]'}
            mandatory: true
            type:
                _type: StringType
                default: png
                options:
                - {label: Png, value: png}
                - {label: Gif, value: gif}
                - {label: Cps, value: cps}
                - {label: Ps, value: ps}
                - {label: Meta, value: meta}
                - {label: Data, value: data}
        -   _type: InputProgramParameter
            prompt: Name of the output graph
            name: xy_goutfile
            argpos: '5'
            format: {python: '("" , " -goutfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: abiview_xygraph}
        -   _type: InputProgramParameter
            prompt: First base to report or display (value greater than or equal to
                0)
            name: e_startbase
            ctrl:
            -   message: Value greater than or equal to 0 is required
                test:
                    value: {'#gte': '0'}
            argpos: '6'
            format: {python: '("", " -startbase=" + str(value))[value is not None
                    and value!=vdef]'}
            type: {_type: IntegerType, default: 0}
        -   _type: InputProgramParameter
            comment: Last sequence base to report or display. If the default is set
                to zero then the value of this is taken as the maximum number  of
                bases.
            prompt: Last base to report or display
            name: e_endbase
            argpos: '7'
            format: {python: '("", " -endbase=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 0}
        -   _type: InputProgramParameter
            prompt: Separate the trace graphs for the 4 bases
            name: e_separate
            argpos: '8'
            format: {python: '("", " -separate")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display y-axis ticks
            name: e_yticks
            argpos: '9'
            format: {python: '("", " -yticks")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display the sequence on the graph
            name: e_sequence
            argpos: '10'
            format: {python: '(" -nosequence", "")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Sequence display window size
            name: e_window
            argpos: '11'
            format: {python: '("", " -window=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: IntegerType, default: 40}
        -   _type: InputProgramParameter
            prompt: Base graphs to be displayed
            name: e_bases
            argpos: '12'
            format: {python: '("", " -bases=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: StringType, default: GATC}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '12'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outseq_out option
            name: e_outseq_out
            filenames: {python: e_outseq}
            type: {_type: FormattedType, data_terms: 'EDAM_data:2977'}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: xy_outgraph_png
            filenames: {python: '"*.png"'}
            precond: {e_graph: png}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: xy_outgraph_gif
            filenames: {python: '"*.gif"'}
            precond: {e_graph: gif}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: xy_outgraph_ps
            filenames: {python: '"*.ps"'}
            precond:
                '#or':
                - {e_graph: ps}
                - {e_graph: cps}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: xy_outgraph_meta
            filenames: {python: '"*.meta"'}
            precond: {e_graph: meta}
        -   _type: OutputProgramParameter
            prompt: Graph file
            name: xy_outgraph_data
            filenames: {python: '"*.dat"'}
            precond: {e_graph: data}
operations: ['EDAM_operation:0337', 'EDAM_operation:0564']
topics: ['EDAM_topic:0102']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: abiview
command: {path: null, value: abiview}
