_type: Program
name: infoalign
title: infoalign
description: Display basic information about a multiple sequence alignment
inputs:
    _type: InputParagraph
    children:
    -   _type: InputParagraph
        prompt: Input section
        name: e_input
        children:
        -   _type: InputProgramParameter
            comment: The sequence alignment to be displayed.
            prompt: sequence option
            name: e_sequence
            simple: true
            argpos: '1'
            format: {python: '("", " -sequence=" + str(value))[value is not None]'}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200', 'EDAM_format:1993', 'EDAM_format:1996',
                    'EDAM_format:1985', 'EDAM_format:1986', 'EDAM_format:1988', 'EDAM_format:1989',
                    'EDAM_format:1987', 'EDAM_format:2002', 'EDAM_format:2003', 'EDAM_format:1999',
                    'EDAM_format:2001', 'EDAM_format:2001', 'EDAM_format:2001', 'EDAM_format:1990']
                data_terms: EDAM_data:0863
        -   _type: InputProgramParameter
            comment: This is the scoring matrix file used when comparing sequences.
                By default it is the file 'EBLOSUM62' (for proteins) or  the file
                'EDNAFULL' (for nucleic sequences). These files are  found in the
                'data' directory of the EMBOSS installation.
            prompt: Similarity scoring matrix file
            name: e_matrix
            argpos: '2'
            format: {python: '("", " -matrix=" + str(value))[value is not None and
                    value!=vdef]'}
            type:
                _type: StringType
                default: mobyle_null
                options:
                - {label: null, value: mobyle_null}
                - {label: Eblosum30, value: EBLOSUM30}
                - {label: Eblosum35, value: EBLOSUM35}
                - {label: Eblosum40, value: EBLOSUM40}
                - {label: Eblosum45, value: EBLOSUM45}
                - {label: Eblosum50, value: EBLOSUM50}
                - {label: Eblosum55, value: EBLOSUM55}
                - {label: Eblosum60, value: EBLOSUM60}
                - {label: Eblosum62, value: EBLOSUM62}
                - {label: Eblosum62-12, value: EBLOSUM62-12}
                - {label: Eblosum65, value: EBLOSUM65}
                - {label: Eblosum70, value: EBLOSUM70}
                - {label: Eblosum75, value: EBLOSUM75}
                - {label: Eblosum80, value: EBLOSUM80}
                - {label: Eblosum85, value: EBLOSUM85}
                - {label: Eblosum90, value: EBLOSUM90}
                - {label: Eblosumn, value: EBLOSUMN}
                - {label: Ednafull, value: EDNAFULL}
                - {label: Ednamat, value: EDNAMAT}
                - {label: Ednasimple, value: EDNASIMPLE}
                - {label: Epam10, value: EPAM10}
                - {label: Epam100, value: EPAM100}
                - {label: Epam110, value: EPAM110}
                - {label: Epam120, value: EPAM120}
                - {label: Epam130, value: EPAM130}
                - {label: Epam140, value: EPAM140}
                - {label: Epam150, value: EPAM150}
                - {label: Epam160, value: EPAM160}
                - {label: Epam170, value: EPAM170}
                - {label: Epam180, value: EPAM180}
                - {label: Epam190, value: EPAM190}
                - {label: Epam20, value: EPAM20}
                - {label: Epam200, value: EPAM200}
                - {label: Epam210, value: EPAM210}
                - {label: Epam220, value: EPAM220}
                - {label: Epam230, value: EPAM230}
                - {label: Epam240, value: EPAM240}
                - {label: Epam250, value: EPAM250}
                - {label: Epam260, value: EPAM260}
                - {label: Epam270, value: EPAM270}
                - {label: Epam280, value: EPAM280}
                - {label: Epam290, value: EPAM290}
                - {label: Epam30, value: EPAM30}
                - {label: Epam300, value: EPAM300}
                - {label: Epam310, value: EPAM310}
                - {label: Epam320, value: EPAM320}
                - {label: Epam330, value: EPAM330}
                - {label: Epam340, value: EPAM340}
                - {label: Epam350, value: EPAM350}
                - {label: Epam360, value: EPAM360}
                - {label: Epam370, value: EPAM370}
                - {label: Epam380, value: EPAM380}
                - {label: Epam390, value: EPAM390}
                - {label: Epam40, value: EPAM40}
                - {label: Epam400, value: EPAM400}
                - {label: Epam410, value: EPAM410}
                - {label: Epam420, value: EPAM420}
                - {label: Epam430, value: EPAM430}
                - {label: Epam440, value: EPAM440}
                - {label: Epam450, value: EPAM450}
                - {label: Epam460, value: EPAM460}
                - {label: Epam470, value: EPAM470}
                - {label: Epam480, value: EPAM480}
                - {label: Epam490, value: EPAM490}
                - {label: Epam50, value: EPAM50}
                - {label: Epam500, value: EPAM500}
                - {label: Epam60, value: EPAM60}
                - {label: Epam70, value: EPAM70}
                - {label: Epam80, value: EPAM80}
                - {label: Epam90, value: EPAM90}
                - {label: Sssub, value: SSSUB}
        -   _type: InputProgramParameter
            comment: If you give the number in the alignment or the name of a sequence,
                it will be taken to be the reference sequence. The  reference sequence
                is the one against which all the other  sequences are compared. If
                this is set to 0 then the consensus  sequence will be used as the
                reference sequence. By default the  consensus sequence is used as
                the reference sequence.
            prompt: The number or the name of the reference sequence
            name: e_refseq
            argpos: '3'
            format: {python: '("", " -refseq=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: StringType, default: '0'}
    -   _type: InputParagraph
        prompt: Advanced section
        name: e_advanced
        children:
        -   _type: InputProgramParameter
            comment: Set a cut-off for the % of positive scoring matches below which
                there is no consensus. The default plurality is taken as 50%  of the
                total weight of all the sequences in the alignment.
            prompt: Plurality check % for consensus (value from 0.0 to 100.0)
            name: e_plurality
            ctrl:
            -   message: Value greater than or equal to 0.0 is required
                test:
                    value: {'#gte': '0.0'}
            -   message: Value less than or equal to 100.0 is required
                test:
                    value: {'#lte': '100.0'}
            argpos: '4'
            format: {python: '("", " -plurality=" + str(value))[value is not None
                    and value!=vdef]'}
            type: {_type: FloatType, default: 50.0}
        -   _type: InputProgramParameter
            comment: Provides the facility of setting the required number of identities
                at a position for it to give a consensus. Therefore, if  this is set
                to 100% only columns of identities contribute to the  consensus.
            prompt: Required % of identities at a position fro consensus (value from
                0.0 to 100.0)
            name: e_identity
            ctrl:
            -   message: Value greater than or equal to 0.0 is required
                test:
                    value: {'#gte': '0.0'}
            -   message: Value less than or equal to 100.0 is required
                test:
                    value: {'#lte': '100.0'}
            argpos: '5'
            format: {python: '("", " -identity=" + str(value))[value is not None and
                    value!=vdef]'}
            type: {_type: FloatType, default: 0.0}
    -   _type: InputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: InputProgramParameter
            comment: If you enter the name of a file here then this program will write
                the sequence details into that file.
            prompt: Name of the output file (e_outfile)
            name: e_outfile
            argpos: '6'
            format: {python: '("" , " -outfile=" + str(value))[value is not None]'}
            type: {_type: StringType, default: outfile.infoalign}
        -   _type: InputProgramParameter
            prompt: Format output as an html table
            name: e_html
            argpos: '7'
            format: {python: '("", " -html")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "This is a way of shortening the command line if you only want\
                \ a few things to be displayed. Instead of specifying: \n  '-nohead\
                \ -nousa -noname -noalign -nogaps -nogapcount -nosimcount  -noidcount\
                \ -nodiffcount -noweight' \n  to get only the sequence length output,\
                \ you can specify \n  '-only -seqlength'"
            prompt: Display the specified columns
            name: e_only
            argpos: '8'
            format: {python: '("", " -only")[ bool(value) ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display column headings
            name: e_heading
            argpos: '9'
            format: {python: '("", " -heading")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display the usa of the sequence
            name: e_usa
            argpos: '10'
            format: {python: '("", " -usa")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'name' column
            name: e_name
            argpos: '11'
            format: {python: '("", " -name")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'seqlength' column
            name: e_seqlength
            argpos: '12'
            format: {python: '("", " -seqlength")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'alignlength' column
            name: e_alignlength
            argpos: '13'
            format: {python: '("", " -alignlength")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display number of gaps
            name: e_gaps
            argpos: '14'
            format: {python: '("", " -gaps")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display number of gap positions
            name: e_gapcount
            argpos: '15'
            format: {python: '("", " -gapcount")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display number of identical positions
            name: e_idcount
            argpos: '16'
            format: {python: '("", " -idcount")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display number of similar positions
            name: e_simcount
            argpos: '17'
            format: {python: '("", " -simcount")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display number of different positions
            name: e_diffcount
            argpos: '18'
            format: {python: '("", " -diffcount")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display % number of changed positions
            name: e_change
            argpos: '19'
            format: {python: '("", " -change")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'weight' column
            name: e_weight
            argpos: '20'
            format: {python: '("", " -weight")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Display 'description' column
            name: e_description
            argpos: '21'
            format: {python: '("", " -description")[ bool(value) ]'}
            precond: {'#not': e_only}
            type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        prompt: Turn off any prompting
        name: auto
        argpos: '22'
        format: {python: '" -auto -stdout"'}
        hidden: true
        type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output section
        name: e_output
        children:
        -   _type: OutputProgramParameter
            prompt: outfile_out option
            name: e_outfile_out
            filenames: {python: e_outfile}
operations: ['EDAM_operation:0257']
topics: ['EDAM_topic:0187']
documentation_links: ['http://bioweb2.pasteur.fr/docs/EMBOSS/infoalign.html', 'http://emboss.sourceforge.net/docs/themes']
public_name: infoalign
command: {path: null, value: infoalign}
