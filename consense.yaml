_type: Program
name: consense
title: consense
description: Consensus tree program
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: consense
        argpos: '0'
        format: {perl: '"consense <consense.params"', python: '"consense <consense.params"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputProgramParameter
        comment: Input is a tree file which contains a series of trees in the Newick
            standard form
        prompt: Series of trees in file (intree)
        name: infile
        simple: true
        argpos: '-10'
        format: {perl: '"ln -s $infile intree && "', python: '"ln -s "+ str( infile
                )+ " intree &&"'}
        mandatory: true
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
    -   _type: InputProgramParameter
        prompt: Consensus type
        name: type
        type: {_type: StringType, default: MRE}
        paramfile: consense.params
    -   _type: InputParagraph
        prompt: Output options
        name: output
        children:
        -   _type: InputProgramParameter
            comment: Tells the program to print a semi-graphical picture of the tree
                in the outfile.
            prompt: Print out tree (3)
            name: print_tree
            argpos: '1'
            format: {perl: '($value) ? "" : "3\\n"', python: '( "3\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: consense.params
        -   _type: InputProgramParameter
            comment: Tells the program to save the tree in a treefile (a standard
                representation of trees where the tree is specified by a nested pairs
                of parentheses, enclosing names and separated by commas).
            prompt: Write out trees onto tree file (4)
            name: print_treefile
            argpos: '1'
            format: {perl: '($value) ? "" : "4\\n"', python: '( "4\n" , "" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: consense.params
        -   _type: InputProgramParameter
            prompt: Print out the data at start of run (1)
            name: printdata
            argpos: '1'
            format: {perl: '($value) ? "1\\n" : ""', python: '( "" , "1\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: consense.params
    -   _type: InputParagraph
        prompt: Other options
        name: other_options
        children:
        -   _type: InputProgramParameter
            prompt: Outgroup species (O)
            name: outgroup
            argpos: '1'
            format: {perl: '(defined $value and $value != $vdef) ? "O\\n$value\\n"
                    : ""', python: '( "" , "O\n"+ str( value ) +"\n" )[ value is not
                    None and value != vdef ]'}
            type: {_type: IntegerType, default: 1}
            paramfile: consense.params
        -   _type: InputProgramParameter
            prompt: Trees to be treated as rooted (R)
            name: rooted
            argpos: '1'
            format: {perl: '($value) ? "R\\n" : ""', python: '( "" , "R\n" )[ value
                    ]'}
            type: {_type: BooleanType, default: false}
            paramfile: consense.params
    -   _type: InputProgramParameter
        name: confirm
        argpos: '1000'
        format: {perl: '"Y\\n"', python: '"Y\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
    -   _type: InputProgramParameter
        name: terminal_type
        argpos: '-1'
        format: {perl: '"T\\n"', python: '"T\n"'}
        hidden: true
        type: {_type: StringType}
        paramfile: consense.params
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Consense output file
        name: outfile
        filenames: {perl: '"consense.outfile"', python: '"consense.outfile"'}
    -   _type: OutputProgramParameter
        prompt: Consense tree file
        name: treefile
        filenames: {perl: '"consense.outtree"', python: '"consense.outtree"'}
        precond: print_treefile
        type:
            _type: FormattedType
            format_terms: ['EDAM_format:1910']
            data_terms: EDAM_data:0872
comment: "CONSENSE reads a  file of  computer-readable trees\n\tand prints out (and\
    \ may also write out onto a file) a consensus tree."
operations: ['EDAM_operation:0555']
topics: ['EDAM_topic:0084']
documentation_links: ['http://bioweb2.pasteur.fr/docs/phylip/doc/consense.html']
public_name: consense
command: {path: null, value: null}
