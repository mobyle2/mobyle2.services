_type: Program
name: hmmalign
title: HMMALIGN
description: Align sequences to a profile HMM
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: hmmcmd
        argpos: '0'
        format: {perl: '"hmmalign"', python: '"hmmalign"'}
        command: true
        hidden: true
        type: {_type: StringType}
    -   _type: InputParagraph
        prompt: Input file
        name: infile
        children:
        -   _type: InputParagraph
            comment: "Input sequence file may  be in  any unaligned  or  aligned file\
                \ format. If  it is \n            in  a multiple alignment format\
                \  (e.g. Stockholm, MSF,  ClustalW),  the  existing  alignment is\
                \  \n            ignored  (i.e.,  the\n\t      sequences are read\
                \ as if they were unaligned)."
            prompt: Input sequences file
            name: file
            children:
            -   _type: InputProgramParameter
                prompt: Sequences File
                name: seqfile
                simple: true
                format: {perl: '" $seqfile"', python: '" " + str(seqfile)'}
                mandatory: true
                type:
                    _type: FormattedType
                    format_terms: ['EDAM_format:2200', 'EDAM_format:1927', 'EDAM_format:1936',
                        'EDAM_format:2188']
                    data_terms: EDAM_data:2044
        -   _type: InputProgramParameter
            prompt: Profile HMM file
            name: hmmfile
            simple: true
            argpos: '2'
            format: {perl: '" $value"', python: '" "+str(value)'}
            mandatory: true
    -   _type: InputParagraph
        prompt: Expert Options
        name: expert_options
        children:
        -   _type: InputProgramParameter
            comment: "The alphabet type (amino, DNA, or RNA) is autodetected by default,\
                \ by looking at the composition of the\n            msafile. Autodetection\
                \ is normally quite reliable, but occasionally alphabet type may be\
                \ ambiguous and\n            autodetection can fail (for instance,\
                \ on tiny toy alignments of just a few residues). To avoid this, or\
                \ to\n            increase robustness in automated analysis pipelines,\
                \ you may specify the alphabet type of msafile with\n            these\
                \ options.Protein: Specify that all sequences in seqfile are proteins.\
                \ By default, alphabet type is\n                    autodetected from\
                \ looking at the residue composition.DNA: Specify that all sequences\
                \ in seqfile are DNAs.RNA: Specify that all sequences in seqfile are\
                \ RNAs."
            prompt: Assert sequences and hmm files are both in same type
            name: biotype
            format: {perl: '(defined $value and $value ne $vdef)? " $value" : ""',
                python: '("", " " + str(value))[ value is not None and value != vdef]'}
            type:
                _type: StringType
                default: 'null'
                options:
                - {label: No Autodetection, value: 'null'}
                - {label: Protein, value: --amino}
                - {label: DNA, value: --dna}
                - {label: RNA, value: --rna}
    -   _type: InputParagraph
        prompt: Common Options
        name: common_options
        children:
        -   _type: InputProgramParameter
            comment: "Include columns in the output alignment for every match (consensus)\
                \ state in\n            the hmmfile, even if it means having all-gap\
                \ columns. This is useful in analysis\n            pipelines that\
                \ need to be able to maintain a predetermined profile HMM architecture\n\
                \            (with an unchanging number of consensus columns) through\
                \ an hmmalign\n            step."
            prompt: Include all consensus columns in ali, even if all gaps
            name: allcol
            format: {perl: '($value) ? " --allcol : ""', python: '( "" , " --allcol
                    " )[ value  ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            comment: "Merge the existing alignment in file into the result, where\
                \ the file is exactly the\n            same alignment that was used\
                \ to build the model in hmmfile. This is done using\n            a\
                \ 'map' of alignment columns to consensus profile positions that is\
                \ stored in the\n            hmmfile. The multiple alignment in the\
                \ file will be exactly reproduced in its consensus\n            columns\
                \ (as defined by the profile), but the displayed alignment in insert\
                \ columns\n            may be altered, because insertions relative\
                \ to a profile are considered by convention\n            to be unaligned\
                \ data."
            prompt: Include alignment file
            name: mapali
            format: {perl: '(defined $value) ? " --mapali $value" : ""', python: '(
                    "" , " --mapali " + str(value) )[ value is not None ]'}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:1961']
                data_terms: EDAM_data:0863
    -   _type: InputParagraph
        prompt: Output Options
        name: output_options
        children:
        -   _type: InputProgramParameter
            comment: "Trim nonhomologous residues (assigned to N and C states in the\
                \ optimal alignments)\n            from the resulting multiple alignment\
                \ output."
            prompt: Trim terminal tails of nonaligned residues from alignment
            name: trim
            format: {perl: '($value) ? " --trim" : ""', python: '( "", " --trim" )[
                    value ]'}
            type: {_type: BooleanType, default: false}
        -   _type: InputProgramParameter
            prompt: Outfile name (-o)
            name: outfile_name
            format: {perl: '(defined $value)? " -o $value" : ""', python: '("", "
                    -o " + str(value))[value is not None]'}
            type: {_type: StringType}
        -   _type: InputProgramParameter
            comment: "Specify that the msafile is in the selected format. Currently\
                \ the accepted multiple \n            alignment sequence file formats\
                \ only include Stockholm and SELEX. Default is to autodetect\n   \
                \         the format of the file."
            prompt: Output format
            name: outputformat
            simple: true
            format: {perl: '(defined $value and $value ne $vdef) ? " --outformat $value"
                    : ""', python: '( "" , " --outformat " + str( value) )[ value
                    is not None and value != vdef ]'}
            type:
                _type: StringType
                default: STOCKHOLM
                options:
                - {label: STOCKHOLM, value: STOCKHOLM}
                - {label: Pfam, value: Pfam}
                - {label: A2M, value: A2M}
                - {label: PSIBLAST, value: PSIBLAST}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputParagraph
        prompt: Output Options
        name: output_options
        children:
        -   _type: OutputProgramParameter
            prompt: Alignment file
            name: outputfile
            filenames: {perl: '"$outfile_name"', python: str(outfile_name)}
            precond:
                outfile_name: {'#ne': None}
            type: {_type: FormattedType, data_terms: 'EDAM_data:0863'}
        -   _type: OutputProgramParameter
            prompt: Alignment file
            name: outfile
            filenames: {perl: '"hmmalign.out"', python: '"hmmalign.out"'}
            precond:
                outfile_name: {'#eq': None}
            output_type: stdout
            type: {_type: FormattedType, data_terms: 'EDAM_data:0863'}
operations: ['EDAM_operation:0300']
topics: ['EDAM_topics:0188']
public_name: hmmalign
command: {path: null, value: null}
