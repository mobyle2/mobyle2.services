_type: Program
name: muscle
version: 3.8.31
title: Muscle
description: MUSCLE is a program for creating multiple alignments of amino acid or
    nucleotide sequences.
authors: Edgar, R.C.
inputs:
    _type: InputParagraph
    children:
    -   _type: InputProgramParameter
        name: quiet
        format: {perl: '" -quiet"', python: '" -quiet"'}
        hidden: true
        type: {_type: StringType}
    -   _type: InputParagraph
        prompt: Inputs options
        name: inputs
        children:
        -   _type: InputProgramParameter
            prompt: Sequences (-in)
            name: sequence
            simple: true
            argpos: '10'
            format: {perl: '"-in $value"', python: '" -in " + str(value)'}
            precond:
                '#and':
                -   profile1: {'#eq': None}
                -   profile2: {'#eq': None}
            mandatory: true
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:2044
        -   _type: InputProgramParameter
            comment: By default, MUSCLE looks at the first 100 letters in the input
                sequence data (excluding gaps). If 95% or more of those letters are
                valid nucleotides (AGCTUN), then the file is treated as nucleotides,
                otherwise as amino acids.This method almost always guesses correctly,
                but you can make sure by specifying the sequence type on the command
                line.
            prompt: Determining sequence type (-seqtype)
            name: seqtype
            format: {perl: '(defined $value and $value ne $vdef) ? " -seqtype $value
                    " : ""', python: '( "" , " -seqtype " + str(value) )[ value is
                    not None and value != vdef ]'}
            type:
                _type: StringType
                default: auto
                options:
                - {label: Automatic, value: auto}
                - {label: Protein, value: protein}
                - {label: DNA, value: dna}
                - {label: RNA, value: rna}
    -   _type: InputParagraph
        prompt: Optimization parameters
        name: optimization
        children:
        -   _type: InputProgramParameter
            comment: You can control the number of iterations that MUSCLE does by
                specifying the -maxiters option.If you specify 1, 2 or 3, then this
                is exactly the number of iterations that will be performed.If the
                value is greater than 3, then muscle will continue up to the maximum
                you specify or until convergence is reached, which ever happens sooner.The
                default is 16. If you have a large number of sequences, refinement
                may be rather slow.
            prompt: Maximum number of iterations (-maxiters)
            name: maxiters
            format: {perl: '(defined $value and $value != $vdef) ? " -maxiters $value"
                    : ""', python: '( "" , " -maxiters " + str( value ) )[ value is
                    not None and value != vdef]'}
            type: {_type: IntegerType, default: 16}
        -   _type: InputProgramParameter
            comment: Option controls the maximum number of new trees to create in
                iteration 2.experience suggests that a point of diminishing returns
                is typically reached after the first tree, so the default value is
                1.If a larger value is given, the process will repeat until convergence
                or until this number of trees has been created, which ever comes first.
            prompt: Maximum number of trees (-maxtrees)
            name: maxtrees
            format: {perl: '(defined $value and $value != $vdef) ? "-maxtrees $value"
                    : ""', python: '( "" , " -maxtrees " + str( value ) )[ value is
                    not None and value != vdef]'}
            type: {_type: IntegerType, default: 1}
        -   _type: InputProgramParameter
            comment: If you have a large alignment, muscle may take a long time to
                complete. It is sometimes convenient to say "I want the best alignment
                I can get in 24 hours" rather than specifying a set of options that
                will take an unknown length of time.This is done by using -maxhours,
                which specifies a floating-point number of hours. If this time is
                exceeded, muscle will write out current alignment and stop. For example,muscle
                -in huge.fa -out huge.afa -maxiters 9999 -maxhours 24.0
            prompt: Maximum time to run in hours (-maxhours)
            name: maxhours
            format: {perl: '(defined $maxhours) ? "-maxhours $value" : ""', python: '(
                    "" , " -maxhours " + str( value ) )[ maxhours is not None ]'}
            type: {_type: FloatType}
        -   _type: InputProgramParameter
            comment: Creating a pair-wise alignment by dynamic programming requires
                computing an L1 * L2 matrix, where L1 and L2 are the sequence lengths.A
                trick used in algorithms such as BLAST is to reduce the size of this
                matrix by using fast methods to find "diagonals", i.e. short regions
                of high similarity between the two sequences.This speeds up the algorithm
                at the expense of some reduction in accuracy.
            prompt: Find diagonals (faster for similar sequences) (-diags)
            name: diags
            format: {perl: '(defined $value and $value != $vdef) ? " -diags " : ""',
                python: '( "" , " -diags " )[ value is not None and value != vdef]'}
            type: {_type: BooleanType, default: false}
    -   _type: InputProgramParameter
        comment: Three different protein profile scoring functions are supported,-
            the log-expectation score (-le option)- and a sum of pairs score using
            either the PAM200 matrix (-sp)- or the VTML240 matrix (-sv).The log-expectation
            score is the default as it gives better results on our tests, but is typically
            somewhere between two or three times slower than the sum-of-pairs score.For
            nucleotides, -spn is currently the only option (which is of course the
            default for nucleotide data, so you don't need to specify this option).
        prompt: The profile scoring function (for protein only)
        name: scoring
        precond:
            seqtype: {'#ne': nucleo}
        type: {_type: StringType, default: le}
    -   _type: InputParagraph
        comment: To align two sequence alignments. Not compatible with Input options.
        prompt: Profile Alignments parameters
        name: profile_option
        children:
        -   _type: InputProgramParameter
            prompt: Profile 1
            name: profile1
            format: {perl: '"-in1 $value"', python: '" -in1 " + str(value)'}
            precond:
                sequence: {'#eq': None}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:0863
        -   _type: InputProgramParameter
            prompt: Profile 2
            name: profile2
            format: {perl: '"-in2 $value"', python: '" -in2 " + str(value)'}
            precond:
                sequence: {'#eq': None}
            type:
                _type: FormattedType
                format_terms: ['EDAM_format:2200']
                data_terms: EDAM_data:0863
        -   _type: InputProgramParameter
            prompt: (-profile)
            name: profile
            format: {perl: '""', python: '" -profile "'}
            precond:
                '#and':
                -   sequence: {'#eq': None}
                -   profile1: {'#ne': None}
                -   profile2: {'#ne': None}
            hidden: true
            type: {_type: IntegerType}
    -   _type: InputParagraph
        prompt: Output Options
        name: outpout_options
        children:
        -   _type: InputProgramParameter
            comment: 'fasta : Write output in Fasta formathtml  : Write output in
                HTML formatmsf   : Write output in GCG MSF formatphylip   : Write
                output in Phylip (interleaved) formatmuscle   : Write output in CLUSTALW
                format with muscle headerclustalw : Write output in CLUSTALW format
                with CLUSTAL W (1.81)'
            prompt: output format
            name: outformat
            type: {_type: StringType, default: fasta}
        -   _type: InputProgramParameter
            prompt: Filename (-out)
            name: outfile
            format: {perl: '" -out $value"', python: '("", " -out " + str(value))[value
                    is not None]'}
            type: {_type: StringType}
outputs:
    _type: OutputParagraph
    children:
    -   _type: OutputProgramParameter
        prompt: Alignment
        name: alignmentout
        filenames: {perl: '(defined $outfile) ? "$outfile" : "muscle.out"', python: '(
                outfile , "muscle.out")[outfile is None]'}
        precond:
            outformat:
                '#in': [fasta, msf, phyi, clwstrict, clw]
        output_type: stdout
        type: {_type: FormattedType, data_terms: 'EDAM_data:0863'}
    -   _type: OutputProgramParameter
        prompt: Alignment
        name: muscleHtmlout
        filenames: {perl: '(defined $outfile) ? "$outfile" : "muscle.out"', python: '(
                outfile , "muscle.out")[outfile is None]'}
        precond: {outformat: html}
        output_type: stdout
operations: ['EDAM_operation:0492']
topics: ['EDAM_topic:0182']
references:
- {doi: 10.1093/nar/gkh340, label: 'Edgar, Robert C. (2004), MUSCLE: multiple sequence
        alignment with high accuracy and high throughput, Nucleic Acids Research 32(5),
        1792-97.', url: null}
documentation_links: ['http://www.drive5.com/muscle/']
homepage_links: ['http://www.drive5.com/muscle/']
public_name: muscle
command: {path: null, value: muscle}
source_links: ['http://www.drive5.com/muscle/downloads.htm']
